
TcpTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bec  08014c6c  08014c6c  00024c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017858  08017858  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017858  08017858  00027858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017860  08017860  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017860  08017860  00027860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017864  08017864  00027864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136a0  2000007c  080178e4  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001371c  080178e4  0003371c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cee1  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007316  00000000  00000000  0006cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd8  00000000  00000000  000742a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  00076080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000316e8  00000000  00000000  00077c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028dea  00000000  00000000  000a9340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e962f  00000000  00000000  000d212a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bb759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dcc  00000000  00000000  001bb7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c54 	.word	0x08014c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08014c54 	.word	0x08014c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f8fa 	bl	8000792 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f013 faa0 	bl	8013ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f013 fa72 	bl	8013a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	2000cdf0 	.word	0x2000cdf0

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000cdf0 	.word	0x2000cdf0

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff4c 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ba:	f7ff ff61 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	6978      	ldr	r0, [r7, #20]
 80007c6:	f7ff ffb1 	bl	800072c <NVIC_EncodePriority>
 80007ca:	4602      	mov	r2, r0
 80007cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff80 	bl	80006d8 <__NVIC_SetPriority>
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff54 	bl	800069c <__NVIC_EnableIRQ>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800080c:	4baa      	ldr	r3, [pc, #680]	; (8000ab8 <HAL_ETH_Init+0x2bc>)
 800080e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e185      	b.n	8000b2e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d106      	bne.n	800083c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f012 fa8a 	bl	8012d50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b9e      	ldr	r3, [pc, #632]	; (8000abc <HAL_ETH_Init+0x2c0>)
 8000842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000844:	4a9d      	ldr	r2, [pc, #628]	; (8000abc <HAL_ETH_Init+0x2c0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6453      	str	r3, [r2, #68]	; 0x44
 800084c:	4b9b      	ldr	r3, [pc, #620]	; (8000abc <HAL_ETH_Init+0x2c0>)
 800084e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000858:	4b99      	ldr	r3, [pc, #612]	; (8000ac0 <HAL_ETH_Init+0x2c4>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_ETH_Init+0x2c4>)
 800085e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000862:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000864:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <HAL_ETH_Init+0x2c4>)
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	4994      	ldr	r1, [pc, #592]	; (8000ac0 <HAL_ETH_Init+0x2c4>)
 800086e:	4313      	orrs	r3, r2
 8000870:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 0201 	orr.w	r2, r2, #1
 8000884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000888:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800088a:	f7ff fea7 	bl	80005dc <HAL_GetTick>
 800088e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000890:	e011      	b.n	80008b6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000892:	f7ff fea3 	bl	80005dc <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008a0:	d909      	bls.n	80008b6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e13b      	b.n	8000b2e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1e4      	bne.n	8000892 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f023 031c 	bic.w	r3, r3, #28
 80008d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80008d8:	f001 fd12 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 80008dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	4a78      	ldr	r2, [pc, #480]	; (8000ac4 <HAL_ETH_Init+0x2c8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d908      	bls.n	80008f8 <HAL_ETH_Init+0xfc>
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	4a77      	ldr	r2, [pc, #476]	; (8000ac8 <HAL_ETH_Init+0x2cc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d804      	bhi.n	80008f8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	e027      	b.n	8000948 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	4a73      	ldr	r2, [pc, #460]	; (8000ac8 <HAL_ETH_Init+0x2cc>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d908      	bls.n	8000912 <HAL_ETH_Init+0x116>
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4a72      	ldr	r2, [pc, #456]	; (8000acc <HAL_ETH_Init+0x2d0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d804      	bhi.n	8000912 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f043 030c 	orr.w	r3, r3, #12
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	e01a      	b.n	8000948 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4a6d      	ldr	r2, [pc, #436]	; (8000acc <HAL_ETH_Init+0x2d0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d903      	bls.n	8000922 <HAL_ETH_Init+0x126>
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4a6c      	ldr	r2, [pc, #432]	; (8000ad0 <HAL_ETH_Init+0x2d4>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d911      	bls.n	8000946 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4a6a      	ldr	r2, [pc, #424]	; (8000ad0 <HAL_ETH_Init+0x2d4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d908      	bls.n	800093c <HAL_ETH_Init+0x140>
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	4a69      	ldr	r2, [pc, #420]	; (8000ad4 <HAL_ETH_Init+0x2d8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d804      	bhi.n	800093c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e005      	b.n	8000948 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	e000      	b.n	8000948 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000946:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000954:	2100      	movs	r1, #0
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 fc19 	bl	800118e <HAL_ETH_WritePHYRegister>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00b      	beq.n	800097a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000966:	6939      	ldr	r1, [r7, #16]
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 fca5 	bl	80012b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e0d9      	b.n	8000b2e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	f7ff fe3a 	bl	80005f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 80a7 	beq.w	8000ad8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800098a:	f7ff fe27 	bl	80005dc <HAL_GetTick>
 800098e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	461a      	mov	r2, r3
 8000996:	2101      	movs	r1, #1
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 fb90 	bl	80010be <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800099e:	f7ff fe1d 	bl	80005dc <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d90f      	bls.n	80009d0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009b4:	6939      	ldr	r1, [r7, #16]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 fc7e 	bl	80012b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2201      	movs	r2, #1
 80009c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009cc:	2303      	movs	r3, #3
 80009ce:	e0ae      	b.n	8000b2e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0da      	beq.n	8000990 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80009da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009de:	2100      	movs	r1, #0
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fbd4 	bl	800118e <HAL_ETH_WritePHYRegister>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80009f0:	6939      	ldr	r1, [r7, #16]
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 fc60 	bl	80012b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2201      	movs	r2, #1
 80009fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a00:	2301      	movs	r3, #1
 8000a02:	e094      	b.n	8000b2e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a04:	f7ff fdea 	bl	80005dc <HAL_GetTick>
 8000a08:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2101      	movs	r1, #1
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fb53 	bl	80010be <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a18:	f7ff fde0 	bl	80005dc <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d90f      	bls.n	8000a4a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fc41 	bl	80012b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	e071      	b.n	8000b2e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0da      	beq.n	8000a0a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	461a      	mov	r2, r3
 8000a5a:	211f      	movs	r1, #31
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fb2e 	bl	80010be <HAL_ETH_ReadPHYRegister>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fc22 	bl	80012b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e056      	b.n	8000b2e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d004      	beq.n	8000a94 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	e002      	b.n	8000a9a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	e037      	b.n	8000b1c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	e032      	b.n	8000b1c <HAL_ETH_Init+0x320>
 8000ab6:	bf00      	nop
 8000ab8:	03938700 	.word	0x03938700
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	01312cff 	.word	0x01312cff
 8000ac8:	02160ebf 	.word	0x02160ebf
 8000acc:	039386ff 	.word	0x039386ff
 8000ad0:	05f5e0ff 	.word	0x05f5e0ff
 8000ad4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 fb4c 	bl	800118e <HAL_ETH_WritePHYRegister>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b00:	6939      	ldr	r1, [r7, #16]
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 fbd8 	bl	80012b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e00c      	b.n	8000b2e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b14:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b18:	f7ff fd6c 	bl	80005f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 fbca 	bl	80012b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop

08000b38 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d101      	bne.n	8000b58 <HAL_ETH_DMATxDescListInit+0x20>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e052      	b.n	8000bfe <HAL_ETH_DMATxDescListInit+0xc6>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2202      	movs	r2, #2
 8000b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e030      	b.n	8000bd6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b84:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b8c:	fb02 f303 	mul.w	r3, r2, r3
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d208      	bcs.n	8000bca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	e002      	b.n	8000bd0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3ca      	bcc.n	8000b74 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000be8:	3310      	adds	r3, #16
 8000bea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b087      	sub	sp, #28
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d101      	bne.n	8000c2a <HAL_ETH_DMARxDescListInit+0x20>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e056      	b.n	8000cd8 <HAL_ETH_DMARxDescListInit+0xce>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2202      	movs	r2, #2
 8000c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e034      	b.n	8000cb0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c56:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000c5e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d208      	bcs.n	8000ca4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	015b      	lsls	r3, r3, #5
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	e002      	b.n	8000caa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3c6      	bcc.n	8000c46 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cc2:	330c      	adds	r3, #12
 8000cc4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d101      	bne.n	8000d08 <HAL_ETH_TransmitFrame+0x24>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e0cd      	b.n	8000ea4 <HAL_ETH_TransmitFrame+0x1c0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2202      	movs	r2, #2
 8000d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e0b8      	b.n	8000ea4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da09      	bge.n	8000d50 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2212      	movs	r2, #18
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0a9      	b.n	8000ea4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d915      	bls.n	8000d86 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a54      	ldr	r2, [pc, #336]	; (8000eb0 <HAL_ETH_TransmitFrame+0x1cc>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	0a9b      	lsrs	r3, r3, #10
 8000d64:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_ETH_TransmitFrame+0x1cc>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0a9b      	lsrs	r3, r3, #10
 8000d70:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e001      	b.n	8000d8a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d11c      	bne.n	8000dca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000d9e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000daa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	e04b      	b.n	8000e62 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e044      	b.n	8000e5a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dde:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d107      	bne.n	8000df6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000df4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dfe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d116      	bne.n	8000e38 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e18:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_ETH_TransmitFrame+0x1d0>)
 8000e1e:	fb02 f203 	mul.w	r2, r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000e2a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e36:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e46:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	3301      	adds	r3, #1
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3b6      	bcc.n	8000dd0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00d      	beq.n	8000e92 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e7e:	3314      	adds	r3, #20
 8000e80:	2204      	movs	r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	ac02b00b 	.word	0xac02b00b
 8000eb4:	fffffa0c 	.word	0xfffffa0c

08000eb8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e074      	b.n	8000fbc <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2202      	movs	r2, #2
 8000ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000ee2:	e05a      	b.n	8000f9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef8:	d10d      	bne.n	8000f16 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
 8000f14:	e041      	b.n	8000f9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10b      	bne.n	8000f3c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
 8000f3a:	e02e      	b.n	8000f9a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d103      	bne.n	8000f5e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f6a:	1f1a      	subs	r2, r3, #4
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e010      	b.n	8000fbc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db02      	blt.n	8000faa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d99c      	bls.n	8000ee4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd8:	3314      	adds	r3, #20
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b40      	cmp	r3, #64	; 0x40
 8000fe2:	d112      	bne.n	800100a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f011 ff69 	bl	8012ebc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ff2:	3314      	adds	r3, #20
 8000ff4:	2240      	movs	r2, #64	; 0x40
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001008:	e01b      	b.n	8001042 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001012:	3314      	adds	r3, #20
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b01      	cmp	r3, #1
 800101c:	d111      	bne.n	8001042 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f839 	bl	8001096 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800102c:	3314      	adds	r3, #20
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800104a:	3314      	adds	r3, #20
 800104c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001050:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105a:	3314      	adds	r3, #20
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001066:	d112      	bne.n	800108e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f81e 	bl	80010aa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001076:	3314      	adds	r3, #20
 8001078:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	460b      	mov	r3, r1
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b82      	cmp	r3, #130	; 0x82
 80010de:	d101      	bne.n	80010e4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80010e0:	2302      	movs	r3, #2
 80010e2:	e050      	b.n	8001186 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2282      	movs	r2, #130	; 0x82
 80010e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 031c 	and.w	r3, r3, #28
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	8a1b      	ldrh	r3, [r3, #16]
 8001100:	02db      	lsls	r3, r3, #11
 8001102:	b29b      	uxth	r3, r3
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800110a:	897b      	ldrh	r3, [r7, #10]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f023 0302 	bic.w	r3, r3, #2
 800111e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff fa54 	bl	80005dc <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001136:	e015      	b.n	8001164 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001138:	f7ff fa50 	bl	80005dc <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d309      	bcc.n	800115c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e014      	b.n	8001186 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1e4      	bne.n	8001138 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	460b      	mov	r3, r1
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b42      	cmp	r3, #66	; 0x42
 80011ae:	d101      	bne.n	80011b4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80011b0:	2302      	movs	r3, #2
 80011b2:	e04e      	b.n	8001252 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2242      	movs	r2, #66	; 0x42
 80011b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 031c 	and.w	r3, r3, #28
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8a1b      	ldrh	r3, [r3, #16]
 80011d0:	02db      	lsls	r3, r3, #11
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80011da:	897b      	ldrh	r3, [r7, #10]
 80011dc:	019b      	lsls	r3, r3, #6
 80011de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800120a:	f7ff f9e7 	bl	80005dc <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001210:	e015      	b.n	800123e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001212:	f7ff f9e3 	bl	80005dc <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d309      	bcc.n	8001236 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e00d      	b.n	8001252 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e4      	bne.n	8001212 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_ETH_Start+0x16>
 800126c:	2302      	movs	r3, #2
 800126e:	e01f      	b.n	80012b0 <HAL_ETH_Start+0x56>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fa1b 	bl	80016bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa35 	bl	80016f6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fa7f 	bl	8001790 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fa4c 	bl	8001730 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fa61 	bl	8001760 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0b0      	sub	sp, #192	; 0xc0
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80012fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001302:	663b      	str	r3, [r7, #96]	; 0x60
 8001304:	e001      	b.n	800130a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800130a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001314:	2300      	movs	r3, #0
 8001316:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800138c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001390:	4bac      	ldr	r3, [pc, #688]	; (8001644 <ETH_MACDMAConfig+0x38c>)
 8001392:	4013      	ands	r3, r2
 8001394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001398:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800139a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800139c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800139e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80013a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80013a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80013aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80013ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80013ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80013b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80013b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80013b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80013ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80013bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80013be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80013c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80013c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80013c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80013c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80013c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80013ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80013cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff f901 	bl	80005f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80013fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001400:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001404:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800140a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800140c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001410:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001412:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001416:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800141c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001420:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001428:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800142a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff f8dc 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001444:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800144e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001458:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001464:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001468:	f64f 7341 	movw	r3, #65345	; 0xff41
 800146c:	4013      	ands	r3, r2
 800146e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001476:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800147c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800147e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001482:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001488:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800148a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800148e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001494:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001496:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800149a:	4313      	orrs	r3, r2
 800149c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff f89d 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80014c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff f888 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80014f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80014fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001500:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001512:	2304      	movs	r3, #4
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001532:	2300      	movs	r3, #0
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001536:	2300      	movs	r3, #0
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001542:	3318      	adds	r3, #24
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800154a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <ETH_MACDMAConfig+0x390>)
 8001550:	4013      	ands	r3, r2
 8001552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001556:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001558:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800155a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800155c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800155e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001560:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001562:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001564:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001566:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001568:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800156a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800156c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800156e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001572:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001576:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800157c:	4313      	orrs	r3, r2
 800157e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	3318      	adds	r3, #24
 800158c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001590:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159a:	3318      	adds	r3, #24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff f826 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	3318      	adds	r3, #24
 80015b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80015c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80015c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80015c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80015ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80015ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80015d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80015d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7fe ffff 	bl	80005f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001602:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10f      	bne.n	800162c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	331c      	adds	r3, #28
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	331c      	adds	r3, #28
 800162a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	461a      	mov	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f809 	bl	800164c <ETH_MACAddressConfig>
}
 800163a:	bf00      	nop
 800163c:	37c0      	adds	r7, #192	; 0xc0
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	ff20810f 	.word	0xff20810f
 8001648:	f8de3f23 	.word	0xf8de3f23

0800164c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3305      	adds	r3, #5
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3204      	adds	r2, #4
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <ETH_MACAddressConfig+0x68>)
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	061a      	lsls	r2, r3, #24
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3302      	adds	r3, #2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4313      	orrs	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <ETH_MACAddressConfig+0x6c>)
 800169e:	4413      	add	r3, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40028040 	.word	0x40028040
 80016b8:	40028044 	.word	0x40028044

080016bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0208 	orr.w	r2, r2, #8
 80016d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f000 f87f 	bl	80017e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0204 	orr.w	r2, r2, #4
 8001710:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800171a:	2001      	movs	r0, #1
 800171c:	f000 f862 	bl	80017e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001740:	3318      	adds	r3, #24
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	3318      	adds	r3, #24
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	3318      	adds	r3, #24
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0202 	orr.w	r2, r2, #2
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	3318      	adds	r3, #24
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a4:	3318      	adds	r3, #24
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	3318      	adds	r3, #24
 80017b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c0:	3318      	adds	r3, #24
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 f80c 	bl	80017e4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	3318      	adds	r3, #24
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <ETH_Delay+0x34>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <ETH_Delay+0x38>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0a5b      	lsrs	r3, r3, #9
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001800:	bf00      	nop
  } 
  while (Delay --);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	60fa      	str	r2, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f9      	bne.n	8001800 <ETH_Delay+0x1c>
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20000014 	.word	0x20000014
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e16b      	b.n	8001b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 815a 	bne.w	8001b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x4a>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b12      	cmp	r3, #18
 8001868:	d123      	bne.n	80018b2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0203 	and.w	r2, r3, #3
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d00b      	beq.n	8001906 <HAL_GPIO_Init+0xe6>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80b4 	beq.w	8001b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a5a      	ldr	r2, [pc, #360]	; (8001b2c <HAL_GPIO_Init+0x30c>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x310>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02b      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x314>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x222>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x318>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x21e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x31c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x21a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x320>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x216>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x324>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x212>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x328>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x20e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x20a>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00e      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4934      	ldr	r1, [pc, #208]	; (8001b2c <HAL_GPIO_Init+0x30c>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae90 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e22d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d075      	beq.n	8001c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b72:	4ba3      	ldr	r3, [pc, #652]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d112      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b9d      	ldr	r3, [pc, #628]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4b99      	ldr	r3, [pc, #612]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x108>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d157      	bne.n	8001c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e208      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x74>
 8001bba:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xb0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x98>
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a87      	ldr	r2, [pc, #540]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xb0>
 8001bec:	4b84      	ldr	r3, [pc, #528]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a83      	ldr	r2, [pc, #524]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a80      	ldr	r2, [pc, #512]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fce6 	bl	80005dc <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7fe fce2 	bl	80005dc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1cd      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xc0>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fcd2 	bl	80005dc <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe fcce 	bl	80005dc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1b9      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0xe8>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x152>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e18d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4952      	ldr	r1, [pc, #328]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_RCC_OscConfig+0x2b0>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7fe fc87 	bl	80005dc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7fe fc83 	bl	80005dc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e16e      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4940      	ldr	r1, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_OscConfig+0x2b0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fc66 	bl	80005dc <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d14:	f7fe fc62 	bl	80005dc <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e14d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d016      	beq.n	8001d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x2b4>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7fe fc46 	bl	80005dc <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe fc42 	bl	80005dc <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e12d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x200>
 8001d72:	e015      	b.n	8001da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x2b4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7fe fc2f 	bl	80005dc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d82:	f7fe fc2b 	bl	80005dc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e116      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a0 	beq.w	8001eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x2b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x2b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_RCC_OscConfig+0x2b8>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7fe fbf1 	bl	80005dc <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e011      	b.n	8001e22 <HAL_RCC_OscConfig+0x2ce>
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	42470e80 	.word	0x42470e80
 8001e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe fbe4 	bl	80005dc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0cf      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x478>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	e01c      	b.n	8001e7e <HAL_RCC_OscConfig+0x32a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x312>
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a5f      	ldr	r2, [pc, #380]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a5c      	ldr	r2, [pc, #368]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e00b      	b.n	8001e7e <HAL_RCC_OscConfig+0x32a>
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7fe fba9 	bl	80005dc <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7fe fba5 	bl	80005dc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e08e      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ee      	beq.n	8001e8e <HAL_RCC_OscConfig+0x33a>
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fb93 	bl	80005dc <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fb8f 	bl	80005dc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e078      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d064      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d05c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d141      	bne.n	8001f8e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x480>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fb64 	bl	80005dc <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe fb60 	bl	80005dc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e04b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	491d      	ldr	r1, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x480>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fb39 	bl	80005dc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fb35 	bl	80005dc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e020      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x41a>
 8001f8c:	e018      	b.n	8001fc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_OscConfig+0x480>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fb22 	bl	80005dc <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fb1e 	bl	80005dc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_OscConfig+0x47c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x448>
 8001fba:	e001      	b.n	8001fc0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470060 	.word	0x42470060

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0ca      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d90c      	bls.n	8002014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b6      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202c:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	494c      	ldr	r1, [pc, #304]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d044      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d119      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07d      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d003      	beq.n	8002096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06d      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e065      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4933      	ldr	r1, [pc, #204]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fa88 	bl	80005dc <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7fe fa84 	bl	80005dc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e04d      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d20c      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_ClockConfig+0x1b4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e030      	b.n	8002182 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4915      	ldr	r1, [pc, #84]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215e:	f000 f81d 	bl	800219c <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	fa21 f303 	lsr.w	r3, r1, r3
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800217a:	2000      	movs	r0, #0
 800217c:	f011 fcb2 	bl	8013ae4 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	080177a8 	.word	0x080177a8
 8002198:	20000014 	.word	0x20000014

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d007      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x32>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d008      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x38>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 808d 	bne.w	80022e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021ca:	60bb      	str	r3, [r7, #8]
       break;
 80021cc:	e08c      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021d0:	60bb      	str	r3, [r7, #8]
      break;
 80021d2:	e089      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	ea03 0501 	and.w	r5, r3, r1
 8002200:	ea04 0602 	and.w	r6, r4, r2
 8002204:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002206:	fb02 f106 	mul.w	r1, r2, r6
 800220a:	2200      	movs	r2, #0
 800220c:	fb02 f205 	mul.w	r2, r2, r5
 8002210:	440a      	add	r2, r1
 8002212:	493a      	ldr	r1, [pc, #232]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002214:	fba5 0101 	umull	r0, r1, r5, r1
 8002218:	1853      	adds	r3, r2, r1
 800221a:	4619      	mov	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fe f823 	bl	8000270 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e049      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	ea03 0501 	and.w	r5, r3, r1
 8002248:	ea04 0602 	and.w	r6, r4, r2
 800224c:	4629      	mov	r1, r5
 800224e:	4632      	mov	r2, r6
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	f04f 0400 	mov.w	r4, #0
 8002258:	0154      	lsls	r4, r2, #5
 800225a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800225e:	014b      	lsls	r3, r1, #5
 8002260:	4619      	mov	r1, r3
 8002262:	4622      	mov	r2, r4
 8002264:	1b49      	subs	r1, r1, r5
 8002266:	eb62 0206 	sbc.w	r2, r2, r6
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0194      	lsls	r4, r2, #6
 8002274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002278:	018b      	lsls	r3, r1, #6
 800227a:	1a5b      	subs	r3, r3, r1
 800227c:	eb64 0402 	sbc.w	r4, r4, r2
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	00e2      	lsls	r2, r4, #3
 800228a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800228e:	00d9      	lsls	r1, r3, #3
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	195b      	adds	r3, r3, r5
 8002296:	eb44 0406 	adc.w	r4, r4, r6
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	02a2      	lsls	r2, r4, #10
 80022a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022a8:	0299      	lsls	r1, r3, #10
 80022aa:	460b      	mov	r3, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	4621      	mov	r1, r4
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	f7fd ffd8 	bl	8000270 <__aeabi_uldivmod>
 80022c0:	4603      	mov	r3, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	60bb      	str	r3, [r7, #8]
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022e4:	60bb      	str	r3, [r7, #8]
      break;
 80022e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	017d7840 	.word	0x017d7840

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	080177b8 	.word	0x080177b8

08002340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	220f      	movs	r2, #15
 800234e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_RCC_GetClockConfig+0x60>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40023c00 	.word	0x40023c00

080023a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01d      	b.n	80023f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f815 	bl	80023fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f968 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d007      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d122      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d11b      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0202 	mvn.w	r2, #2
 8002482:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8ee 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 800249e:	e005      	b.n	80024ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8e0 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8f1 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d122      	bne.n	8002506 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d11b      	bne.n	8002506 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0204 	mvn.w	r2, #4
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8c4 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80024f2:	e005      	b.n	8002500 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f8b6 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8c7 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d122      	bne.n	800255a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11b      	bne.n	800255a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0208 	mvn.w	r2, #8
 800252a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f89a 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002546:	e005      	b.n	8002554 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f88c 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f89d 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b10      	cmp	r3, #16
 8002566:	d122      	bne.n	80025ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b10      	cmp	r3, #16
 8002574:	d11b      	bne.n	80025ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0210 	mvn.w	r2, #16
 800257e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2208      	movs	r2, #8
 8002584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f870 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 800259a:	e005      	b.n	80025a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f862 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f873 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10e      	bne.n	80025da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0201 	mvn.w	r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f011 fa3f 	bl	8013a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f903 	bl	800280c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f838 	bl	80026a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0220 	mvn.w	r2, #32
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8cd 	bl	80027f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d00f      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <TIM_Base_SetConfig+0x114>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d027      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <TIM_Base_SetConfig+0x118>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d023      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <TIM_Base_SetConfig+0x11c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_Base_SetConfig+0x120>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TIM_Base_SetConfig+0x124>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d017      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0x128>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <TIM_Base_SetConfig+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00f      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0x130>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0x134>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <TIM_Base_SetConfig+0x138>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <TIM_Base_SetConfig+0x13c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <TIM_Base_SetConfig+0x114>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d003      	beq.n	80027b0 <TIM_Base_SetConfig+0xf8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <TIM_Base_SetConfig+0x124>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800
 80027ec:	40001800 	.word	0x40001800
 80027f0:	40001c00 	.word	0x40001c00
 80027f4:	40002000 	.word	0x40002000

080027f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800282e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002832:	2b84      	cmp	r3, #132	; 0x84
 8002834:	d005      	beq.n	8002842 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	3303      	adds	r3, #3
 8002840:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002856:	f3ef 8305 	mrs	r3, IPSR
 800285a:	607b      	str	r3, [r7, #4]
  return(result);
 800285c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002878:	f001 fd5e 	bl	8004338 <vTaskStartScheduler>
  
  return osOK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}

08002882 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002886:	f7ff ffe3 	bl	8002850 <inHandlerMode>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002890:	f001 fe6a 	bl	8004568 <xTaskGetTickCountFromISR>
 8002894:	4603      	mov	r3, r0
 8002896:	e002      	b.n	800289e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002898:	f001 fe56 	bl	8004548 <xTaskGetTickCount>
 800289c:	4603      	mov	r3, r0
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a4:	b089      	sub	sp, #36	; 0x24
 80028a6:	af04      	add	r7, sp, #16
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <osThreadCreate+0x54>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01c      	beq.n	80028f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685c      	ldr	r4, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681d      	ldr	r5, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691e      	ldr	r6, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffa6 	bl	8002820 <makeFreeRtosPriority>
 80028d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028de:	9202      	str	r2, [sp, #8]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9100      	str	r1, [sp, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4632      	mov	r2, r6
 80028e8:	4629      	mov	r1, r5
 80028ea:	4620      	mov	r0, r4
 80028ec:	f001 fb10 	bl	8003f10 <xTaskCreateStatic>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e01c      	b.n	8002930 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685c      	ldr	r4, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002902:	b29e      	uxth	r6, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff88 	bl	8002820 <makeFreeRtosPriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	4632      	mov	r2, r6
 800291e:	4629      	mov	r1, r5
 8002920:	4620      	mov	r0, r4
 8002922:	f001 fb4e 	bl	8003fc2 <xTaskCreate>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d001      	beq.n	8002930 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800293a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f001 fc6a 	bl	800421c <vTaskDelete>
  return osOK;
 8002948:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  taskYIELD();
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <osThreadYield+0x20>)
 800295a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	2001      	movs	r0, #1
 8002990:	f000 fc7c 	bl	800328c <xQueueCreateMutexStatic>
 8002994:	4603      	mov	r3, r0
 8002996:	e003      	b.n	80029a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002998:	2001      	movs	r0, #1
 800299a:	f000 fc5f 	bl	800325c <xQueueCreateMutex>
 800299e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <osMutexWait+0x18>
    return osErrorParameter;
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	e03a      	b.n	8002a36 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d103      	bne.n	80029d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e009      	b.n	80029e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <osMutexWait+0x40>
      ticks = 1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80029e8:	f7ff ff32 	bl	8002850 <inHandlerMode>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d017      	beq.n	8002a22 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	461a      	mov	r2, r3
 80029f8:	2100      	movs	r1, #0
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f001 f85e 	bl	8003abc <xQueueReceiveFromISR>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <osMutexWait+0x62>
      return osErrorOS;
 8002a06:	23ff      	movs	r3, #255	; 0xff
 8002a08:	e015      	b.n	8002a36 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <osMutexWait+0x8c>
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <osMutexWait+0x98>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	e008      	b.n	8002a34 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 ff41 	bl	80038ac <xQueueSemaphoreTake>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <osMutexWait+0x8c>
    return osErrorOS;
 8002a30:	23ff      	movs	r3, #255	; 0xff
 8002a32:	e000      	b.n	8002a36 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002a54:	f7ff fefc 	bl	8002850 <inHandlerMode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fdbb 	bl	80035e0 <xQueueGiveFromISR>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d001      	beq.n	8002a74 <osMutexRelease+0x30>
      return osErrorOS;
 8002a70:	23ff      	movs	r3, #255	; 0xff
 8002a72:	e017      	b.n	8002aa4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <osMutexRelease+0x5e>
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <osMutexRelease+0x68>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	e00a      	b.n	8002aa2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fc16 	bl	80032c4 <xQueueGenericSend>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002a9e:	23ff      	movs	r3, #255	; 0xff
 8002aa0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10b      	bne.n	8002ae0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	2303      	movs	r3, #3
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 fad8 	bl	800308c <xQueueGenericCreateStatic>
 8002adc:	4603      	mov	r3, r0
 8002ade:	e016      	b.n	8002b0e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e014      	b.n	8002b0e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d110      	bne.n	8002b0c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002aea:	2203      	movs	r2, #3
 8002aec:	2100      	movs	r1, #0
 8002aee:	2001      	movs	r0, #1
 8002af0:	f000 fb3e 	bl	8003170 <xQueueGenericCreate>
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <osSemaphoreCreate+0x58>
 8002afc:	2300      	movs	r3, #0
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fbde 	bl	80032c4 <xQueueGenericSend>
      return sema;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e000      	b.n	8002b0e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002b0c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	e03a      	b.n	8002ba6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d103      	bne.n	8002b44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e009      	b.n	8002b58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b58:	f7ff fe7a 	bl	8002850 <inHandlerMode>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d017      	beq.n	8002b92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	461a      	mov	r2, r3
 8002b68:	2100      	movs	r1, #0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ffa6 	bl	8003abc <xQueueReceiveFromISR>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b76:	23ff      	movs	r3, #255	; 0xff
 8002b78:	e015      	b.n	8002ba6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d011      	beq.n	8002ba4 <osSemaphoreWait+0x8c>
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <osSemaphoreWait+0x98>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	e008      	b.n	8002ba4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fe89 	bl	80038ac <xQueueSemaphoreTake>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002ba0:	23ff      	movs	r3, #255	; 0xff
 8002ba2:	e000      	b.n	8002ba6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002bc4:	f7ff fe44 	bl	8002850 <inHandlerMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fd03 	bl	80035e0 <xQueueGiveFromISR>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002be0:	23ff      	movs	r3, #255	; 0xff
 8002be2:	e017      	b.n	8002c14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d013      	beq.n	8002c12 <osSemaphoreRelease+0x5e>
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <osSemaphoreRelease+0x68>)
 8002bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	e00a      	b.n	8002c12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fb5e 	bl	80032c4 <xQueueGenericSend>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002c0e:	23ff      	movs	r3, #255	; 0xff
 8002c10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002c28:	f7ff fe12 	bl	8002850 <inHandlerMode>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8002c32:	2382      	movs	r3, #130	; 0x82
 8002c34:	e003      	b.n	8002c3e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fff5 	bl	8003c26 <vQueueDelete>

  return osOK; 
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c46:	b590      	push	{r4, r7, lr}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <osMessageCreate+0x38>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68dc      	ldr	r4, [r3, #12]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	4623      	mov	r3, r4
 8002c76:	f000 fa09 	bl	800308c <xQueueGenericCreateStatic>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	e008      	b.n	8002c90 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f000 fa71 	bl	8003170 <xQueueGenericCreate>
 8002c8e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}

08002c98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <osMessagePut+0x1e>
    ticks = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002cb6:	f7ff fdcb 	bl	8002850 <inHandlerMode>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002cc0:	f107 0210 	add.w	r2, r7, #16
 8002cc4:	f107 0108 	add.w	r1, r7, #8
 8002cc8:	2300      	movs	r3, #0
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fbf4 	bl	80034b8 <xQueueGenericSendFromISR>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <osMessagePut+0x42>
      return osErrorOS;
 8002cd6:	23ff      	movs	r3, #255	; 0xff
 8002cd8:	e018      	b.n	8002d0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d014      	beq.n	8002d0a <osMessagePut+0x72>
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <osMessagePut+0x7c>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	e00b      	b.n	8002d0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002cf2:	f107 0108 	add.w	r1, r7, #8
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fae2 	bl	80032c4 <xQueueGenericSend>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <osMessagePut+0x72>
      return osErrorOS;
 8002d06:	23ff      	movs	r3, #255	; 0xff
 8002d08:	e000      	b.n	8002d0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b08b      	sub	sp, #44	; 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	617b      	str	r3, [r7, #20]
    return event;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	461c      	mov	r4, r3
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d46:	e054      	b.n	8002df2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d103      	bne.n	8002d60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e009      	b.n	8002d74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <osMessageGet+0x5c>
      ticks = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002d74:	f7ff fd6c 	bl	8002850 <inHandlerMode>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01c      	beq.n	8002db8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002d7e:	f107 0220 	add.w	r2, r7, #32
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	3304      	adds	r3, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	f000 fe96 	bl	8003abc <xQueueReceiveFromISR>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002d96:	2310      	movs	r3, #16
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e001      	b.n	8002da0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01d      	beq.n	8002de2 <osMessageGet+0xca>
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <osMessageGet+0xe4>)
 8002da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	e014      	b.n	8002de2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f000 fc96 	bl	80036f4 <xQueueReceive>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002dce:	2310      	movs	r3, #16
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e006      	b.n	8002de2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <osMessageGet+0xc6>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <osMessageGet+0xc8>
 8002dde:	2340      	movs	r3, #64	; 0x40
 8002de0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	461c      	mov	r4, r3
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	372c      	adds	r7, #44	; 0x2c
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002e08:	f7ff fd22 	bl	8002850 <inHandlerMode>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 feec 	bl	8003bf0 <uxQueueMessagesWaitingFromISR>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	e003      	b.n	8002e24 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 feca 	bl	8003bb6 <uxQueueMessagesWaiting>
 8002e22:	4603      	mov	r3, r0
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002e34:	f7ff fd0c 	bl	8002850 <inHandlerMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <osMessageDelete+0x16>
    return osErrorISR;
 8002e3e:	2382      	movs	r3, #130	; 0x82
 8002e40:	e003      	b.n	8002e4a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 feef 	bl	8003c26 <vQueueDelete>

  return osOK; 
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f103 0208 	add.w	r2, r3, #8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f103 0208 	add.w	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0208 	add.w	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d103      	bne.n	8002f14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e00c      	b.n	8002f2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3308      	adds	r3, #8
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e002      	b.n	8002f22 <vListInsert+0x2e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d2f6      	bcs.n	8002f1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d103      	bne.n	8002f9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	e7fe      	b.n	8002fe2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002fe4:	f002 f932 	bl	800524c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	3b01      	subs	r3, #1
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	22ff      	movs	r2, #255	; 0xff
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	22ff      	movs	r2, #255	; 0xff
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d114      	bne.n	8003064 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3310      	adds	r3, #16
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fbda 	bl	8004800 <xTaskRemoveFromEventList>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <xQueueGenericReset+0xcc>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	e009      	b.n	8003078 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3310      	adds	r3, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fef2 	bl	8002e52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3324      	adds	r3, #36	; 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff feed 	bl	8002e52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003078:	f002 f916 	bl	80052a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800307c:	2301      	movs	r3, #1
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <xQueueGenericCreateStatic+0x28>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	e7fe      	b.n	80030b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <xQueueGenericCreateStatic+0x42>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e7fe      	b.n	80030cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <xQueueGenericCreateStatic+0x4e>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <xQueueGenericCreateStatic+0x52>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xQueueGenericCreateStatic+0x54>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <xQueueGenericCreateStatic+0x6c>
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	e7fe      	b.n	80030f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <xQueueGenericCreateStatic+0x78>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <xQueueGenericCreateStatic+0x7c>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <xQueueGenericCreateStatic+0x7e>
 8003108:	2300      	movs	r3, #0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <xQueueGenericCreateStatic+0x96>
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e7fe      	b.n	8003120 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003122:	2348      	movs	r3, #72	; 0x48
 8003124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b48      	cmp	r3, #72	; 0x48
 800312a:	d009      	beq.n	8003140 <xQueueGenericCreateStatic+0xb4>
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e7fe      	b.n	800313e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003152:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f842 	bl	80031ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003168:	4618      	mov	r0, r3
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <xQueueGenericCreate+0x28>
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e7fe      	b.n	8003196 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e004      	b.n	80031ae <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3348      	adds	r3, #72	; 0x48
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 f964 	bl	8005480 <pvPortMalloc>
 80031b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00f      	beq.n	80031e0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	3348      	adds	r3, #72	; 0x48
 80031c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f805 	bl	80031ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80031e0:	69bb      	ldr	r3, [r7, #24]
	}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e002      	b.n	800320c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003218:	2101      	movs	r1, #1
 800321a:	69b8      	ldr	r0, [r7, #24]
 800321c:	f7ff fece 	bl	8002fbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f838 	bl	80032c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	461a      	mov	r2, r3
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f7ff ff7b 	bl	8003170 <xQueueGenericCreate>
 800327a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff ffd3 	bl	8003228 <prvInitialiseMutex>

		return pxNewQueue;
 8003282:	68fb      	ldr	r3, [r7, #12]
	}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003298:	2301      	movs	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	6939      	ldr	r1, [r7, #16]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff feee 	bl	800308c <xQueueGenericCreateStatic>
 80032b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ffb8 	bl	8003228 <prvInitialiseMutex>

		return pxNewQueue;
 80032b8:	68fb      	ldr	r3, [r7, #12]
	}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032d2:	2300      	movs	r3, #0
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <xQueueGenericSend+0x30>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f2:	e7fe      	b.n	80032f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <xQueueGenericSend+0x3e>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <xQueueGenericSend+0x42>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xQueueGenericSend+0x44>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <xQueueGenericSend+0x5c>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e7fe      	b.n	800331e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d103      	bne.n	800332e <xQueueGenericSend+0x6a>
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <xQueueGenericSend+0x6e>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueGenericSend+0x70>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <xQueueGenericSend+0x88>
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	e7fe      	b.n	800334a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800334c:	f001 fc14 	bl	8004b78 <xTaskGetSchedulerState>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <xQueueGenericSend+0x98>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <xQueueGenericSend+0x9c>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <xQueueGenericSend+0x9e>
 8003360:	2300      	movs	r3, #0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <xQueueGenericSend+0xb6>
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e7fe      	b.n	8003378 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800337a:	f001 ff67 	bl	800524c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <xQueueGenericSend+0xcc>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d129      	bne.n	80033e4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003396:	f000 fc80 	bl	8003c9a <prvCopyDataToQueue>
 800339a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	3324      	adds	r3, #36	; 0x24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fa29 	bl	8004800 <xTaskRemoveFromEventList>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <xQueueGenericSend+0x1f0>)
 80033b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	e00a      	b.n	80033dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <xQueueGenericSend+0x1f0>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033dc:	f001 ff64 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e063      	b.n	80034ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033ea:	f001 ff5d 	bl	80052a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e05c      	b.n	80034ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fa61 	bl	80048c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003402:	2301      	movs	r3, #1
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003406:	f001 ff4f 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800340a:	f000 fff3 	bl	80043f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800340e:	f001 ff1d 	bl	800524c <vPortEnterCritical>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003418:	b25b      	sxtb	r3, r3
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d103      	bne.n	8003428 <xQueueGenericSend+0x164>
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d103      	bne.n	800343e <xQueueGenericSend+0x17a>
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800343e:	f001 ff33 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003442:	1d3a      	adds	r2, r7, #4
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fa50 	bl	80048f0 <xTaskCheckForTimeOut>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d124      	bne.n	80034a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003458:	f000 fd17 	bl	8003e8a <prvIsQueueFull>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d018      	beq.n	8003494 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	3310      	adds	r3, #16
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f001 f9a4 	bl	80047b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003472:	f000 fca2 	bl	8003dba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003476:	f000 ffcb 	bl	8004410 <xTaskResumeAll>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	f47f af7c 	bne.w	800337a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <xQueueGenericSend+0x1f0>)
 8003484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	e772      	b.n	800337a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003496:	f000 fc90 	bl	8003dba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800349a:	f000 ffb9 	bl	8004410 <xTaskResumeAll>
 800349e:	e76c      	b.n	800337a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034a2:	f000 fc8a 	bl	8003dba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034a6:	f000 ffb3 	bl	8004410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034aa:	2300      	movs	r3, #0
		}
	}
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08e      	sub	sp, #56	; 0x38
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericSendFromISR+0x2c>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSendFromISR+0x3a>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSendFromISR+0x3e>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericSendFromISR+0x40>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <xQueueGenericSendFromISR+0x58>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	e7fe      	b.n	800350e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <xQueueGenericSendFromISR+0x66>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <xQueueGenericSendFromISR+0x6a>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSendFromISR+0x6c>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <xQueueGenericSendFromISR+0x84>
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e7fe      	b.n	800353a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800353c:	f001 ff62 	bl	8005404 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003540:	f3ef 8211 	mrs	r2, BASEPRI
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	61ba      	str	r2, [r7, #24]
 8003556:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003558:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <xQueueGenericSendFromISR+0xb6>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d12c      	bne.n	80035c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357e:	f000 fb8c 	bl	8003c9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003582:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d112      	bne.n	80035b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	3324      	adds	r3, #36	; 0x24
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f931 	bl	8004800 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e007      	b.n	80035c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035b6:	3301      	adds	r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	b25a      	sxtb	r2, r3
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035c2:	2301      	movs	r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80035c6:	e001      	b.n	80035cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	637b      	str	r3, [r7, #52]	; 0x34
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3738      	adds	r7, #56	; 0x38
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	; 0x38
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <xQueueGiveFromISR+0x28>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	e7fe      	b.n	8003606 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <xQueueGiveFromISR+0x44>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e7fe      	b.n	8003622 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <xQueueGiveFromISR+0x54>
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <xQueueGiveFromISR+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <xQueueGiveFromISR+0x5a>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <xQueueGiveFromISR+0x72>
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e7fe      	b.n	8003650 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003652:	f001 fed7 	bl	8005404 <vPortValidateInterruptPriority>
	__asm volatile
 8003656:	f3ef 8211 	mrs	r2, BASEPRI
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	617a      	str	r2, [r7, #20]
 800366c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800366e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367e:	429a      	cmp	r2, r3
 8003680:	d22b      	bcs.n	80036da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d112      	bne.n	80036c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	3324      	adds	r3, #36	; 0x24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f8a8 	bl	8004800 <xTaskRemoveFromEventList>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e007      	b.n	80036d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c8:	3301      	adds	r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036d4:	2301      	movs	r3, #1
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	e001      	b.n	80036de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3738      	adds	r7, #56	; 0x38
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <xQueueReceive+0x2e>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	e7fe      	b.n	8003720 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <xQueueReceive+0x3c>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <xQueueReceive+0x40>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <xQueueReceive+0x42>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <xQueueReceive+0x5a>
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e7fe      	b.n	800374c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800374e:	f001 fa13 	bl	8004b78 <xTaskGetSchedulerState>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <xQueueReceive+0x6a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <xQueueReceive+0x6e>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <xQueueReceive+0x70>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <xQueueReceive+0x88>
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e7fe      	b.n	800377a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800377c:	f001 fd66 	bl	800524c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01f      	beq.n	80037cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003790:	f000 faed 	bl	8003d6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00f      	beq.n	80037c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	3310      	adds	r3, #16
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 f829 	bl	8004800 <xTaskRemoveFromEventList>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037b4:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <xQueueReceive+0x1b4>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037c4:	f001 fd70 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e069      	b.n	80038a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037d2:	f001 fd69 	bl	80052a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e062      	b.n	80038a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 f86d 	bl	80048c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ee:	f001 fd5b 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037f2:	f000 fdff 	bl	80043f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037f6:	f001 fd29 	bl	800524c <vPortEnterCritical>
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d103      	bne.n	8003810 <xQueueReceive+0x11c>
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	b25b      	sxtb	r3, r3
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d103      	bne.n	8003826 <xQueueReceive+0x132>
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003826:	f001 fd3f 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800382a:	1d3a      	adds	r2, r7, #4
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f85c 	bl	80048f0 <xTaskCheckForTimeOut>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d123      	bne.n	8003886 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800383e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003840:	f000 fb0d 	bl	8003e5e <prvIsQueueEmpty>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ffb0 	bl	80047b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385a:	f000 faae 	bl	8003dba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800385e:	f000 fdd7 	bl	8004410 <xTaskResumeAll>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d189      	bne.n	800377c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <xQueueReceive+0x1b4>)
 800386a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	e780      	b.n	800377c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800387a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387c:	f000 fa9d 	bl	8003dba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003880:	f000 fdc6 	bl	8004410 <xTaskResumeAll>
 8003884:	e77a      	b.n	800377c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003888:	f000 fa97 	bl	8003dba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800388c:	f000 fdc0 	bl	8004410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003892:	f000 fae4 	bl	8003e5e <prvIsQueueEmpty>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	f43f af6f 	beq.w	800377c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800389e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3730      	adds	r7, #48	; 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <xQueueSemaphoreTake+0x30>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	e7fe      	b.n	80038da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <xQueueSemaphoreTake+0x4c>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e7fe      	b.n	80038f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038f8:	f001 f93e 	bl	8004b78 <xTaskGetSchedulerState>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <xQueueSemaphoreTake+0x5c>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <xQueueSemaphoreTake+0x60>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <xQueueSemaphoreTake+0x62>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <xQueueSemaphoreTake+0x7a>
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e7fe      	b.n	8003924 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003926:	f001 fc91 	bl	800524c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d024      	beq.n	8003980 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003946:	f001 fadd 	bl	8004f04 <pvTaskIncrementMutexHeldCount>
 800394a:	4602      	mov	r2, r0
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00f      	beq.n	8003978 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	3310      	adds	r3, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f000 ff4f 	bl	8004800 <xTaskRemoveFromEventList>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003968:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <xQueueSemaphoreTake+0x20c>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003978:	f001 fc96 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 800397c:	2301      	movs	r3, #1
 800397e:	e096      	b.n	8003aae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d110      	bne.n	80039a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <xQueueSemaphoreTake+0xf4>
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e7fe      	b.n	800399e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80039a0:	f001 fc82 	bl	80052a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e082      	b.n	8003aae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 ff86 	bl	80048c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039bc:	f001 fc74 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c0:	f000 fd18 	bl	80043f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039c4:	f001 fc42 	bl	800524c <vPortEnterCritical>
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <xQueueSemaphoreTake+0x132>
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d103      	bne.n	80039f4 <xQueueSemaphoreTake+0x148>
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f4:	f001 fc58 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f8:	463a      	mov	r2, r7
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 ff75 	bl	80048f0 <xTaskCheckForTimeOut>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d132      	bne.n	8003a72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a0e:	f000 fa26 	bl	8003e5e <prvIsQueueEmpty>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d026      	beq.n	8003a66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003a20:	f001 fc14 	bl	800524c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f8c3 	bl	8004bb4 <xTaskPriorityInherit>
 8003a2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003a30:	f001 fc3a 	bl	80052a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 febb 	bl	80047b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a44:	f000 f9b9 	bl	8003dba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a48:	f000 fce2 	bl	8004410 <xTaskResumeAll>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f47f af69 	bne.w	8003926 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <xQueueSemaphoreTake+0x20c>)
 8003a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	e75f      	b.n	8003926 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a68:	f000 f9a7 	bl	8003dba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a6c:	f000 fcd0 	bl	8004410 <xTaskResumeAll>
 8003a70:	e759      	b.n	8003926 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a74:	f000 f9a1 	bl	8003dba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a78:	f000 fcca 	bl	8004410 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a7e:	f000 f9ee 	bl	8003e5e <prvIsQueueEmpty>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f43f af4e 	beq.w	8003926 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003a90:	f001 fbdc 	bl	800524c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a96:	f000 f8e8 	bl	8003c6a <prvGetDisinheritPriorityAfterTimeout>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 f990 	bl	8004dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003aa8:	f001 fbfe 	bl	80052a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3738      	adds	r7, #56	; 0x38
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <xQueueReceiveFromISR+0x2a>
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <xQueueReceiveFromISR+0x38>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <xQueueReceiveFromISR+0x3c>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <xQueueReceiveFromISR+0x3e>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <xQueueReceiveFromISR+0x56>
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e7fe      	b.n	8003b10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b12:	f001 fc77 	bl	8005404 <vPortValidateInterruptPriority>
	__asm volatile
 8003b16:	f3ef 8211 	mrs	r2, BASEPRI
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	61ba      	str	r2, [r7, #24]
 8003b2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003b2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02f      	beq.n	8003b9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4c:	f000 f90f 	bl	8003d6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d112      	bne.n	8003b88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fe46 	bl	8004800 <xTaskRemoveFromEventList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e007      	b.n	8003b98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	b25a      	sxtb	r2, r3
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9c:	e001      	b.n	8003ba2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	e7fe      	b.n	8003bd6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8003bd8:	f001 fb38 	bl	800524c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003be2:	f001 fb61 	bl	80052a8 <vPortExitCritical>

	return uxReturn;
 8003be6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <uxQueueMessagesWaitingFromISR+0x22>
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	e7fe      	b.n	8003c10 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8003c18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <vQueueDelete+0x26>
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	e7fe      	b.n	8003c4a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f935 	bl	8003ebc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f001 fcd1 	bl	8005604 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1c3 0307 	rsb	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e001      	b.n	8003c8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10d      	bne.n	8003cd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d14d      	bne.n	8003d5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fffb 	bl	8004cc0 <xTaskPriorityDisinherit>
 8003cca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	e043      	b.n	8003d5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d119      	bne.n	8003d0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6898      	ldr	r0, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	f010 f8be 	bl	8013e66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d32b      	bcc.n	8003d5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	e026      	b.n	8003d5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68d8      	ldr	r0, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	461a      	mov	r2, r3
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	f010 f8a4 	bl	8013e66 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	425b      	negs	r3, r3
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d207      	bcs.n	8003d4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	425b      	negs	r3, r3
 8003d44:	441a      	add	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d105      	bne.n	8003d5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d64:	697b      	ldr	r3, [r7, #20]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d303      	bcc.n	8003da2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	461a      	mov	r2, r3
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f010 f85a 	bl	8013e66 <memcpy>
	}
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dc2:	f001 fa43 	bl	800524c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dce:	e011      	b.n	8003df4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fd0f 	bl	8004800 <xTaskRemoveFromEventList>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003de8:	f000 fde2 	bl	80049b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	dce9      	bgt.n	8003dd0 <prvUnlockQueue+0x16>
 8003dfc:	e000      	b.n	8003e00 <prvUnlockQueue+0x46>
					break;
 8003dfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	22ff      	movs	r2, #255	; 0xff
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e08:	f001 fa4e 	bl	80052a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e0c:	f001 fa1e 	bl	800524c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e18:	e011      	b.n	8003e3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3310      	adds	r3, #16
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fcea 	bl	8004800 <xTaskRemoveFromEventList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e32:	f000 fdbd 	bl	80049b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e36:	7bbb      	ldrb	r3, [r7, #14]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dce9      	bgt.n	8003e1a <prvUnlockQueue+0x60>
 8003e46:	e000      	b.n	8003e4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e52:	f001 fa29 	bl	80052a8 <vPortExitCritical>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e66:	f001 f9f1 	bl	800524c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e72:	2301      	movs	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e001      	b.n	8003e7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e7c:	f001 fa14 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e92:	f001 f9db 	bl	800524c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d102      	bne.n	8003ea8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e001      	b.n	8003eac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eac:	f001 f9fc 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e016      	b.n	8003ef8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <vQueueUnregisterQueue+0x50>)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d10b      	bne.n	8003ef2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003eda:	4a0c      	ldr	r2, [pc, #48]	; (8003f0c <vQueueUnregisterQueue+0x50>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <vQueueUnregisterQueue+0x50>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
				break;
 8003ef0:	e005      	b.n	8003efe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d9e5      	bls.n	8003eca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	2000cdf4 	.word	0x2000cdf4

08003f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <xTaskCreateStatic+0x28>
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	e7fe      	b.n	8003f36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <xTaskCreateStatic+0x42>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	e7fe      	b.n	8003f50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f52:	2354      	movs	r3, #84	; 0x54
 8003f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b54      	cmp	r3, #84	; 0x54
 8003f5a:	d009      	beq.n	8003f70 <xTaskCreateStatic+0x60>
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e7fe      	b.n	8003f6e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01e      	beq.n	8003fb4 <xTaskCreateStatic+0xa4>
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9303      	str	r3, [sp, #12]
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f850 	bl	800404c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fae:	f000 f8cb 	bl	8004148 <prvAddNewTaskToReadyList>
 8003fb2:	e001      	b.n	8003fb8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb8:	697b      	ldr	r3, [r7, #20]
	}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08c      	sub	sp, #48	; 0x30
 8003fc6:	af04      	add	r7, sp, #16
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fa52 	bl	8005480 <pvPortMalloc>
 8003fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fe4:	2054      	movs	r0, #84	; 0x54
 8003fe6:	f001 fa4b 	bl	8005480 <pvPortMalloc>
 8003fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff8:	e005      	b.n	8004006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f001 fb02 	bl	8005604 <vPortFree>
 8004000:	e001      	b.n	8004006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	2300      	movs	r3, #0
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	9302      	str	r3, [sp, #8]
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f80e 	bl	800404c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004030:	69f8      	ldr	r0, [r7, #28]
 8004032:	f000 f889 	bl	8004148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004036:	2301      	movs	r3, #1
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e002      	b.n	8004042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004042:	69bb      	ldr	r3, [r7, #24]
	}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004064:	3b01      	subs	r3, #1
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f023 0307 	bic.w	r3, r3, #7
 8004072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <prvInitialiseNewTask+0x46>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e7fe      	b.n	8004090 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e012      	b.n	80040be <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	7819      	ldrb	r1, [r3, #0]
 80040a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	3334      	adds	r3, #52	; 0x34
 80040a8:	460a      	mov	r2, r1
 80040aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d9e9      	bls.n	8004098 <prvInitialiseNewTask+0x4c>
 80040c4:	e000      	b.n	80040c8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80040c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d901      	bls.n	80040da <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040d6:	2306      	movs	r3, #6
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	2200      	movs	r2, #0
 80040ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	3304      	adds	r3, #4
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fece 	bl	8002e92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	3318      	adds	r3, #24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fec9 	bl	8002e92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	f1c3 0207 	rsb	r2, r3, #7
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2200      	movs	r2, #0
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	f000 ff65 	bl	8004ff8 <pxPortInitialiseStack>
 800412e:	4602      	mov	r2, r0
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004150:	f001 f87c 	bl	800524c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004166:	4a27      	ldr	r2, [pc, #156]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004174:	f000 fc40 	bl	80049f8 <prvInitialiseTaskLists>
 8004178:	e00d      	b.n	8004196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d802      	bhi.n	8004196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 800419e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fe fe6f 	bl	8002eac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ce:	f001 f86b 	bl	80052a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000198 	.word	0x20000198
 8004204:	20000098 	.word	0x20000098
 8004208:	200001a4 	.word	0x200001a4
 800420c:	200001b4 	.word	0x200001b4
 8004210:	200001a0 	.word	0x200001a0
 8004214:	2000009c 	.word	0x2000009c
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004224:	f001 f812 	bl	800524c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <vTaskDelete+0x18>
 800422e:	4b38      	ldr	r3, [pc, #224]	; (8004310 <vTaskDelete+0xf4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	e000      	b.n	8004236 <vTaskDelete+0x1a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fe92 	bl	8002f66 <uxListRemove>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d115      	bne.n	8004274 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4931      	ldr	r1, [pc, #196]	; (8004314 <vTaskDelete+0xf8>)
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <vTaskDelete+0x58>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	2201      	movs	r2, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43da      	mvns	r2, r3
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <vTaskDelete+0xfc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4013      	ands	r3, r2
 8004270:	4a29      	ldr	r2, [pc, #164]	; (8004318 <vTaskDelete+0xfc>)
 8004272:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3318      	adds	r3, #24
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fe70 	bl	8002f66 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004286:	4b25      	ldr	r3, [pc, #148]	; (800431c <vTaskDelete+0x100>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	4a23      	ldr	r2, [pc, #140]	; (800431c <vTaskDelete+0x100>)
 800428e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <vTaskDelete+0xf4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	429a      	cmp	r2, r3
 8004298:	d10b      	bne.n	80042b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	481f      	ldr	r0, [pc, #124]	; (8004320 <vTaskDelete+0x104>)
 80042a2:	f7fe fe03 	bl	8002eac <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80042a6:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <vTaskDelete+0x108>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <vTaskDelete+0x108>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e009      	b.n	80042c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <vTaskDelete+0x10c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <vTaskDelete+0x10c>)
 80042ba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fc07 	bl	8004ad0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80042c2:	f000 fc33 	bl	8004b2c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80042c6:	f000 ffef 	bl	80052a8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <vTaskDelete+0x110>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <vTaskDelete+0xf4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d115      	bne.n	8004308 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <vTaskDelete+0x114>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <vTaskDelete+0xdc>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	e7fe      	b.n	80042f6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <vTaskDelete+0x118>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000098 	.word	0x20000098
 8004314:	2000009c 	.word	0x2000009c
 8004318:	200001a0 	.word	0x200001a0
 800431c:	200001b4 	.word	0x200001b4
 8004320:	2000016c 	.word	0x2000016c
 8004324:	20000180 	.word	0x20000180
 8004328:	20000198 	.word	0x20000198
 800432c:	200001a4 	.word	0x200001a4
 8004330:	200001c0 	.word	0x200001c0
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004346:	463a      	mov	r2, r7
 8004348:	1d39      	adds	r1, r7, #4
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4618      	mov	r0, r3
 8004350:	f00f f84a 	bl	80133e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	2300      	movs	r3, #0
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	460a      	mov	r2, r1
 8004366:	491d      	ldr	r1, [pc, #116]	; (80043dc <vTaskStartScheduler+0xa4>)
 8004368:	481d      	ldr	r0, [pc, #116]	; (80043e0 <vTaskStartScheduler+0xa8>)
 800436a:	f7ff fdd1 	bl	8003f10 <xTaskCreateStatic>
 800436e:	4602      	mov	r2, r0
 8004370:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <vTaskStartScheduler+0xac>)
 8004372:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <vTaskStartScheduler+0xac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800437c:	2301      	movs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e001      	b.n	8004386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d115      	bne.n	80043b8 <vTaskStartScheduler+0x80>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <vTaskStartScheduler+0xb0>)
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <vTaskStartScheduler+0xb4>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <vTaskStartScheduler+0xb8>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043b2:	f000 fead 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043b6:	e00d      	b.n	80043d4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d109      	bne.n	80043d4 <vTaskStartScheduler+0x9c>
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e7fe      	b.n	80043d2 <vTaskStartScheduler+0x9a>
}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	08014c6c 	.word	0x08014c6c
 80043e0:	080049c9 	.word	0x080049c9
 80043e4:	200001bc 	.word	0x200001bc
 80043e8:	200001b8 	.word	0x200001b8
 80043ec:	200001a4 	.word	0x200001a4
 80043f0:	2000019c 	.word	0x2000019c

080043f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <vTaskSuspendAll+0x18>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a03      	ldr	r2, [pc, #12]	; (800440c <vTaskSuspendAll+0x18>)
 8004400:	6013      	str	r3, [r2, #0]
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	200001c0 	.word	0x200001c0

08004410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <xTaskResumeAll+0x114>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <xTaskResumeAll+0x2a>
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	e7fe      	b.n	8004438 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800443a:	f000 ff07 	bl	800524c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800443e:	4b39      	ldr	r3, [pc, #228]	; (8004524 <xTaskResumeAll+0x114>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a37      	ldr	r2, [pc, #220]	; (8004524 <xTaskResumeAll+0x114>)
 8004446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <xTaskResumeAll+0x114>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d161      	bne.n	8004514 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004450:	4b35      	ldr	r3, [pc, #212]	; (8004528 <xTaskResumeAll+0x118>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d05d      	beq.n	8004514 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004458:	e02e      	b.n	80044b8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800445a:	4b34      	ldr	r3, [pc, #208]	; (800452c <xTaskResumeAll+0x11c>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3318      	adds	r3, #24
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe fd7d 	bl	8002f66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe fd78 	bl	8002f66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	2201      	movs	r2, #1
 800447c:	409a      	lsls	r2, r3
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <xTaskResumeAll+0x120>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <xTaskResumeAll+0x120>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4a27      	ldr	r2, [pc, #156]	; (8004534 <xTaskResumeAll+0x124>)
 8004496:	441a      	add	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fe fd04 	bl	8002eac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <xTaskResumeAll+0x128>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <xTaskResumeAll+0x12c>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b8:	4b1c      	ldr	r3, [pc, #112]	; (800452c <xTaskResumeAll+0x11c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1cc      	bne.n	800445a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044c6:	f000 fb31 	bl	8004b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <xTaskResumeAll+0x130>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d010      	beq.n	80044f8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044d6:	f000 f859 	bl	800458c <xTaskIncrementTick>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <xTaskResumeAll+0x12c>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f1      	bne.n	80044d6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <xTaskResumeAll+0x130>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <xTaskResumeAll+0x12c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <xTaskResumeAll+0x134>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004514:	f000 fec8 	bl	80052a8 <vPortExitCritical>

	return xAlreadyYielded;
 8004518:	68bb      	ldr	r3, [r7, #8]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	200001c0 	.word	0x200001c0
 8004528:	20000198 	.word	0x20000198
 800452c:	20000158 	.word	0x20000158
 8004530:	200001a0 	.word	0x200001a0
 8004534:	2000009c 	.word	0x2000009c
 8004538:	20000098 	.word	0x20000098
 800453c:	200001ac 	.word	0x200001ac
 8004540:	200001a8 	.word	0x200001a8
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <xTaskGetTickCount+0x1c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004554:	687b      	ldr	r3, [r7, #4]
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000019c 	.word	0x2000019c

08004568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800456e:	f000 ff49 	bl	8005404 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <xTaskGetTickCountFromISR+0x20>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800457c:	683b      	ldr	r3, [r7, #0]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000019c 	.word	0x2000019c

0800458c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004596:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <xTaskIncrementTick+0x14c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 808c 	bne.w	80046b8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045a0:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <xTaskIncrementTick+0x150>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045a8:	4a4c      	ldr	r2, [pc, #304]	; (80046dc <xTaskIncrementTick+0x150>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d11f      	bne.n	80045f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <xTaskIncrementTick+0x154>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <xTaskIncrementTick+0x46>
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	e7fe      	b.n	80045d0 <xTaskIncrementTick+0x44>
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <xTaskIncrementTick+0x154>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <xTaskIncrementTick+0x158>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a40      	ldr	r2, [pc, #256]	; (80046e0 <xTaskIncrementTick+0x154>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <xTaskIncrementTick+0x158>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b40      	ldr	r3, [pc, #256]	; (80046e8 <xTaskIncrementTick+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a3e      	ldr	r2, [pc, #248]	; (80046e8 <xTaskIncrementTick+0x15c>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	f000 fa9c 	bl	8004b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045f4:	4b3d      	ldr	r3, [pc, #244]	; (80046ec <xTaskIncrementTick+0x160>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d34d      	bcc.n	800469a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <xTaskIncrementTick+0x154>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <xTaskIncrementTick+0x80>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <xTaskIncrementTick+0x82>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	4b36      	ldr	r3, [pc, #216]	; (80046ec <xTaskIncrementTick+0x160>)
 8004614:	f04f 32ff 	mov.w	r2, #4294967295
 8004618:	601a      	str	r2, [r3, #0]
					break;
 800461a:	e03e      	b.n	800469a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <xTaskIncrementTick+0x154>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d203      	bcs.n	800463c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <xTaskIncrementTick+0x160>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6013      	str	r3, [r2, #0]
						break;
 800463a:	e02e      	b.n	800469a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3304      	adds	r3, #4
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fc90 	bl	8002f66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	3318      	adds	r3, #24
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fc87 	bl	8002f66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <xTaskIncrementTick+0x164>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <xTaskIncrementTick+0x164>)
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <xTaskIncrementTick+0x168>)
 8004678:	441a      	add	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7fe fc13 	bl	8002eac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <xTaskIncrementTick+0x16c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	429a      	cmp	r2, r3
 8004692:	d3b4      	bcc.n	80045fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004698:	e7b1      	b.n	80045fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <xTaskIncrementTick+0x16c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	4914      	ldr	r1, [pc, #80]	; (80046f4 <xTaskIncrementTick+0x168>)
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d907      	bls.n	80046c2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e004      	b.n	80046c2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <xTaskIncrementTick+0x170>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	4a0f      	ldr	r2, [pc, #60]	; (80046fc <xTaskIncrementTick+0x170>)
 80046c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <xTaskIncrementTick+0x174>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200001c0 	.word	0x200001c0
 80046dc:	2000019c 	.word	0x2000019c
 80046e0:	20000150 	.word	0x20000150
 80046e4:	20000154 	.word	0x20000154
 80046e8:	200001b0 	.word	0x200001b0
 80046ec:	200001b8 	.word	0x200001b8
 80046f0:	200001a0 	.word	0x200001a0
 80046f4:	2000009c 	.word	0x2000009c
 80046f8:	20000098 	.word	0x20000098
 80046fc:	200001a8 	.word	0x200001a8
 8004700:	200001ac 	.word	0x200001ac

08004704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <vTaskSwitchContext+0xa0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004712:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <vTaskSwitchContext+0xa4>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004718:	e03e      	b.n	8004798 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <vTaskSwitchContext+0xa4>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <vTaskSwitchContext+0xa8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	f1c3 031f 	rsb	r3, r3, #31
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	491e      	ldr	r1, [pc, #120]	; (80047b0 <vTaskSwitchContext+0xac>)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <vTaskSwitchContext+0x5a>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e7fe      	b.n	800475c <vTaskSwitchContext+0x58>
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <vTaskSwitchContext+0xac>)
 800476a:	4413      	add	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	3308      	adds	r3, #8
 8004780:	429a      	cmp	r2, r3
 8004782:	d104      	bne.n	800478e <vTaskSwitchContext+0x8a>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <vTaskSwitchContext+0xb0>)
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	200001c0 	.word	0x200001c0
 80047a8:	200001ac 	.word	0x200001ac
 80047ac:	200001a0 	.word	0x200001a0
 80047b0:	2000009c 	.word	0x2000009c
 80047b4:	20000098 	.word	0x20000098

080047b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <vTaskPlaceOnEventList+0x24>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e7fe      	b.n	80047da <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <vTaskPlaceOnEventList+0x44>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3318      	adds	r3, #24
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fb85 	bl	8002ef4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ea:	2101      	movs	r1, #1
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f000 fb9d 	bl	8004f2c <prvAddCurrentTaskToDelayedList>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000098 	.word	0x20000098

08004800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <xTaskRemoveFromEventList+0x2a>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e7fe      	b.n	8004828 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3318      	adds	r3, #24
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fb99 	bl	8002f66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004834:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <xTaskRemoveFromEventList+0xac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11c      	bne.n	8004876 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3304      	adds	r3, #4
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fb90 	bl	8002f66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	2201      	movs	r2, #1
 800484c:	409a      	lsls	r2, r3
 800484e:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <xTaskRemoveFromEventList+0xb0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <xTaskRemoveFromEventList+0xb0>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <xTaskRemoveFromEventList+0xb4>)
 8004866:	441a      	add	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fb1c 	bl	8002eac <vListInsertEnd>
 8004874:	e005      	b.n	8004882 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3318      	adds	r3, #24
 800487a:	4619      	mov	r1, r3
 800487c:	480e      	ldr	r0, [pc, #56]	; (80048b8 <xTaskRemoveFromEventList+0xb8>)
 800487e:	f7fe fb15 	bl	8002eac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <xTaskRemoveFromEventList+0xbc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	429a      	cmp	r2, r3
 800488e:	d905      	bls.n	800489c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <xTaskRemoveFromEventList+0xc0>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e001      	b.n	80048a0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200001c0 	.word	0x200001c0
 80048b0:	200001a0 	.word	0x200001a0
 80048b4:	2000009c 	.word	0x2000009c
 80048b8:	20000158 	.word	0x20000158
 80048bc:	20000098 	.word	0x20000098
 80048c0:	200001ac 	.word	0x200001ac

080048c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <vTaskInternalSetTimeOutState+0x24>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <vTaskInternalSetTimeOutState+0x28>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200001b0 	.word	0x200001b0
 80048ec:	2000019c 	.word	0x2000019c

080048f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <xTaskCheckForTimeOut+0x24>
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e7fe      	b.n	8004912 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <xTaskCheckForTimeOut+0x3e>
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e7fe      	b.n	800492c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800492e:	f000 fc8d 	bl	800524c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <xTaskCheckForTimeOut+0xb8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d102      	bne.n	8004952 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e023      	b.n	800499a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <xTaskCheckForTimeOut+0xbc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d007      	beq.n	800496e <xTaskCheckForTimeOut+0x7e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e015      	b.n	800499a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	429a      	cmp	r2, r3
 8004976:	d20b      	bcs.n	8004990 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff9d 	bl	80048c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e004      	b.n	800499a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f000 fc85 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 800499e:	69fb      	ldr	r3, [r7, #28]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000019c 	.word	0x2000019c
 80049ac:	200001b0 	.word	0x200001b0

080049b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <vTaskMissedYield+0x14>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	200001ac 	.word	0x200001ac

080049c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049d0:	f000 f852 	bl	8004a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvIdleTask+0x28>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d9f9      	bls.n	80049d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <prvIdleTask+0x2c>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049ec:	e7f0      	b.n	80049d0 <prvIdleTask+0x8>
 80049ee:	bf00      	nop
 80049f0:	2000009c 	.word	0x2000009c
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	e00c      	b.n	8004a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <prvInitialiseTaskLists+0x60>)
 8004a10:	4413      	add	r3, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fa1d 	bl	8002e52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d9ef      	bls.n	8004a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a24:	480d      	ldr	r0, [pc, #52]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a26:	f7fe fa14 	bl	8002e52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2a:	480d      	ldr	r0, [pc, #52]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a2c:	f7fe fa11 	bl	8002e52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a30:	480c      	ldr	r0, [pc, #48]	; (8004a64 <prvInitialiseTaskLists+0x6c>)
 8004a32:	f7fe fa0e 	bl	8002e52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a36:	480c      	ldr	r0, [pc, #48]	; (8004a68 <prvInitialiseTaskLists+0x70>)
 8004a38:	f7fe fa0b 	bl	8002e52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a3c:	480b      	ldr	r0, [pc, #44]	; (8004a6c <prvInitialiseTaskLists+0x74>)
 8004a3e:	f7fe fa08 	bl	8002e52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <prvInitialiseTaskLists+0x78>)
 8004a44:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <prvInitialiseTaskLists+0x64>)
 8004a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <prvInitialiseTaskLists+0x7c>)
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <prvInitialiseTaskLists+0x68>)
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2000009c 	.word	0x2000009c
 8004a5c:	20000128 	.word	0x20000128
 8004a60:	2000013c 	.word	0x2000013c
 8004a64:	20000158 	.word	0x20000158
 8004a68:	2000016c 	.word	0x2000016c
 8004a6c:	20000184 	.word	0x20000184
 8004a70:	20000150 	.word	0x20000150
 8004a74:	20000154 	.word	0x20000154

08004a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7e:	e019      	b.n	8004ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a80:	f000 fbe4 	bl	800524c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <prvCheckTasksWaitingTermination+0x4c>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fa68 	bl	8002f66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <prvCheckTasksWaitingTermination+0x50>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <prvCheckTasksWaitingTermination+0x50>)
 8004a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aaa:	f000 fbfd 	bl	80052a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f80e 	bl	8004ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <prvCheckTasksWaitingTermination+0x54>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e1      	bne.n	8004a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000016c 	.word	0x2000016c
 8004ac8:	20000198 	.word	0x20000198
 8004acc:	20000180 	.word	0x20000180

08004ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d108      	bne.n	8004af4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fd8c 	bl	8005604 <vPortFree>
				vPortFree( pxTCB );
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fd89 	bl	8005604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004af2:	e017      	b.n	8004b24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d103      	bne.n	8004b06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd80 	bl	8005604 <vPortFree>
	}
 8004b04:	e00e      	b.n	8004b24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d009      	beq.n	8004b24 <prvDeleteTCB+0x54>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e7fe      	b.n	8004b22 <prvDeleteTCB+0x52>
	}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b32:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <prvResetNextTaskUnblockTime+0x44>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <prvResetNextTaskUnblockTime+0x14>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <prvResetNextTaskUnblockTime+0x16>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <prvResetNextTaskUnblockTime+0x48>)
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b4e:	e008      	b.n	8004b62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <prvResetNextTaskUnblockTime+0x44>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <prvResetNextTaskUnblockTime+0x48>)
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000150 	.word	0x20000150
 8004b74:	200001b8 	.word	0x200001b8

08004b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <xTaskGetSchedulerState+0x34>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b86:	2301      	movs	r3, #1
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	e008      	b.n	8004b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <xTaskGetSchedulerState+0x38>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b94:	2302      	movs	r3, #2
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e001      	b.n	8004b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b9e:	687b      	ldr	r3, [r7, #4]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200001a4 	.word	0x200001a4
 8004bb0:	200001c0 	.word	0x200001c0

08004bb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d06e      	beq.n	8004ca8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <xTaskPriorityInherit+0x100>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d25e      	bcs.n	8004c96 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	db06      	blt.n	8004bee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <xTaskPriorityInherit+0x100>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f1c3 0207 	rsb	r2, r3, #7
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <xTaskPriorityInherit+0x104>)
 8004c00:	4413      	add	r3, r2
 8004c02:	4299      	cmp	r1, r3
 8004c04:	d101      	bne.n	8004c0a <xTaskPriorityInherit+0x56>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <xTaskPriorityInherit+0x58>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03a      	beq.n	8004c86 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe f9a6 	bl	8002f66 <uxListRemove>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d115      	bne.n	8004c4c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4924      	ldr	r1, [pc, #144]	; (8004cb8 <xTaskPriorityInherit+0x104>)
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <xTaskPriorityInherit+0x98>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43da      	mvns	r2, r3
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <xTaskPriorityInherit+0x108>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4013      	ands	r3, r2
 8004c48:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <xTaskPriorityInherit+0x108>)
 8004c4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <xTaskPriorityInherit+0x100>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <xTaskPriorityInherit+0x108>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <xTaskPriorityInherit+0x108>)
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <xTaskPriorityInherit+0x104>)
 8004c76:	441a      	add	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7fe f914 	bl	8002eac <vListInsertEnd>
 8004c84:	e004      	b.n	8004c90 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <xTaskPriorityInherit+0x100>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e008      	b.n	8004ca8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <xTaskPriorityInherit+0x100>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d201      	bcs.n	8004ca8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
	}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000098 	.word	0x20000098
 8004cb8:	2000009c 	.word	0x2000009c
 8004cbc:	200001a0 	.word	0x200001a0

08004cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d06c      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <xTaskPriorityDisinherit+0xfc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d009      	beq.n	8004cf4 <xTaskPriorityDisinherit+0x34>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e7fe      	b.n	8004cf2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <xTaskPriorityDisinherit+0x50>
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	e7fe      	b.n	8004d0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d044      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d140      	bne.n	8004db0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe f917 	bl	8002f66 <uxListRemove>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d115      	bne.n	8004d6a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <xTaskPriorityDisinherit+0x100>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xTaskPriorityDisinherit+0xaa>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	2201      	movs	r2, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <xTaskPriorityDisinherit+0x104>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4013      	ands	r3, r2
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <xTaskPriorityDisinherit+0x104>)
 8004d68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f1c3 0207 	rsb	r2, r3, #7
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	409a      	lsls	r2, r3
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <xTaskPriorityDisinherit+0x104>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <xTaskPriorityDisinherit+0x104>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <xTaskPriorityDisinherit+0x100>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe f880 	bl	8002eac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000098 	.word	0x20000098
 8004dc0:	2000009c 	.word	0x2000009c
 8004dc4:	200001a0 	.word	0x200001a0

08004dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8086 	beq.w	8004eee <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e7fe      	b.n	8004dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d902      	bls.n	8004e0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e002      	b.n	8004e14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d067      	beq.n	8004eee <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d162      	bne.n	8004eee <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e28:	4b33      	ldr	r3, [pc, #204]	; (8004ef8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d109      	bne.n	8004e46 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	e7fe      	b.n	8004e44 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	db04      	blt.n	8004e64 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f1c3 0207 	rsb	r2, r3, #7
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6959      	ldr	r1, [r3, #20]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d101      	bne.n	8004e7e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d034      	beq.n	8004eee <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe f86c 	bl	8002f66 <uxListRemove>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d115      	bne.n	8004ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	4918      	ldr	r1, [pc, #96]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	4a10      	ldr	r2, [pc, #64]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ebe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fd ffdf 	bl	8002eac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eee:	bf00      	nop
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000098 	.word	0x20000098
 8004efc:	2000009c 	.word	0x2000009c
 8004f00:	200001a0 	.word	0x200001a0

08004f04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f16:	3201      	adds	r2, #1
 8004f18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
	}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000098 	.word	0x20000098

08004f2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f36:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f3c:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe f80f 	bl	8002f66 <uxListRemove>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f4e:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4013      	ands	r3, r2
 8004f62:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d10a      	bne.n	8004f84 <prvAddCurrentTaskToDelayedList+0x58>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f7e:	f7fd ff95 	bl	8002eac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f82:	e026      	b.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f8c:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d209      	bcs.n	8004fb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	f7fd ffa3 	bl	8002ef4 <vListInsert>
}
 8004fae:	e010      	b.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f7fd ff99 	bl	8002ef4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d202      	bcs.n	8004fd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fcc:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	2000019c 	.word	0x2000019c
 8004fe0:	20000098 	.word	0x20000098
 8004fe4:	200001a0 	.word	0x200001a0
 8004fe8:	20000184 	.word	0x20000184
 8004fec:	20000154 	.word	0x20000154
 8004ff0:	20000150 	.word	0x20000150
 8004ff4:	200001b8 	.word	0x200001b8

08004ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b04      	subs	r3, #4
 8005008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b04      	subs	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3b04      	subs	r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005028:	4a0c      	ldr	r2, [pc, #48]	; (800505c <pxPortInitialiseStack+0x64>)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b14      	subs	r3, #20
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b04      	subs	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f06f 0202 	mvn.w	r2, #2
 8005046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b20      	subs	r3, #32
 800504c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	08005061 	.word	0x08005061

08005060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <prvTaskExitError+0x50>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d009      	beq.n	8005088 <prvTaskExitError+0x28>
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e7fe      	b.n	8005086 <prvTaskExitError+0x26>
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800509a:	bf00      	nop
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0fc      	beq.n	800509c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000004 	.word	0x20000004
	...

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b44      	ldr	r3, [pc, #272]	; (8005228 <xPortStartScheduler+0x118>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a44      	ldr	r2, [pc, #272]	; (800522c <xPortStartScheduler+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d109      	bne.n	8005134 <xPortStartScheduler+0x24>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e7fe      	b.n	8005132 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005134:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <xPortStartScheduler+0x118>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3d      	ldr	r2, [pc, #244]	; (8005230 <xPortStartScheduler+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d109      	bne.n	8005152 <xPortStartScheduler+0x42>
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e7fe      	b.n	8005150 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <xPortStartScheduler+0x124>)
 8005154:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b30      	ldr	r3, [pc, #192]	; (8005238 <xPortStartScheduler+0x128>)
 8005178:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517a:	4b30      	ldr	r3, [pc, #192]	; (800523c <xPortStartScheduler+0x12c>)
 800517c:	2207      	movs	r2, #7
 800517e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005180:	e009      	b.n	8005196 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <xPortStartScheduler+0x12c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3b01      	subs	r3, #1
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <xPortStartScheduler+0x12c>)
 800518a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d0ef      	beq.n	8005182 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <xPortStartScheduler+0x12c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1c3 0307 	rsb	r3, r3, #7
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d009      	beq.n	80051c2 <xPortStartScheduler+0xb2>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	e7fe      	b.n	80051c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <xPortStartScheduler+0x12c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <xPortStartScheduler+0x12c>)
 80051ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <xPortStartScheduler+0x12c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <xPortStartScheduler+0x12c>)
 80051d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <xPortStartScheduler+0x130>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <xPortStartScheduler+0x130>)
 80051e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <xPortStartScheduler+0x130>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <xPortStartScheduler+0x130>)
 80051f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f8:	f000 f8d6 	bl	80053a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <xPortStartScheduler+0x134>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005202:	f000 f8f5 	bl	80053f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <xPortStartScheduler+0x138>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <xPortStartScheduler+0x138>)
 800520c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005210:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005212:	f7ff ff69 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005216:	f7ff fa75 	bl	8004704 <vTaskSwitchContext>
	prvTaskExitError();
 800521a:	f7ff ff21 	bl	8005060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	410fc271 	.word	0x410fc271
 8005230:	410fc270 	.word	0x410fc270
 8005234:	e000e400 	.word	0xe000e400
 8005238:	200001c4 	.word	0x200001c4
 800523c:	200001c8 	.word	0x200001c8
 8005240:	e000ed20 	.word	0xe000ed20
 8005244:	20000004 	.word	0x20000004
 8005248:	e000ef34 	.word	0xe000ef34

0800524c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <vPortEnterCritical+0x54>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <vPortEnterCritical+0x54>)
 800526c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <vPortEnterCritical+0x54>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vPortEnterCritical+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <vPortEnterCritical+0x48>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	e7fe      	b.n	8005292 <vPortEnterCritical+0x46>
	}
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	20000004 	.word	0x20000004
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <vPortExitCritical+0x4c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <vPortExitCritical+0x22>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e7fe      	b.n	80052c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vPortExitCritical+0x4c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <vPortExitCritical+0x4c>)
 80052d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <vPortExitCritical+0x4c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <vPortExitCritical+0x3e>
 80052dc:	2300      	movs	r3, #0
 80052de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000004 	.word	0x20000004
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <pxCurrentTCBConst>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f01e 0f10 	tst.w	lr, #16
 8005310:	bf08      	it	eq
 8005312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	6010      	str	r0, [r2, #0]
 800531c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005324:	f380 8811 	msr	BASEPRI, r0
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f7ff f9e8 	bl	8004704 <vTaskSwitchContext>
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f380 8811 	msr	BASEPRI, r0
 800533c:	bc09      	pop	{r0, r3}
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	6808      	ldr	r0, [r1, #0]
 8005342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	f01e 0f10 	tst.w	lr, #16
 800534a:	bf08      	it	eq
 800534c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005350:	f380 8809 	msr	PSP, r0
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst>:
 8005360:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005380:	f7ff f904 	bl	800458c <xTaskIncrementTick>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <SysTick_Handler+0x3c>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <vPortSetupTimerInterrupt+0x34>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortSetupTimerInterrupt+0x38>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <vPortSetupTimerInterrupt+0x3c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <vPortSetupTimerInterrupt+0x40>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	4a09      	ldr	r2, [pc, #36]	; (80053ec <vPortSetupTimerInterrupt+0x44>)
 80053c6:	3b01      	subs	r3, #1
 80053c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ca:	4b04      	ldr	r3, [pc, #16]	; (80053dc <vPortSetupTimerInterrupt+0x34>)
 80053cc:	2207      	movs	r2, #7
 80053ce:	601a      	str	r2, [r3, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e010 	.word	0xe000e010
 80053e0:	e000e018 	.word	0xe000e018
 80053e4:	20000014 	.word	0x20000014
 80053e8:	10624dd3 	.word	0x10624dd3
 80053ec:	e000e014 	.word	0xe000e014

080053f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005400 <vPortEnableVFP+0x10>
 80053f4:	6801      	ldr	r1, [r0, #0]
 80053f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053fa:	6001      	str	r1, [r0, #0]
 80053fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053fe:	bf00      	nop
 8005400:	e000ed88 	.word	0xe000ed88

08005404 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800540a:	f3ef 8305 	mrs	r3, IPSR
 800540e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d913      	bls.n	800543e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005416:	4a16      	ldr	r2, [pc, #88]	; (8005470 <vPortValidateInterruptPriority+0x6c>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <vPortValidateInterruptPriority+0x70>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	7afa      	ldrb	r2, [r7, #11]
 8005426:	429a      	cmp	r2, r3
 8005428:	d209      	bcs.n	800543e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e7fe      	b.n	800543c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <vPortValidateInterruptPriority+0x74>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <vPortValidateInterruptPriority+0x78>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d909      	bls.n	8005462 <vPortValidateInterruptPriority+0x5e>
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	e7fe      	b.n	8005460 <vPortValidateInterruptPriority+0x5c>
	}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e3f0 	.word	0xe000e3f0
 8005474:	200001c4 	.word	0x200001c4
 8005478:	e000ed0c 	.word	0xe000ed0c
 800547c:	200001c8 	.word	0x200001c8

08005480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800548c:	f7fe ffb2 	bl	80043f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005490:	4b57      	ldr	r3, [pc, #348]	; (80055f0 <pvPortMalloc+0x170>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005498:	f000 f90c 	bl	80056b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800549c:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <pvPortMalloc+0x174>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 808c 	bne.w	80055c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80054b0:	2208      	movs	r2, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d013      	beq.n	80054ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	3308      	adds	r3, #8
 80054ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <pvPortMalloc+0x6a>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e7fe      	b.n	80054e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d068      	beq.n	80055c2 <pvPortMalloc+0x142>
 80054f0:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <pvPortMalloc+0x178>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d863      	bhi.n	80055c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054fa:	4b40      	ldr	r3, [pc, #256]	; (80055fc <pvPortMalloc+0x17c>)
 80054fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054fe:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <pvPortMalloc+0x17c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005504:	e004      	b.n	8005510 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <pvPortMalloc+0xa2>
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f1      	bne.n	8005506 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005522:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <pvPortMalloc+0x170>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	429a      	cmp	r2, r3
 800552a:	d04a      	beq.n	80055c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	4413      	add	r3, r2
 8005534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	1ad2      	subs	r2, r2, r3
 8005546:	2308      	movs	r3, #8
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	429a      	cmp	r2, r3
 800554c:	d91e      	bls.n	800558c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <pvPortMalloc+0xf4>
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e7fe      	b.n	8005572 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005586:	69b8      	ldr	r0, [r7, #24]
 8005588:	f000 f8f6 	bl	8005778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <pvPortMalloc+0x178>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <pvPortMalloc+0x178>)
 8005598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <pvPortMalloc+0x178>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <pvPortMalloc+0x180>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d203      	bcs.n	80055ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <pvPortMalloc+0x178>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <pvPortMalloc+0x180>)
 80055ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <pvPortMalloc+0x174>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055c2:	f7fe ff25 	bl	8004410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <pvPortMalloc+0x164>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e7fe      	b.n	80055e2 <pvPortMalloc+0x162>
	return pvReturn;
 80055e4:	69fb      	ldr	r3, [r7, #28]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000c524 	.word	0x2000c524
 80055f4:	2000c530 	.word	0x2000c530
 80055f8:	2000c528 	.word	0x2000c528
 80055fc:	2000c51c 	.word	0x2000c51c
 8005600:	2000c52c 	.word	0x2000c52c

08005604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d046      	beq.n	80056a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005616:	2308      	movs	r3, #8
 8005618:	425b      	negs	r3, r3
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4413      	add	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b20      	ldr	r3, [pc, #128]	; (80056ac <vPortFree+0xa8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <vPortFree+0x42>
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e7fe      	b.n	8005644 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <vPortFree+0x5e>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	e7fe      	b.n	8005660 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <vPortFree+0xa8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <vPortFree+0xa8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005688:	f7fe feb4 	bl	80043f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <vPortFree+0xac>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4413      	add	r3, r2
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <vPortFree+0xac>)
 8005698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800569a:	6938      	ldr	r0, [r7, #16]
 800569c:	f000 f86c 	bl	8005778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056a0:	f7fe feb6 	bl	8004410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056a4:	bf00      	nop
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	2000c530 	.word	0x2000c530
 80056b0:	2000c528 	.word	0x2000c528

080056b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80056be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <prvHeapInit+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <prvHeapInit+0xac>)
 80056e4:	4413      	add	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <prvHeapInit+0xb0>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <prvHeapInit+0xb0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005700:	2208      	movs	r2, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <prvHeapInit+0xb4>)
 8005714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <prvHeapInit+0xb4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <prvHeapInit+0xb4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvHeapInit+0xb4>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <prvHeapInit+0xb8>)
 8005742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <prvHeapInit+0xbc>)
 800574a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvHeapInit+0xc0>)
 800574e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	200001cc 	.word	0x200001cc
 8005764:	2000c51c 	.word	0x2000c51c
 8005768:	2000c524 	.word	0x2000c524
 800576c:	2000c52c 	.word	0x2000c52c
 8005770:	2000c528 	.word	0x2000c528
 8005774:	2000c530 	.word	0x2000c530

08005778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <prvInsertBlockIntoFreeList+0xac>)
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <prvInsertBlockIntoFreeList+0x14>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d8f7      	bhi.n	8005786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d108      	bne.n	80057ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d118      	bne.n	8005800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00d      	beq.n	80057f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e008      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e003      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d002      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	2000c51c 	.word	0x2000c51c
 8005828:	2000c524 	.word	0x2000c524

0800582c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	461a      	mov	r2, r3
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f003 facd 	bl	8008de0 <tcpip_send_msg_wait_sem>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800584a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <netconn_apimsg+0x2e>
    return apimsg->err;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005858:	e001      	b.n	800585e <netconn_apimsg+0x32>
  }
  return err;
 800585a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	603a      	str	r2, [r7, #0]
 8005872:	71fb      	strb	r3, [r7, #7]
 8005874:	460b      	mov	r3, r1
 8005876:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f001 f819 	bl	80068b4 <netconn_alloc>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d054      	beq.n	8005934 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800588a:	79bb      	ldrb	r3, [r7, #6]
 800588c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005892:	f107 030c 	add.w	r3, r7, #12
 8005896:	4619      	mov	r1, r3
 8005898:	4829      	ldr	r0, [pc, #164]	; (8005940 <netconn_new_with_proto_and_callback+0xd8>)
 800589a:	f7ff ffc7 	bl	800582c <netconn_apimsg>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 80058a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d043      	beq.n	8005934 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <netconn_new_with_proto_and_callback+0x58>
 80058b4:	4b23      	ldr	r3, [pc, #140]	; (8005944 <netconn_new_with_proto_and_callback+0xdc>)
 80058b6:	2289      	movs	r2, #137	; 0x89
 80058b8:	4923      	ldr	r1, [pc, #140]	; (8005948 <netconn_new_with_proto_and_callback+0xe0>)
 80058ba:	4824      	ldr	r0, [pc, #144]	; (800594c <netconn_new_with_proto_and_callback+0xe4>)
 80058bc:	f00e fae6 	bl	8013e8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	3310      	adds	r3, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	f00d f909 	bl	8012adc <sys_mbox_valid>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <netconn_new_with_proto_and_callback+0x74>
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <netconn_new_with_proto_and_callback+0xdc>)
 80058d2:	228a      	movs	r2, #138	; 0x8a
 80058d4:	491e      	ldr	r1, [pc, #120]	; (8005950 <netconn_new_with_proto_and_callback+0xe8>)
 80058d6:	481d      	ldr	r0, [pc, #116]	; (800594c <netconn_new_with_proto_and_callback+0xe4>)
 80058d8:	f00e fad8 	bl	8013e8c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	3314      	adds	r3, #20
 80058e0:	4618      	mov	r0, r3
 80058e2:	f00d f8fb 	bl	8012adc <sys_mbox_valid>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <netconn_new_with_proto_and_callback+0x90>
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <netconn_new_with_proto_and_callback+0xdc>)
 80058ee:	228c      	movs	r2, #140	; 0x8c
 80058f0:	4918      	ldr	r1, [pc, #96]	; (8005954 <netconn_new_with_proto_and_callback+0xec>)
 80058f2:	4816      	ldr	r0, [pc, #88]	; (800594c <netconn_new_with_proto_and_callback+0xe4>)
 80058f4:	f00e faca 	bl	8013e8c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	330c      	adds	r3, #12
 80058fc:	4618      	mov	r0, r3
 80058fe:	f00d f97e 	bl	8012bfe <sys_sem_valid>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <netconn_new_with_proto_and_callback+0xac>
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <netconn_new_with_proto_and_callback+0xdc>)
 800590a:	228f      	movs	r2, #143	; 0x8f
 800590c:	4912      	ldr	r1, [pc, #72]	; (8005958 <netconn_new_with_proto_and_callback+0xf0>)
 800590e:	480f      	ldr	r0, [pc, #60]	; (800594c <netconn_new_with_proto_and_callback+0xe4>)
 8005910:	f00e fabc 	bl	8013e8c <iprintf>
      sys_sem_free(&conn->op_completed);
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	330c      	adds	r3, #12
 8005918:	4618      	mov	r0, r3
 800591a:	f00d f963 	bl	8012be4 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3310      	adds	r3, #16
 8005922:	4618      	mov	r0, r3
 8005924:	f00d f83e 	bl	80129a4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592a:	2007      	movs	r0, #7
 800592c:	f003 fef8 	bl	8009720 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005936:	4618      	mov	r0, r3
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	0800685d 	.word	0x0800685d
 8005944:	08014c74 	.word	0x08014c74
 8005948:	08014ca8 	.word	0x08014ca8
 800594c:	08014ccc 	.word	0x08014ccc
 8005950:	08014cf4 	.word	0x08014cf4
 8005954:	08014d0c 	.word	0x08014d0c
 8005958:	08014d30 	.word	0x08014d30

0800595c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <netconn_delete+0x12>
    return ERR_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e016      	b.n	800599c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005972:	2329      	movs	r3, #41	; 0x29
 8005974:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005976:	f107 0308 	add.w	r3, r7, #8
 800597a:	4619      	mov	r1, r3
 800597c:	4809      	ldr	r0, [pc, #36]	; (80059a4 <netconn_delete+0x48>)
 800597e:	f7ff ff55 	bl	800582c <netconn_apimsg>
 8005982:	4603      	mov	r3, r0
 8005984:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8005986:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <netconn_delete+0x38>
    return err;
 800598e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005992:	e003      	b.n	800599c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fffd 	bl	8006994 <netconn_free>

  return ERR_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	08006e19 	.word	0x08006e19

080059a8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <netconn_getaddr+0x26>
 80059bc:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <netconn_getaddr+0x88>)
 80059be:	22d9      	movs	r2, #217	; 0xd9
 80059c0:	491c      	ldr	r1, [pc, #112]	; (8005a34 <netconn_getaddr+0x8c>)
 80059c2:	481d      	ldr	r0, [pc, #116]	; (8005a38 <netconn_getaddr+0x90>)
 80059c4:	f00e fa62 	bl	8013e8c <iprintf>
 80059c8:	f06f 030f 	mvn.w	r3, #15
 80059cc:	e02b      	b.n	8005a26 <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <netconn_getaddr+0x3e>
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <netconn_getaddr+0x88>)
 80059d6:	22da      	movs	r2, #218	; 0xda
 80059d8:	4918      	ldr	r1, [pc, #96]	; (8005a3c <netconn_getaddr+0x94>)
 80059da:	4817      	ldr	r0, [pc, #92]	; (8005a38 <netconn_getaddr+0x90>)
 80059dc:	f00e fa56 	bl	8013e8c <iprintf>
 80059e0:	f06f 030f 	mvn.w	r3, #15
 80059e4:	e01f      	b.n	8005a26 <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <netconn_getaddr+0x56>
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <netconn_getaddr+0x88>)
 80059ee:	22db      	movs	r2, #219	; 0xdb
 80059f0:	4913      	ldr	r1, [pc, #76]	; (8005a40 <netconn_getaddr+0x98>)
 80059f2:	4811      	ldr	r0, [pc, #68]	; (8005a38 <netconn_getaddr+0x90>)
 80059f4:	f00e fa4a 	bl	8013e8c <iprintf>
 80059f8:	f06f 030f 	mvn.w	r3, #15
 80059fc:	e013      	b.n	8005a26 <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f887 3020 	strb.w	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61bb      	str	r3, [r7, #24]
  msg.msg.ad.port = port;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	61fb      	str	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8005a10:	f107 0310 	add.w	r3, r7, #16
 8005a14:	4619      	mov	r1, r3
 8005a16:	480b      	ldr	r0, [pc, #44]	; (8005a44 <netconn_getaddr+0x9c>)
 8005a18:	f7ff ff08 	bl	800582c <netconn_apimsg>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8005a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	08014c74 	.word	0x08014c74
 8005a34:	08014d4c 	.word	0x08014d4c
 8005a38:	08014ccc 	.word	0x08014ccc
 8005a3c:	08014d6c 	.word	0x08014d6c
 8005a40:	08014d8c 	.word	0x08014d8c
 8005a44:	08007871 	.word	0x08007871

08005a48 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d108      	bne.n	8005a6e <netconn_bind+0x26>
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <netconn_bind+0x5c>)
 8005a5e:	22ff      	movs	r2, #255	; 0xff
 8005a60:	4911      	ldr	r1, [pc, #68]	; (8005aa8 <netconn_bind+0x60>)
 8005a62:	4812      	ldr	r0, [pc, #72]	; (8005aac <netconn_bind+0x64>)
 8005a64:	f00e fa12 	bl	8013e8c <iprintf>
 8005a68:	f06f 030f 	mvn.w	r3, #15
 8005a6c:	e015      	b.n	8005a9a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <netconn_bind+0x68>)
 8005a76:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005a84:	f107 0310 	add.w	r3, r7, #16
 8005a88:	4619      	mov	r1, r3
 8005a8a:	480a      	ldr	r0, [pc, #40]	; (8005ab4 <netconn_bind+0x6c>)
 8005a8c:	f7ff fece 	bl	800582c <netconn_apimsg>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8005a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3728      	adds	r7, #40	; 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	08014c74 	.word	0x08014c74
 8005aa8:	08014dac 	.word	0x08014dac
 8005aac:	08014ccc 	.word	0x08014ccc
 8005ab0:	0801778c 	.word	0x0801778c
 8005ab4:	0800701d 	.word	0x0800701d

08005ab8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <netconn_listen_with_backlog+0x26>
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <netconn_listen_with_backlog+0x48>)
 8005acc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005ad0:	490c      	ldr	r1, [pc, #48]	; (8005b04 <netconn_listen_with_backlog+0x4c>)
 8005ad2:	480d      	ldr	r0, [pc, #52]	; (8005b08 <netconn_listen_with_backlog+0x50>)
 8005ad4:	f00e f9da 	bl	8013e8c <iprintf>
 8005ad8:	f06f 030f 	mvn.w	r3, #15
 8005adc:	e00b      	b.n	8005af6 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4808      	ldr	r0, [pc, #32]	; (8005b0c <netconn_listen_with_backlog+0x54>)
 8005aea:	f7ff fe9f 	bl	800582c <netconn_apimsg>
 8005aee:	4603      	mov	r3, r0
 8005af0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8005af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	08014c74 	.word	0x08014c74
 8005b04:	08014e0c 	.word	0x08014e0c
 8005b08:	08014ccc 	.word	0x08014ccc
 8005b0c:	080070dd 	.word	0x080070dd

08005b10 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <netconn_accept+0x24>
 8005b20:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <netconn_accept+0xe4>)
 8005b22:	f240 128d 	movw	r2, #397	; 0x18d
 8005b26:	4934      	ldr	r1, [pc, #208]	; (8005bf8 <netconn_accept+0xe8>)
 8005b28:	4834      	ldr	r0, [pc, #208]	; (8005bfc <netconn_accept+0xec>)
 8005b2a:	f00e f9af 	bl	8013e8c <iprintf>
 8005b2e:	f06f 030f 	mvn.w	r3, #15
 8005b32:	e05b      	b.n	8005bec <netconn_accept+0xdc>
  *new_conn = NULL;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <netconn_accept+0x44>
 8005b40:	4b2c      	ldr	r3, [pc, #176]	; (8005bf4 <netconn_accept+0xe4>)
 8005b42:	f240 128f 	movw	r2, #399	; 0x18f
 8005b46:	492e      	ldr	r1, [pc, #184]	; (8005c00 <netconn_accept+0xf0>)
 8005b48:	482c      	ldr	r0, [pc, #176]	; (8005bfc <netconn_accept+0xec>)
 8005b4a:	f00e f99f 	bl	8013e8c <iprintf>
 8005b4e:	f06f 030f 	mvn.w	r3, #15
 8005b52:	e04b      	b.n	8005bec <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b5a:	f113 0f0c 	cmn.w	r3, #12
 8005b5e:	da03      	bge.n	8005b68 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b66:	e041      	b.n	8005bec <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f00c ffb5 	bl	8012adc <sys_mbox_valid>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <netconn_accept+0x6e>
    return ERR_CLSD;
 8005b78:	f06f 030e 	mvn.w	r3, #14
 8005b7c:	e036      	b.n	8005bec <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3314      	adds	r3, #20
 8005b82:	f107 010c 	add.w	r1, r7, #12
 8005b86:	2200      	movs	r2, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f00c ff4c 	bl	8012a26 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <netconn_accept+0x96>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <netconn_accept+0xf4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d102      	bne.n	8005bb4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8005bae:	f06f 030c 	mvn.w	r3, #12
 8005bb2:	e01b      	b.n	8005bec <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d114      	bne.n	8005be4 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00e      	beq.n	8005bde <netconn_accept+0xce>
 8005bc0:	f00d f8a8 	bl	8012d14 <sys_arch_protect>
 8005bc4:	6138      	str	r0, [r7, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bcc:	f113 0f0c 	cmn.w	r3, #12
 8005bd0:	db02      	blt.n	8005bd8 <netconn_accept+0xc8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	22f1      	movs	r2, #241	; 0xf1
 8005bd6:	721a      	strb	r2, [r3, #8]
 8005bd8:	6938      	ldr	r0, [r7, #16]
 8005bda:	f00d f8a9 	bl	8012d30 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8005bde:	f06f 030e 	mvn.w	r3, #14
 8005be2:	e003      	b.n	8005bec <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8005bea:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	08014c74 	.word	0x08014c74
 8005bf8:	08014e2c 	.word	0x08014e2c
 8005bfc:	08014ccc 	.word	0x08014ccc
 8005c00:	08014e4c 	.word	0x08014e4c
 8005c04:	2000ce34 	.word	0x2000ce34

08005c08 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <netconn_recv_data+0x28>
 8005c1c:	4b5c      	ldr	r3, [pc, #368]	; (8005d90 <netconn_recv_data+0x188>)
 8005c1e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8005c22:	495c      	ldr	r1, [pc, #368]	; (8005d94 <netconn_recv_data+0x18c>)
 8005c24:	485c      	ldr	r0, [pc, #368]	; (8005d98 <netconn_recv_data+0x190>)
 8005c26:	f00e f931 	bl	8013e8c <iprintf>
 8005c2a:	f06f 030f 	mvn.w	r3, #15
 8005c2e:	e0aa      	b.n	8005d86 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <netconn_recv_data+0x48>
 8005c3c:	4b54      	ldr	r3, [pc, #336]	; (8005d90 <netconn_recv_data+0x188>)
 8005c3e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8005c42:	4956      	ldr	r1, [pc, #344]	; (8005d9c <netconn_recv_data+0x194>)
 8005c44:	4854      	ldr	r0, [pc, #336]	; (8005d98 <netconn_recv_data+0x190>)
 8005c46:	f00e f921 	bl	8013e8c <iprintf>
 8005c4a:	f06f 030f 	mvn.w	r3, #15
 8005c4e:	e09a      	b.n	8005d86 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d115      	bne.n	8005c88 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3310      	adds	r3, #16
 8005c60:	4618      	mov	r0, r3
 8005c62:	f00c ff3b 	bl	8012adc <sys_mbox_valid>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10d      	bne.n	8005c88 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	4618      	mov	r0, r3
 8005c72:	f00c ff33 	bl	8012adc <sys_mbox_valid>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <netconn_recv_data+0x7a>
 8005c7c:	f06f 030a 	mvn.w	r3, #10
 8005c80:	e081      	b.n	8005d86 <netconn_recv_data+0x17e>
 8005c82:	f06f 030e 	mvn.w	r3, #14
 8005c86:	e07e      	b.n	8005d86 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3310      	adds	r3, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f00c ff25 	bl	8012adc <sys_mbox_valid>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <netconn_recv_data+0xa4>
 8005c98:	4b3d      	ldr	r3, [pc, #244]	; (8005d90 <netconn_recv_data+0x188>)
 8005c9a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005c9e:	4940      	ldr	r1, [pc, #256]	; (8005da0 <netconn_recv_data+0x198>)
 8005ca0:	483d      	ldr	r0, [pc, #244]	; (8005d98 <netconn_recv_data+0x190>)
 8005ca2:	f00e f8f3 	bl	8013e8c <iprintf>
 8005ca6:	f06f 030a 	mvn.w	r3, #10
 8005caa:	e06c      	b.n	8005d86 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005cb2:	f113 0f0c 	cmn.w	r3, #12
 8005cb6:	da03      	bge.n	8005cc0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005cbe:	e062      	b.n	8005d86 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	f107 0120 	add.w	r1, r7, #32
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f00c feab 	bl	8012a26 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d138      	bne.n	8005d4e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	891b      	ldrh	r3, [r3, #8]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e001      	b.n	8005cf2 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	482a      	ldr	r0, [pc, #168]	; (8005da4 <netconn_recv_data+0x19c>)
 8005cfa:	f7ff fd97 	bl	800582c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d120      	bne.n	8005d46 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <netconn_recv_data+0x110>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	2200      	movs	r2, #0
 8005d12:	2101      	movs	r1, #1
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <netconn_recv_data+0x12a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d30:	e029      	b.n	8005d86 <netconn_recv_data+0x17e>
 8005d32:	f06f 030d 	mvn.w	r3, #13
 8005d36:	e026      	b.n	8005d86 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f97a 	bl	8006034 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8005d40:	f06f 030e 	mvn.w	r3, #14
 8005d44:	e01f      	b.n	8005d86 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	891b      	ldrh	r3, [r3, #8]
 8005d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005d4c:	e00d      	b.n	8005d6a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <netconn_recv_data+0x15a>
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <netconn_recv_data+0x188>)
 8005d56:	f240 223e 	movw	r2, #574	; 0x23e
 8005d5a:	4913      	ldr	r1, [pc, #76]	; (8005da8 <netconn_recv_data+0x1a0>)
 8005d5c:	480e      	ldr	r0, [pc, #56]	; (8005d98 <netconn_recv_data+0x190>)
 8005d5e:	f00e f895 	bl	8013e8c <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	891b      	ldrh	r3, [r3, #8]
 8005d68:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <netconn_recv_data+0x176>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	08014c74 	.word	0x08014c74
 8005d94:	08014e6c 	.word	0x08014e6c
 8005d98:	08014ccc 	.word	0x08014ccc
 8005d9c:	08014e8c 	.word	0x08014e8c
 8005da0:	08014ea8 	.word	0x08014ea8
 8005da4:	08007331 	.word	0x08007331
 8005da8:	08014ec8 	.word	0x08014ec8

08005dac <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <netconn_recv_tcp_pbuf+0x1c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d009      	beq.n	8005ddc <netconn_recv_tcp_pbuf+0x30>
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <netconn_recv_tcp_pbuf+0x44>)
 8005dca:	f240 225e 	movw	r2, #606	; 0x25e
 8005dce:	4909      	ldr	r1, [pc, #36]	; (8005df4 <netconn_recv_tcp_pbuf+0x48>)
 8005dd0:	4809      	ldr	r0, [pc, #36]	; (8005df8 <netconn_recv_tcp_pbuf+0x4c>)
 8005dd2:	f00e f85b 	bl	8013e8c <iprintf>
 8005dd6:	f06f 030f 	mvn.w	r3, #15
 8005dda:	e004      	b.n	8005de6 <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff12 	bl	8005c08 <netconn_recv_data>
 8005de4:	4603      	mov	r3, r0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	08014c74 	.word	0x08014c74
 8005df4:	08014e8c 	.word	0x08014e8c
 8005df8:	08014ccc 	.word	0x08014ccc

08005dfc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <netconn_recv+0x28>
 8005e10:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <netconn_recv+0xdc>)
 8005e12:	f44f 721d 	mov.w	r2, #628	; 0x274
 8005e16:	4931      	ldr	r1, [pc, #196]	; (8005edc <netconn_recv+0xe0>)
 8005e18:	4831      	ldr	r0, [pc, #196]	; (8005ee0 <netconn_recv+0xe4>)
 8005e1a:	f00e f837 	bl	8013e8c <iprintf>
 8005e1e:	f06f 030f 	mvn.w	r3, #15
 8005e22:	e054      	b.n	8005ece <netconn_recv+0xd2>
  *new_buf = NULL;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <netconn_recv+0x48>
 8005e30:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <netconn_recv+0xdc>)
 8005e32:	f240 2276 	movw	r2, #630	; 0x276
 8005e36:	492b      	ldr	r1, [pc, #172]	; (8005ee4 <netconn_recv+0xe8>)
 8005e38:	4829      	ldr	r0, [pc, #164]	; (8005ee0 <netconn_recv+0xe4>)
 8005e3a:	f00e f827 	bl	8013e8c <iprintf>
 8005e3e:	f06f 030f 	mvn.w	r3, #15
 8005e42:	e044      	b.n	8005ece <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d139      	bne.n	8005ec4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005e54:	2006      	movs	r0, #6
 8005e56:	f003 fc11 	bl	800967c <memp_malloc>
 8005e5a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <netconn_recv+0x6c>
      return ERR_MEM;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e032      	b.n	8005ece <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff feca 	bl	8005c08 <netconn_recv_data>
 8005e74:	4603      	mov	r3, r0
 8005e76:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8005e78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d006      	beq.n	8005e8e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8005e80:	6979      	ldr	r1, [r7, #20]
 8005e82:	2006      	movs	r0, #6
 8005e84:	f003 fc4c 	bl	8009720 <memp_free>
      return err;
 8005e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005e8c:	e01f      	b.n	8005ece <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <netconn_recv+0xa6>
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <netconn_recv+0xdc>)
 8005e96:	f240 228a 	movw	r2, #650	; 0x28a
 8005e9a:	4913      	ldr	r1, [pc, #76]	; (8005ee8 <netconn_recv+0xec>)
 8005e9c:	4810      	ldr	r0, [pc, #64]	; (8005ee0 <netconn_recv+0xe4>)
 8005e9e:	f00d fff5 	bl	8013e8c <iprintf>

    buf->p = p;
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e004      	b.n	8005ece <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fe9e 	bl	8005c08 <netconn_recv_data>
 8005ecc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08014c74 	.word	0x08014c74
 8005edc:	08014e6c 	.word	0x08014e6c
 8005ee0:	08014ccc 	.word	0x08014ccc
 8005ee4:	08014e8c 	.word	0x08014e8c
 8005ee8:	08014ed4 	.word	0x08014ed4

08005eec <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <netconn_send+0x24>
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <netconn_send+0x48>)
 8005efe:	f240 22c3 	movw	r2, #707	; 0x2c3
 8005f02:	490d      	ldr	r1, [pc, #52]	; (8005f38 <netconn_send+0x4c>)
 8005f04:	480d      	ldr	r0, [pc, #52]	; (8005f3c <netconn_send+0x50>)
 8005f06:	f00d ffc1 	bl	8013e8c <iprintf>
 8005f0a:	f06f 030f 	mvn.w	r3, #15
 8005f0e:	e00d      	b.n	8005f2c <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8005f18:	f107 0308 	add.w	r3, r7, #8
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4808      	ldr	r0, [pc, #32]	; (8005f40 <netconn_send+0x54>)
 8005f20:	f7ff fc84 	bl	800582c <netconn_apimsg>
 8005f24:	4603      	mov	r3, r0
 8005f26:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8005f28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08014c74 	.word	0x08014c74
 8005f38:	08014ee0 	.word	0x08014ee0
 8005f3c:	08014ccc 	.word	0x08014ccc
 8005f40:	08007261 	.word	0x08007261

08005f44 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <netconn_write_partly+0x28>
 8005f58:	4b31      	ldr	r3, [pc, #196]	; (8006020 <netconn_write_partly+0xdc>)
 8005f5a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005f5e:	4931      	ldr	r1, [pc, #196]	; (8006024 <netconn_write_partly+0xe0>)
 8005f60:	4831      	ldr	r0, [pc, #196]	; (8006028 <netconn_write_partly+0xe4>)
 8005f62:	f00d ff93 	bl	8013e8c <iprintf>
 8005f66:	f06f 030f 	mvn.w	r3, #15
 8005f6a:	e054      	b.n	8006016 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d009      	beq.n	8005f8c <netconn_write_partly+0x48>
 8005f78:	4b29      	ldr	r3, [pc, #164]	; (8006020 <netconn_write_partly+0xdc>)
 8005f7a:	f240 22e7 	movw	r2, #743	; 0x2e7
 8005f7e:	492b      	ldr	r1, [pc, #172]	; (800602c <netconn_write_partly+0xe8>)
 8005f80:	4829      	ldr	r0, [pc, #164]	; (8006028 <netconn_write_partly+0xe4>)
 8005f82:	f00d ff83 	bl	8013e8c <iprintf>
 8005f86:	f06f 0305 	mvn.w	r3, #5
 8005f8a:	e044      	b.n	8006016 <netconn_write_partly+0xd2>
  if (size == 0) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <netconn_write_partly+0x52>
    return ERR_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e03f      	b.n	8006016 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	7f1b      	ldrb	r3, [r3, #28]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <netconn_write_partly+0x68>
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <netconn_write_partly+0x6c>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <netconn_write_partly+0x6e>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8005fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <netconn_write_partly+0x86>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8005fc4:	f06f 0305 	mvn.w	r3, #5
 8005fc8:	e025      	b.n	8006016 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4813      	ldr	r0, [pc, #76]	; (8006030 <netconn_write_partly+0xec>)
 8005fe4:	f7ff fc22 	bl	800582c <netconn_apimsg>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8005fee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <netconn_write_partly+0xce>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <netconn_write_partly+0xce>
    if (dontblock) {
 8005ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e002      	b.n	8006012 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8006012:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8006016:	4618      	mov	r0, r3
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	08014c74 	.word	0x08014c74
 8006024:	08014efc 	.word	0x08014efc
 8006028:	08014ccc 	.word	0x08014ccc
 800602c:	08014f18 	.word	0x08014f18
 8006030:	08007711 	.word	0x08007711

08006034 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <netconn_close_shutdown+0x26>
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <netconn_close_shutdown+0x50>)
 8006048:	f44f 724a 	mov.w	r2, #808	; 0x328
 800604c:	490e      	ldr	r1, [pc, #56]	; (8006088 <netconn_close_shutdown+0x54>)
 800604e:	480f      	ldr	r0, [pc, #60]	; (800608c <netconn_close_shutdown+0x58>)
 8006050:	f00d ff1c 	bl	8013e8c <iprintf>
 8006054:	f06f 030f 	mvn.w	r3, #15
 8006058:	e00f      	b.n	800607a <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006062:	2329      	movs	r3, #41	; 0x29
 8006064:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4619      	mov	r1, r3
 800606c:	4808      	ldr	r0, [pc, #32]	; (8006090 <netconn_close_shutdown+0x5c>)
 800606e:	f7ff fbdd 	bl	800582c <netconn_apimsg>
 8006072:	4603      	mov	r3, r0
 8006074:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006076:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	08014c74 	.word	0x08014c74
 8006088:	08014f3c 	.word	0x08014f3c
 800608c:	08014ccc 	.word	0x08014ccc
 8006090:	080079a9 	.word	0x080079a9

08006094 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <recv_udp+0x20>
 80060a8:	4b34      	ldr	r3, [pc, #208]	; (800617c <recv_udp+0xe8>)
 80060aa:	22b1      	movs	r2, #177	; 0xb1
 80060ac:	4934      	ldr	r1, [pc, #208]	; (8006180 <recv_udp+0xec>)
 80060ae:	4835      	ldr	r0, [pc, #212]	; (8006184 <recv_udp+0xf0>)
 80060b0:	f00d feec 	bl	8013e8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <recv_udp+0x32>
 80060ba:	4b30      	ldr	r3, [pc, #192]	; (800617c <recv_udp+0xe8>)
 80060bc:	22b2      	movs	r2, #178	; 0xb2
 80060be:	4932      	ldr	r1, [pc, #200]	; (8006188 <recv_udp+0xf4>)
 80060c0:	4830      	ldr	r0, [pc, #192]	; (8006184 <recv_udp+0xf0>)
 80060c2:	f00d fee3 	bl	8013e8c <iprintf>
  conn = (struct netconn *)arg;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <recv_udp+0x44>
    pbuf_free(p);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f004 f87f 	bl	800a1d4 <pbuf_free>
    return;
 80060d6:	e04d      	b.n	8006174 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d005      	beq.n	80060ee <recv_udp+0x5a>
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <recv_udp+0xe8>)
 80060e4:	22ba      	movs	r2, #186	; 0xba
 80060e6:	4929      	ldr	r1, [pc, #164]	; (800618c <recv_udp+0xf8>)
 80060e8:	4826      	ldr	r0, [pc, #152]	; (8006184 <recv_udp+0xf0>)
 80060ea:	f00d fecf 	bl	8013e8c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3310      	adds	r3, #16
 80060f2:	4618      	mov	r0, r3
 80060f4:	f00c fcf2 	bl	8012adc <sys_mbox_valid>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f004 f868 	bl	800a1d4 <pbuf_free>
    return;
 8006104:	e036      	b.n	8006174 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006106:	2006      	movs	r0, #6
 8006108:	f003 fab8 	bl	800967c <memp_malloc>
 800610c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <recv_udp+0x88>
    pbuf_free(p);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f004 f85d 	bl	800a1d4 <pbuf_free>
    return;
 800611a:	e02b      	b.n	8006174 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <recv_udp+0xa0>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	e000      	b.n	8006136 <recv_udp+0xa2>
 8006134:	2300      	movs	r3, #0
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800613e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	891b      	ldrh	r3, [r3, #8]
 8006144:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3310      	adds	r3, #16
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	4618      	mov	r0, r3
 800614e:	f00c fc50 	bl	80129f2 <sys_mbox_trypost>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <recv_udp+0xcc>
    netbuf_delete(buf);
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f001 fceb 	bl	8007b34 <netbuf_delete>
    return;
 800615e:	e009      	b.n	8006174 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <recv_udp+0xe0>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	8afa      	ldrh	r2, [r7, #22]
 800616e:	2100      	movs	r1, #0
 8006170:	69f8      	ldr	r0, [r7, #28]
 8006172:	4798      	blx	r3
  }
}
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	08014f58 	.word	0x08014f58
 8006180:	08014f8c 	.word	0x08014f8c
 8006184:	08014fb0 	.word	0x08014fb0
 8006188:	08014fd8 	.word	0x08014fd8
 800618c:	08014ff8 	.word	0x08014ff8

08006190 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <recv_tcp+0x20>
 80061a4:	4b39      	ldr	r3, [pc, #228]	; (800628c <recv_tcp+0xfc>)
 80061a6:	22f9      	movs	r2, #249	; 0xf9
 80061a8:	4939      	ldr	r1, [pc, #228]	; (8006290 <recv_tcp+0x100>)
 80061aa:	483a      	ldr	r0, [pc, #232]	; (8006294 <recv_tcp+0x104>)
 80061ac:	f00d fe6e 	bl	8013e8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <recv_tcp+0x32>
 80061b6:	4b35      	ldr	r3, [pc, #212]	; (800628c <recv_tcp+0xfc>)
 80061b8:	22fa      	movs	r2, #250	; 0xfa
 80061ba:	4937      	ldr	r1, [pc, #220]	; (8006298 <recv_tcp+0x108>)
 80061bc:	4835      	ldr	r0, [pc, #212]	; (8006294 <recv_tcp+0x104>)
 80061be:	f00d fe65 	bl	8013e8c <iprintf>
  conn = (struct netconn *)arg;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <recv_tcp+0x42>
    return ERR_VAL;
 80061cc:	f06f 0305 	mvn.w	r3, #5
 80061d0:	e057      	b.n	8006282 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d006      	beq.n	80061ea <recv_tcp+0x5a>
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <recv_tcp+0xfc>)
 80061de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061e2:	492e      	ldr	r1, [pc, #184]	; (800629c <recv_tcp+0x10c>)
 80061e4:	482b      	ldr	r0, [pc, #172]	; (8006294 <recv_tcp+0x104>)
 80061e6:	f00d fe51 	bl	8013e8c <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	3310      	adds	r3, #16
 80061ee:	4618      	mov	r0, r3
 80061f0:	f00c fc74 	bl	8012adc <sys_mbox_valid>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	891b      	ldrh	r3, [r3, #8]
 8006204:	4619      	mov	r1, r3
 8006206:	68b8      	ldr	r0, [r7, #8]
 8006208:	f004 fece 	bl	800afa8 <tcp_recved>
      pbuf_free(p);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f003 ffe1 	bl	800a1d4 <pbuf_free>
    }
    return ERR_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e035      	b.n	8006282 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8006216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d011      	beq.n	8006242 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <recv_tcp+0xb2>
 8006224:	f00c fd76 	bl	8012d14 <sys_arch_protect>
 8006228:	6178      	str	r0, [r7, #20]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006230:	f113 0f0c 	cmn.w	r3, #12
 8006234:	db02      	blt.n	800623c <recv_tcp+0xac>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	721a      	strb	r2, [r3, #8]
 800623c:	6978      	ldr	r0, [r7, #20]
 800623e:	f00c fd77 	bl	8012d30 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <recv_tcp+0xc0>
    len = p->tot_len;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	891b      	ldrh	r3, [r3, #8]
 800624c:	83fb      	strh	r3, [r7, #30]
 800624e:	e001      	b.n	8006254 <recv_tcp+0xc4>
  } else {
    len = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	3310      	adds	r3, #16
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f00c fbc9 	bl	80129f2 <sys_mbox_trypost>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	e00a      	b.n	8006282 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <recv_tcp+0xf0>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	8bfa      	ldrh	r2, [r7, #30]
 800627a:	2100      	movs	r1, #0
 800627c:	69b8      	ldr	r0, [r7, #24]
 800627e:	4798      	blx	r3
  }

  return ERR_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08014f58 	.word	0x08014f58
 8006290:	08015018 	.word	0x08015018
 8006294:	08014fb0 	.word	0x08014fb0
 8006298:	0801503c 	.word	0x0801503c
 800629c:	0801505c 	.word	0x0801505c

080062a0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <poll_tcp+0x22>
 80062b4:	4b29      	ldr	r3, [pc, #164]	; (800635c <poll_tcp+0xbc>)
 80062b6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80062ba:	4929      	ldr	r1, [pc, #164]	; (8006360 <poll_tcp+0xc0>)
 80062bc:	4829      	ldr	r0, [pc, #164]	; (8006364 <poll_tcp+0xc4>)
 80062be:	f00d fde5 	bl	8013e8c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d104      	bne.n	80062d4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80062ca:	2101      	movs	r1, #1
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f001 f87b 	bl	80073c8 <lwip_netconn_do_writemore>
 80062d2:	e016      	b.n	8006302 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d112      	bne.n	8006302 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <poll_tcp+0x5a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	7a5b      	ldrb	r3, [r3, #9]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	7a5a      	ldrb	r2, [r3, #9]
 80062f4:	3a01      	subs	r2, #1
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80062fa:	2101      	movs	r1, #1
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fc13 	bl	8006b28 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	7f1b      	ldrb	r3, [r3, #28]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d021      	beq.n	8006352 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01d      	beq.n	8006352 <poll_tcp+0xb2>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800631e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006322:	d316      	bcc.n	8006352 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800632c:	2b04      	cmp	r3, #4
 800632e:	d810      	bhi.n	8006352 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	7f1b      	ldrb	r3, [r3, #28]
 8006334:	f023 0310 	bic.w	r3, r3, #16
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <poll_tcp+0xb2>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	2200      	movs	r2, #0
 800634c:	2102      	movs	r1, #2
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	08014f58 	.word	0x08014f58
 8006360:	0801507c 	.word	0x0801507c
 8006364:	08014fb0 	.word	0x08014fb0

08006368 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <sent_tcp+0x26>
 8006380:	4b20      	ldr	r3, [pc, #128]	; (8006404 <sent_tcp+0x9c>)
 8006382:	f240 1261 	movw	r2, #353	; 0x161
 8006386:	4920      	ldr	r1, [pc, #128]	; (8006408 <sent_tcp+0xa0>)
 8006388:	4820      	ldr	r0, [pc, #128]	; (800640c <sent_tcp+0xa4>)
 800638a:	f00d fd7f 	bl	8013e8c <iprintf>

  if (conn) {
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d032      	beq.n	80063fa <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d104      	bne.n	80063a6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800639c:	2101      	movs	r1, #1
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f001 f812 	bl	80073c8 <lwip_netconn_do_writemore>
 80063a4:	e007      	b.n	80063b6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	785b      	ldrb	r3, [r3, #1]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d103      	bne.n	80063b6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80063ae:	2101      	movs	r1, #1
 80063b0:	6978      	ldr	r0, [r7, #20]
 80063b2:	f000 fbb9 	bl	8006b28 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01d      	beq.n	80063fa <sent_tcp+0x92>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063c6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80063ca:	d316      	bcc.n	80063fa <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d810      	bhi.n	80063fa <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	7f1b      	ldrb	r3, [r3, #28]
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <sent_tcp+0x92>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	2102      	movs	r1, #2
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	08014f58 	.word	0x08014f58
 8006408:	0801507c 	.word	0x0801507c
 800640c:	08014fb0 	.word	0x08014fb0

08006410 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <err_tcp+0x24>
 8006426:	4b6c      	ldr	r3, [pc, #432]	; (80065d8 <err_tcp+0x1c8>)
 8006428:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800642c:	496b      	ldr	r1, [pc, #428]	; (80065dc <err_tcp+0x1cc>)
 800642e:	486c      	ldr	r0, [pc, #432]	; (80065e0 <err_tcp+0x1d0>)
 8006430:	f00d fd2c 	bl	8013e8c <iprintf>

  conn->pcb.tcp = NULL;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8006448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800644c:	2b04      	cmp	r3, #4
 800644e:	d114      	bne.n	800647a <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <err_tcp+0x7c>
 800645a:	f00c fc5b 	bl	8012d14 <sys_arch_protect>
 800645e:	61b8      	str	r0, [r7, #24]
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006466:	f113 0f0c 	cmn.w	r3, #12
 800646a:	db02      	blt.n	8006472 <err_tcp+0x62>
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	2200      	movs	r2, #0
 8006470:	721a      	strb	r2, [r3, #8]
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f00c fc5c 	bl	8012d30 <sys_arch_unprotect>
 8006478:	e008      	b.n	800648c <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800647a:	f00c fc4b 	bl	8012d14 <sys_arch_protect>
 800647e:	61f8      	str	r0, [r7, #28]
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	721a      	strb	r2, [r3, #8]
 8006486:	69f8      	ldr	r0, [r7, #28]
 8006488:	f00c fc52 	bl	8012d30 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <err_tcp+0x90>
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	2200      	movs	r2, #0
 800649a:	2104      	movs	r1, #4
 800649c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649e:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <err_tcp+0xa4>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	2200      	movs	r2, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064b2:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <err_tcp+0xb8>
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	2200      	movs	r2, #0
 80064c2:	2102      	movs	r1, #2
 80064c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c6:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	3310      	adds	r3, #16
 80064cc:	4618      	mov	r0, r3
 80064ce:	f00c fb05 	bl	8012adc <sys_mbox_valid>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3310      	adds	r3, #16
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f00c fa87 	bl	80129f2 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	3314      	adds	r3, #20
 80064e8:	4618      	mov	r0, r3
 80064ea:	f00c faf7 	bl	8012adc <sys_mbox_valid>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	3314      	adds	r3, #20
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f00c fa79 	bl	80129f2 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006504:	2b01      	cmp	r3, #1
 8006506:	d007      	beq.n	8006518 <err_tcp+0x108>
 8006508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800650c:	2b04      	cmp	r3, #4
 800650e:	d003      	beq.n	8006518 <err_tcp+0x108>
 8006510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006514:	2b03      	cmp	r3, #3
 8006516:	d14d      	bne.n	80065b4 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	7f1b      	ldrb	r3, [r3, #28]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	7f1b      	ldrb	r3, [r3, #28]
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d145      	bne.n	80065cc <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <err_tcp+0x146>
 8006548:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <err_tcp+0x1c8>)
 800654a:	f240 12b3 	movw	r2, #435	; 0x1b3
 800654e:	4925      	ldr	r1, [pc, #148]	; (80065e4 <err_tcp+0x1d4>)
 8006550:	4823      	ldr	r0, [pc, #140]	; (80065e0 <err_tcp+0x1d0>)
 8006552:	f00d fc9b 	bl	8013e8c <iprintf>
      conn->current_msg->err = err;
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f00c fb48 	bl	8012bfe <sys_sem_valid>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <err_tcp+0x172>
 8006574:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <err_tcp+0x1c8>)
 8006576:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800657a:	491b      	ldr	r1, [pc, #108]	; (80065e8 <err_tcp+0x1d8>)
 800657c:	4818      	ldr	r0, [pc, #96]	; (80065e0 <err_tcp+0x1d0>)
 800657e:	f00d fc85 	bl	8013e8c <iprintf>
      conn->current_msg = NULL;
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2200      	movs	r2, #0
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00e      	beq.n	80065ac <err_tcp+0x19c>
 800658e:	f00c fbc1 	bl	8012d14 <sys_arch_protect>
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800659a:	f113 0f0c 	cmn.w	r3, #12
 800659e:	db02      	blt.n	80065a6 <err_tcp+0x196>
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	721a      	strb	r2, [r3, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f00c fbc2 	bl	8012d30 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 80065ac:	6938      	ldr	r0, [r7, #16]
 80065ae:	f00c fb0c 	bl	8012bca <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80065b2:	e00b      	b.n	80065cc <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <err_tcp+0x1be>
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <err_tcp+0x1c8>)
 80065be:	f240 12bd 	movw	r2, #445	; 0x1bd
 80065c2:	490a      	ldr	r1, [pc, #40]	; (80065ec <err_tcp+0x1dc>)
 80065c4:	4806      	ldr	r0, [pc, #24]	; (80065e0 <err_tcp+0x1d0>)
 80065c6:	f00d fc61 	bl	8013e8c <iprintf>
  }
}
 80065ca:	e000      	b.n	80065ce <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 80065cc:	bf00      	nop
}
 80065ce:	bf00      	nop
 80065d0:	3728      	adds	r7, #40	; 0x28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	08014f58 	.word	0x08014f58
 80065dc:	0801507c 	.word	0x0801507c
 80065e0:	08014fb0 	.word	0x08014fb0
 80065e4:	0801508c 	.word	0x0801508c
 80065e8:	080150a8 	.word	0x080150a8
 80065ec:	080150c4 	.word	0x080150c4

080065f0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f005 fab3 	bl	800bb6c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006606:	490a      	ldr	r1, [pc, #40]	; (8006630 <setup_tcp+0x40>)
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f005 fac1 	bl	800bb90 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800660e:	4909      	ldr	r1, [pc, #36]	; (8006634 <setup_tcp+0x44>)
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f005 fadf 	bl	800bbd4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006616:	2202      	movs	r2, #2
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <setup_tcp+0x48>)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f005 fb34 	bl	800bc88 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006620:	4906      	ldr	r1, [pc, #24]	; (800663c <setup_tcp+0x4c>)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f005 faf6 	bl	800bc14 <tcp_err>
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	08006191 	.word	0x08006191
 8006634:	08006369 	.word	0x08006369
 8006638:	080062a1 	.word	0x080062a1
 800663c:	08006411 	.word	0x08006411

08006640 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <accept_function+0x1e>
    return ERR_VAL;
 8006658:	f06f 0305 	mvn.w	r3, #5
 800665c:	e08d      	b.n	800677a <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3314      	adds	r3, #20
 8006662:	4618      	mov	r0, r3
 8006664:	f00c fa3a 	bl	8012adc <sys_mbox_valid>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800666e:	f06f 0305 	mvn.w	r3, #5
 8006672:	e082      	b.n	800677a <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d115      	bne.n	80066a6 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3314      	adds	r3, #20
 800667e:	4941      	ldr	r1, [pc, #260]	; (8006784 <accept_function+0x144>)
 8006680:	4618      	mov	r0, r3
 8006682:	f00c f9b6 	bl	80129f2 <sys_mbox_trypost>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <accept_function+0x60>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	2200      	movs	r2, #0
 800669a:	2100      	movs	r1, #0
 800669c:	69f8      	ldr	r0, [r7, #28]
 800669e:	4798      	blx	r3
    }
    return ERR_VAL;
 80066a0:	f06f 0305 	mvn.w	r3, #5
 80066a4:	e069      	b.n	800677a <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 f8ff 	bl	80068b4 <netconn_alloc>
 80066b6:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d115      	bne.n	80066ea <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3314      	adds	r3, #20
 80066c2:	4930      	ldr	r1, [pc, #192]	; (8006784 <accept_function+0x144>)
 80066c4:	4618      	mov	r0, r3
 80066c6:	f00c f994 	bl	80129f2 <sys_mbox_trypost>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <accept_function+0xa4>
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	2200      	movs	r2, #0
 80066de:	2100      	movs	r1, #0
 80066e0:	69f8      	ldr	r0, [r7, #28]
 80066e2:	4798      	blx	r3
    }
    return ERR_MEM;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	e047      	b.n	800677a <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80066f0:	69b8      	ldr	r0, [r7, #24]
 80066f2:	f7ff ff7d 	bl	80065f0 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	79fa      	ldrb	r2, [r7, #7]
 80066fa:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3314      	adds	r3, #20
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	4618      	mov	r0, r3
 8006704:	f00c f975 	bl	80129f2 <sys_mbox_trypost>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02a      	beq.n	8006764 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8006714:	2100      	movs	r1, #0
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	f005 fa28 	bl	800bb6c <tcp_arg>
    tcp_recv(pcb, NULL);
 800671c:	2100      	movs	r1, #0
 800671e:	6978      	ldr	r0, [r7, #20]
 8006720:	f005 fa36 	bl	800bb90 <tcp_recv>
    tcp_sent(pcb, NULL);
 8006724:	2100      	movs	r1, #0
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f005 fa54 	bl	800bbd4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800672c:	2200      	movs	r2, #0
 800672e:	2100      	movs	r1, #0
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	f005 faa9 	bl	800bc88 <tcp_poll>
    tcp_err(pcb, NULL);
 8006736:	2100      	movs	r1, #0
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	f005 fa6b 	bl	800bc14 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2200      	movs	r2, #0
 8006742:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	3310      	adds	r3, #16
 8006748:	4618      	mov	r0, r3
 800674a:	f00c f92b 	bl	80129a4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3310      	adds	r3, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f00c f9d3 	bl	8012afe <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f000 f91b 	bl	8006994 <netconn_free>
    return ERR_MEM;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	e00a      	b.n	800677a <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <accept_function+0x138>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	2200      	movs	r2, #0
 8006772:	2100      	movs	r1, #0
 8006774:	69f8      	ldr	r0, [r7, #28]
 8006776:	4798      	blx	r3
  }

  return ERR_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000ce34 	.word	0x2000ce34

08006788 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d006      	beq.n	80067ac <pcb_new+0x24>
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <pcb_new+0xc4>)
 80067a0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80067a4:	492a      	ldr	r1, [pc, #168]	; (8006850 <pcb_new+0xc8>)
 80067a6:	482b      	ldr	r0, [pc, #172]	; (8006854 <pcb_new+0xcc>)
 80067a8:	f00d fb70 	bl	8013e8c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d022      	beq.n	8006800 <pcb_new+0x78>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d133      	bne.n	8006826 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681c      	ldr	r4, [r3, #0]
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f009 fe86 	bl	80104d6 <udp_new_ip_type>
 80067ca:	4603      	mov	r3, r0
 80067cc:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02a      	beq.n	800682e <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b22      	cmp	r3, #34	; 0x22
 80067e0:	d104      	bne.n	80067ec <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6858      	ldr	r0, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4917      	ldr	r1, [pc, #92]	; (8006858 <pcb_new+0xd0>)
 80067fa:	f009 fe11 	bl	8010420 <udp_recv>
    }
    break;
 80067fe:	e016      	b.n	800682e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681c      	ldr	r4, [r3, #0]
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4618      	mov	r0, r3
 8006808:	f005 f9a2 	bl	800bb50 <tcp_new_ip_type>
 800680c:	4603      	mov	r3, r0
 800680e:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fee6 	bl	80065f0 <setup_tcp>
    }
    break;
 8006824:	e005      	b.n	8006832 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	22fa      	movs	r2, #250	; 0xfa
 800682a:	711a      	strb	r2, [r3, #4]
    return;
 800682c:	e00a      	b.n	8006844 <pcb_new+0xbc>
    break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <pcb_new+0xac>
    break;
 8006832:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	22ff      	movs	r2, #255	; 0xff
 8006842:	711a      	strb	r2, [r3, #4]
  }
}
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}
 800684a:	bf00      	nop
 800684c:	08014f58 	.word	0x08014f58
 8006850:	080150e0 	.word	0x080150e0
 8006854:	08014fb0 	.word	0x08014fb0
 8006858:	08006095 	.word	0x08006095

0800685c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff ff85 	bl	8006788 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d012      	beq.n	80068ac <lwip_netconn_do_newconn+0x50>
 8006886:	f00c fa45 	bl	8012d14 <sys_arch_protect>
 800688a:	60b8      	str	r0, [r7, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006894:	f113 0f0c 	cmn.w	r3, #12
 8006898:	db05      	blt.n	80068a6 <lwip_netconn_do_newconn+0x4a>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80068a4:	721a      	strb	r2, [r3, #8]
 80068a6:	68b8      	ldr	r0, [r7, #8]
 80068a8:	f00c fa42 	bl	8012d30 <sys_arch_unprotect>
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	6039      	str	r1, [r7, #0]
 80068be:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80068c0:	2007      	movs	r0, #7
 80068c2:	f002 fedb 	bl	800967c <memp_malloc>
 80068c6:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <netconn_alloc+0x1e>
    return NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e055      	b.n	800697e <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	79fa      	ldrb	r2, [r7, #7]
 80068dc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d004      	beq.n	80068f8 <netconn_alloc+0x44>
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d105      	bne.n	80068fe <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 80068f2:	2306      	movs	r3, #6
 80068f4:	60fb      	str	r3, [r7, #12]
    break;
 80068f6:	e00a      	b.n	800690e <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 80068f8:	2306      	movs	r3, #6
 80068fa:	60fb      	str	r3, [r7, #12]
    break;
 80068fc:	e007      	b.n	800690e <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80068fe:	4b22      	ldr	r3, [pc, #136]	; (8006988 <netconn_alloc+0xd4>)
 8006900:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006904:	4921      	ldr	r1, [pc, #132]	; (800698c <netconn_alloc+0xd8>)
 8006906:	4822      	ldr	r0, [pc, #136]	; (8006990 <netconn_alloc+0xdc>)
 8006908:	f00d fac0 	bl	8013e8c <iprintf>
    goto free_and_return;
 800690c:	e032      	b.n	8006974 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3310      	adds	r3, #16
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	4618      	mov	r0, r3
 8006916:	f00c f823 	bl	8012960 <sys_mbox_new>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d128      	bne.n	8006972 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	330c      	adds	r3, #12
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f00c f8f6 	bl	8012b18 <sys_sem_new>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3310      	adds	r3, #16
 8006936:	4618      	mov	r0, r3
 8006938:	f00c f834 	bl	80129a4 <sys_mbox_free>
    goto free_and_return;
 800693c:	e01a      	b.n	8006974 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3314      	adds	r3, #20
 8006942:	4618      	mov	r0, r3
 8006944:	f00c f8db 	bl	8012afe <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2200      	movs	r2, #0
 800696c:	771a      	strb	r2, [r3, #28]
  return conn;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	e005      	b.n	800697e <netconn_alloc+0xca>
    goto free_and_return;
 8006972:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	2007      	movs	r0, #7
 8006978:	f002 fed2 	bl	8009720 <memp_free>
  return NULL;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	08014f58 	.word	0x08014f58
 800698c:	08015100 	.word	0x08015100
 8006990:	08014fb0 	.word	0x08014fb0

08006994 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <netconn_free+0x1e>
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <netconn_free+0x80>)
 80069a6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80069aa:	491b      	ldr	r1, [pc, #108]	; (8006a18 <netconn_free+0x84>)
 80069ac:	481b      	ldr	r0, [pc, #108]	; (8006a1c <netconn_free+0x88>)
 80069ae:	f00d fa6d 	bl	8013e8c <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3310      	adds	r3, #16
 80069b6:	4618      	mov	r0, r3
 80069b8:	f00c f890 	bl	8012adc <sys_mbox_valid>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <netconn_free+0x3c>
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <netconn_free+0x80>)
 80069c4:	f240 22e2 	movw	r2, #738	; 0x2e2
 80069c8:	4915      	ldr	r1, [pc, #84]	; (8006a20 <netconn_free+0x8c>)
 80069ca:	4814      	ldr	r0, [pc, #80]	; (8006a1c <netconn_free+0x88>)
 80069cc:	f00d fa5e 	bl	8013e8c <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3314      	adds	r3, #20
 80069d4:	4618      	mov	r0, r3
 80069d6:	f00c f881 	bl	8012adc <sys_mbox_valid>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <netconn_free+0x5a>
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <netconn_free+0x80>)
 80069e2:	f240 22e5 	movw	r2, #741	; 0x2e5
 80069e6:	490f      	ldr	r1, [pc, #60]	; (8006a24 <netconn_free+0x90>)
 80069e8:	480c      	ldr	r0, [pc, #48]	; (8006a1c <netconn_free+0x88>)
 80069ea:	f00d fa4f 	bl	8013e8c <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	330c      	adds	r3, #12
 80069f2:	4618      	mov	r0, r3
 80069f4:	f00c f8f6 	bl	8012be4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	330c      	adds	r3, #12
 80069fc:	4618      	mov	r0, r3
 80069fe:	f00c f90f 	bl	8012c20 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	2007      	movs	r0, #7
 8006a06:	f002 fe8b 	bl	8009720 <memp_free>
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	08014f58 	.word	0x08014f58
 8006a18:	08015128 	.word	0x08015128
 8006a1c:	08014fb0 	.word	0x08014fb0
 8006a20:	08015158 	.word	0x08015158
 8006a24:	08015194 	.word	0x08015194

08006a28 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3310      	adds	r3, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	f00c f851 	bl	8012adc <sys_mbox_valid>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d035      	beq.n	8006aac <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006a40:	e01e      	b.n	8006a80 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d114      	bne.n	8006a78 <netconn_drain+0x50>
        if (mem != NULL) {
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	891b      	ldrh	r3, [r3, #8]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f004 fa9c 	bl	800afa8 <tcp_recved>
          }
          pbuf_free(p);
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	f003 fbaf 	bl	800a1d4 <pbuf_free>
 8006a76:	e003      	b.n	8006a80 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 f85a 	bl	8007b34 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3310      	adds	r3, #16
 8006a84:	f107 020c 	add.w	r2, r7, #12
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f00c f80a 	bl	8012aa4 <sys_arch_mbox_tryfetch>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d1d4      	bne.n	8006a42 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3310      	adds	r3, #16
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f00b ff81 	bl	80129a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3310      	adds	r3, #16
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f00c f829 	bl	8012afe <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f00c f813 	bl	8012adc <sys_mbox_valid>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d02e      	beq.n	8006b1a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006abc:	e017      	b.n	8006aee <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	; (8006b24 <netconn_drain+0xfc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8006aca:	6938      	ldr	r0, [r7, #16]
 8006acc:	f7ff ffac 	bl	8006a28 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f004 f8cf 	bl	800ac80 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8006ae8:	6938      	ldr	r0, [r7, #16]
 8006aea:	f7ff ff53 	bl	8006994 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3314      	adds	r3, #20
 8006af2:	f107 020c 	add.w	r2, r7, #12
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f00b ffd3 	bl	8012aa4 <sys_arch_mbox_tryfetch>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d1db      	bne.n	8006abe <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f00b ff4a 	bl	80129a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3314      	adds	r3, #20
 8006b14:	4618      	mov	r0, r3
 8006b16:	f00b fff2 	bl	8012afe <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	2000ce34 	.word	0x2000ce34

08006b28 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <lwip_netconn_do_close_internal+0x24>
 8006b3e:	4baa      	ldr	r3, [pc, #680]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006b40:	f240 3243 	movw	r2, #835	; 0x343
 8006b44:	49a9      	ldr	r1, [pc, #676]	; (8006dec <lwip_netconn_do_close_internal+0x2c4>)
 8006b46:	48aa      	ldr	r0, [pc, #680]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006b48:	f00d f9a0 	bl	8013e8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d006      	beq.n	8006b66 <lwip_netconn_do_close_internal+0x3e>
 8006b58:	4ba3      	ldr	r3, [pc, #652]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006b5a:	f44f 7251 	mov.w	r2, #836	; 0x344
 8006b5e:	49a5      	ldr	r1, [pc, #660]	; (8006df4 <lwip_netconn_do_close_internal+0x2cc>)
 8006b60:	48a3      	ldr	r0, [pc, #652]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006b62:	f00d f993 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d006      	beq.n	8006b7c <lwip_netconn_do_close_internal+0x54>
 8006b6e:	4b9e      	ldr	r3, [pc, #632]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006b70:	f240 3245 	movw	r2, #837	; 0x345
 8006b74:	49a0      	ldr	r1, [pc, #640]	; (8006df8 <lwip_netconn_do_close_internal+0x2d0>)
 8006b76:	489e      	ldr	r0, [pc, #632]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006b78:	f00d f988 	bl	8013e8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <lwip_netconn_do_close_internal+0x6a>
 8006b84:	4b98      	ldr	r3, [pc, #608]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006b86:	f240 3246 	movw	r2, #838	; 0x346
 8006b8a:	499c      	ldr	r1, [pc, #624]	; (8006dfc <lwip_netconn_do_close_internal+0x2d4>)
 8006b8c:	4898      	ldr	r0, [pc, #608]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006b8e:	f00d f97d 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <lwip_netconn_do_close_internal+0x80>
 8006b9a:	4b93      	ldr	r3, [pc, #588]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006b9c:	f240 3247 	movw	r2, #839	; 0x347
 8006ba0:	4997      	ldr	r1, [pc, #604]	; (8006e00 <lwip_netconn_do_close_internal+0x2d8>)
 8006ba2:	4893      	ldr	r0, [pc, #588]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006ba4:	f00d f972 	bl	8013e8c <iprintf>

  tpcb = conn->pcb.tcp;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	7a1b      	ldrb	r3, [r3, #8]
 8006bb4:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d102      	bne.n	8006bd2 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77bb      	strb	r3, [r7, #30]
 8006bd0:	e01f      	b.n	8006c12 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8006bd2:	7dbb      	ldrb	r3, [r7, #22]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d007      	beq.n	8006bf0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	d003      	beq.n	8006bf0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d102      	bne.n	8006bf6 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77bb      	strb	r3, [r7, #30]
 8006bf4:	e00d      	b.n	8006c12 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006bf6:	7d7b      	ldrb	r3, [r7, #21]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <lwip_netconn_do_close_internal+0xe6>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	7e9b      	ldrb	r3, [r3, #26]
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77bb      	strb	r3, [r7, #30]
 8006c0c:	e001      	b.n	8006c12 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8006c12:	7fbb      	ldrb	r3, [r7, #30]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	69b8      	ldr	r0, [r7, #24]
 8006c1c:	f004 ffa6 	bl	800bb6c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	7d1b      	ldrb	r3, [r3, #20]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d104      	bne.n	8006c32 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8006c28:	2100      	movs	r1, #0
 8006c2a:	69b8      	ldr	r0, [r7, #24]
 8006c2c:	f005 f814 	bl	800bc58 <tcp_accept>
 8006c30:	e01d      	b.n	8006c6e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8006c32:	7dbb      	ldrb	r3, [r7, #22]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8006c38:	2100      	movs	r1, #0
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f004 ffa8 	bl	800bb90 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006c40:	2100      	movs	r1, #0
 8006c42:	69b8      	ldr	r0, [r7, #24]
 8006c44:	f005 f808 	bl	800bc58 <tcp_accept>
    }
    if (shut_tx) {
 8006c48:	7d7b      	ldrb	r3, [r7, #21]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	69b8      	ldr	r0, [r7, #24]
 8006c52:	f004 ffbf 	bl	800bbd4 <tcp_sent>
    }
    if (close) {
 8006c56:	7fbb      	ldrb	r3, [r7, #30]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	69b8      	ldr	r0, [r7, #24]
 8006c62:	f005 f811 	bl	800bc88 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006c66:	2100      	movs	r1, #0
 8006c68:	69b8      	ldr	r0, [r7, #24]
 8006c6a:	f004 ffd3 	bl	800bc14 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8006c6e:	7fbb      	ldrb	r3, [r7, #30]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8006c74:	69b8      	ldr	r0, [r7, #24]
 8006c76:	f003 fef1 	bl	800aa5c <tcp_close>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e007      	b.n	8006c90 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006c80:	7dbb      	ldrb	r3, [r7, #22]
 8006c82:	7d7a      	ldrb	r2, [r7, #21]
 8006c84:	4619      	mov	r1, r3
 8006c86:	69b8      	ldr	r0, [r7, #24]
 8006c88:	f003 ff00 	bl	800aa8c <tcp_shutdown>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8006c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	777b      	strb	r3, [r7, #29]
 8006c9c:	e016      	b.n	8006ccc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8006c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d10f      	bne.n	8006cc8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	7a5b      	ldrb	r3, [r3, #9]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10c      	bne.n	8006ccc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	777b      	strb	r3, [r7, #29]
        if (close) {
 8006cb6:	7fbb      	ldrb	r3, [r7, #30]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8006cbc:	69b8      	ldr	r0, [r7, #24]
 8006cbe:	f003 ffdf 	bl	800ac80 <tcp_abort>
          err = ERR_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e001      	b.n	8006ccc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8006ccc:	7f7b      	ldrb	r3, [r7, #29]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d056      	beq.n	8006d80 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	7ffa      	ldrb	r2, [r7, #31]
 8006ce2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8006cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d129      	bne.n	8006d4c <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8006cf8:	7fbb      	ldrb	r3, [r7, #30]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <lwip_netconn_do_close_internal+0x1f0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	2200      	movs	r2, #0
 8006d12:	2104      	movs	r1, #4
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
      }
      if (shut_rx) {
 8006d18:	7dbb      	ldrb	r3, [r7, #22]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <lwip_netconn_do_close_internal+0x20a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      }
      if (shut_tx) {
 8006d32:	7d7b      	ldrb	r3, [r7, #21]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <lwip_netconn_do_close_internal+0x224>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	2200      	movs	r2, #0
 8006d46:	2102      	movs	r1, #2
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <lwip_netconn_do_close_internal+0x248>
 8006d52:	f00b ffdf 	bl	8012d14 <sys_arch_protect>
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006d5e:	f113 0f0c 	cmn.w	r3, #12
 8006d62:	db02      	blt.n	8006d6a <lwip_netconn_do_close_internal+0x242>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7ffa      	ldrb	r2, [r7, #31]
 8006d68:	721a      	strb	r2, [r3, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f00b ffe0 	bl	8012d30 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f00b ff27 	bl	8012bca <sys_sem_signal>
    }
    return ERR_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e02e      	b.n	8006dde <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8006d80:	7f7b      	ldrb	r3, [r7, #29]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11e      	bne.n	8006dc4 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	7d1b      	ldrb	r3, [r3, #20]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d106      	bne.n	8006d9c <lwip_netconn_do_close_internal+0x274>
 8006d8e:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006d90:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006d94:	491b      	ldr	r1, [pc, #108]	; (8006e04 <lwip_netconn_do_close_internal+0x2dc>)
 8006d96:	4816      	ldr	r0, [pc, #88]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006d98:	f00d f878 	bl	8013e8c <iprintf>
    if (shut_tx) {
 8006d9c:	7d7b      	ldrb	r3, [r7, #21]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8006da2:	4919      	ldr	r1, [pc, #100]	; (8006e08 <lwip_netconn_do_close_internal+0x2e0>)
 8006da4:	69b8      	ldr	r0, [r7, #24]
 8006da6:	f004 ff15 	bl	800bbd4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8006daa:	2201      	movs	r2, #1
 8006dac:	4917      	ldr	r1, [pc, #92]	; (8006e0c <lwip_netconn_do_close_internal+0x2e4>)
 8006dae:	69b8      	ldr	r0, [r7, #24]
 8006db0:	f004 ff6a 	bl	800bc88 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006db4:	4916      	ldr	r1, [pc, #88]	; (8006e10 <lwip_netconn_do_close_internal+0x2e8>)
 8006db6:	69b8      	ldr	r0, [r7, #24]
 8006db8:	f004 ff2c 	bl	800bc14 <tcp_err>
    tcp_arg(tpcb, conn);
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	69b8      	ldr	r0, [r7, #24]
 8006dc0:	f004 fed4 	bl	800bb6c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8006dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <lwip_netconn_do_close_internal+0x2b2>
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <lwip_netconn_do_close_internal+0x2c0>)
 8006dce:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006dd2:	4910      	ldr	r1, [pc, #64]	; (8006e14 <lwip_netconn_do_close_internal+0x2ec>)
 8006dd4:	4806      	ldr	r0, [pc, #24]	; (8006df0 <lwip_netconn_do_close_internal+0x2c8>)
 8006dd6:	f00d f859 	bl	8013e8c <iprintf>
  return err;
 8006dda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08014f58 	.word	0x08014f58
 8006dec:	080151d0 	.word	0x080151d0
 8006df0:	08014fb0 	.word	0x08014fb0
 8006df4:	080151e0 	.word	0x080151e0
 8006df8:	08015200 	.word	0x08015200
 8006dfc:	08015224 	.word	0x08015224
 8006e00:	0801508c 	.word	0x0801508c
 8006e04:	08015238 	.word	0x08015238
 8006e08:	08006369 	.word	0x08006369
 8006e0c:	080062a1 	.word	0x080062a1
 8006e10:	08006411 	.word	0x08006411
 8006e14:	0801525c 	.word	0x0801525c

08006e18 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006e2c:	7cfb      	ldrb	r3, [r7, #19]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00d      	beq.n	8006e4e <lwip_netconn_do_delconn+0x36>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d006      	beq.n	8006e4e <lwip_netconn_do_delconn+0x36>
 8006e40:	4b6f      	ldr	r3, [pc, #444]	; (8007000 <lwip_netconn_do_delconn+0x1e8>)
 8006e42:	f240 4201 	movw	r2, #1025	; 0x401
 8006e46:	496f      	ldr	r1, [pc, #444]	; (8007004 <lwip_netconn_do_delconn+0x1ec>)
 8006e48:	486f      	ldr	r0, [pc, #444]	; (8007008 <lwip_netconn_do_delconn+0x1f0>)
 8006e4a:	f00d f81f 	bl	8013e8c <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8006e4e:	7cfb      	ldrb	r3, [r7, #19]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <lwip_netconn_do_delconn+0x48>
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d002      	beq.n	8006e60 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d109      	bne.n	8006e74 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d10a      	bne.n	8006e7c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	7f1b      	ldrb	r3, [r3, #28]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	22fb      	movs	r2, #251	; 0xfb
 8006e78:	711a      	strb	r2, [r3, #4]
 8006e7a:	e09c      	b.n	8006fb6 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d10d      	bne.n	8006e9e <lwip_netconn_do_delconn+0x86>
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	7f1b      	ldrb	r3, [r3, #28]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <lwip_netconn_do_delconn+0x86>
 8006e90:	4b5b      	ldr	r3, [pc, #364]	; (8007000 <lwip_netconn_do_delconn+0x1e8>)
 8006e92:	f240 421f 	movw	r2, #1055	; 0x41f
 8006e96:	495d      	ldr	r1, [pc, #372]	; (800700c <lwip_netconn_do_delconn+0x1f4>)
 8006e98:	485b      	ldr	r0, [pc, #364]	; (8007008 <lwip_netconn_do_delconn+0x1f0>)
 8006e9a:	f00c fff7 	bl	8013e8c <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fdbd 	bl	8006a28 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d064      	beq.n	8006f82 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d00e      	beq.n	8006ee4 <lwip_netconn_do_delconn+0xcc>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d000      	beq.n	8006ecc <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8006eca:	e056      	b.n	8006f7a <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f009 fab1 	bl	8010444 <udp_remove>
        break;
 8006ee2:	e04a      	b.n	8006f7a <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <lwip_netconn_do_delconn+0xe0>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <lwip_netconn_do_delconn+0xee>
 8006ef8:	4b41      	ldr	r3, [pc, #260]	; (8007000 <lwip_netconn_do_delconn+0x1e8>)
 8006efa:	f240 4235 	movw	r2, #1077	; 0x435
 8006efe:	4944      	ldr	r1, [pc, #272]	; (8007010 <lwip_netconn_do_delconn+0x1f8>)
 8006f00:	4841      	ldr	r0, [pc, #260]	; (8007008 <lwip_netconn_do_delconn+0x1f0>)
 8006f02:	f00c ffc3 	bl	8013e8c <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2203      	movs	r2, #3
 8006f12:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fe00 	bl	8006b28 <lwip_netconn_do_close_internal>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d064      	beq.n	8006ff8 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d006      	beq.n	8006f46 <lwip_netconn_do_delconn+0x12e>
 8006f38:	4b31      	ldr	r3, [pc, #196]	; (8007000 <lwip_netconn_do_delconn+0x1e8>)
 8006f3a:	f240 423b 	movw	r2, #1083	; 0x43b
 8006f3e:	4935      	ldr	r1, [pc, #212]	; (8007014 <lwip_netconn_do_delconn+0x1fc>)
 8006f40:	4831      	ldr	r0, [pc, #196]	; (8007008 <lwip_netconn_do_delconn+0x1f0>)
 8006f42:	f00c ffa3 	bl	8013e8c <iprintf>
          UNLOCK_TCPIP_CORE();
 8006f46:	4834      	ldr	r0, [pc, #208]	; (8007018 <lwip_netconn_do_delconn+0x200>)
 8006f48:	f00b feb1 	bl	8012cae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f00b fe07 	bl	8012b68 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006f5a:	482f      	ldr	r0, [pc, #188]	; (8007018 <lwip_netconn_do_delconn+0x200>)
 8006f5c:	f00b fe98 	bl	8012c90 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d046      	beq.n	8006ff8 <lwip_netconn_do_delconn+0x1e0>
 8006f6a:	4b25      	ldr	r3, [pc, #148]	; (8007000 <lwip_netconn_do_delconn+0x1e8>)
 8006f6c:	f240 423f 	movw	r2, #1087	; 0x43f
 8006f70:	4928      	ldr	r1, [pc, #160]	; (8007014 <lwip_netconn_do_delconn+0x1fc>)
 8006f72:	4825      	ldr	r0, [pc, #148]	; (8007008 <lwip_netconn_do_delconn+0x1f0>)
 8006f74:	f00c ff8a 	bl	8013e8c <iprintf>
        return;
 8006f78:	e03e      	b.n	8006ff8 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <lwip_netconn_do_delconn+0x184>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	6810      	ldr	r0, [r2, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <lwip_netconn_do_delconn+0x19e>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	6810      	ldr	r0, [r2, #0]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f00b fe1e 	bl	8012bfe <sys_sem_valid>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d018      	beq.n	8006ffa <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d014      	beq.n	8006ffa <lwip_netconn_do_delconn+0x1e2>
 8006fd0:	f00b fea0 	bl	8012d14 <sys_arch_protect>
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006fde:	f113 0f0c 	cmn.w	r3, #12
 8006fe2:	db05      	blt.n	8006ff0 <lwip_netconn_do_delconn+0x1d8>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006fee:	721a      	strb	r2, [r3, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f00b fe9d 	bl	8012d30 <sys_arch_unprotect>
 8006ff6:	e000      	b.n	8006ffa <lwip_netconn_do_delconn+0x1e2>
        return;
 8006ff8:	bf00      	nop
  }
}
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08014f58 	.word	0x08014f58
 8007004:	0801526c 	.word	0x0801526c
 8007008:	08014fb0 	.word	0x08014fb0
 800700c:	08015280 	.word	0x08015280
 8007010:	080152a0 	.word	0x080152a0
 8007014:	080152bc 	.word	0x080152bc
 8007018:	2000ce38 	.word	0x2000ce38

0800701c <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007030:	f113 0f0c 	cmn.w	r3, #12
 8007034:	da06      	bge.n	8007044 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	711a      	strb	r2, [r3, #4]
 8007042:	e030      	b.n	80070a6 <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	22fa      	movs	r2, #250	; 0xfa
 8007048:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d027      	beq.n	80070a4 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800705e:	2b10      	cmp	r3, #16
 8007060:	d011      	beq.n	8007086 <lwip_netconn_do_bind+0x6a>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d000      	beq.n	8007068 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8007066:	e01e      	b.n	80070a6 <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6858      	ldr	r0, [r3, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6899      	ldr	r1, [r3, #8]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	899b      	ldrh	r3, [r3, #12]
 8007076:	461a      	mov	r2, r3
 8007078:	f009 f962 	bl	8010340 <udp_bind>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	711a      	strb	r2, [r3, #4]
        break;
 8007084:	e00f      	b.n	80070a6 <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6858      	ldr	r0, [r3, #4]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6899      	ldr	r1, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	899b      	ldrh	r3, [r3, #12]
 8007094:	461a      	mov	r2, r3
 8007096:	f003 fdff 	bl	800ac98 <tcp_bind>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	711a      	strb	r2, [r3, #4]
        break;
 80070a2:	e000      	b.n	80070a6 <lwip_netconn_do_bind+0x8a>
      }
    }
 80070a4:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d012      	beq.n	80070d4 <lwip_netconn_do_bind+0xb8>
 80070ae:	f00b fe31 	bl	8012d14 <sys_arch_protect>
 80070b2:	60b8      	str	r0, [r7, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80070bc:	f113 0f0c 	cmn.w	r3, #12
 80070c0:	db05      	blt.n	80070ce <lwip_netconn_do_bind+0xb2>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80070cc:	721a      	strb	r2, [r3, #8]
 80070ce:	68b8      	ldr	r0, [r7, #8]
 80070d0:	f00b fe2e 	bl	8012d30 <sys_arch_unprotect>
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80070f0:	f113 0f0c 	cmn.w	r3, #12
 80070f4:	da06      	bge.n	8007104 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	711a      	strb	r2, [r3, #4]
 8007102:	e090      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	22f5      	movs	r2, #245	; 0xf5
 8007108:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8088 	beq.w	8007226 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007120:	2b10      	cmp	r3, #16
 8007122:	d17d      	bne.n	8007220 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d16f      	bne.n	800720e <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	22fa      	movs	r2, #250	; 0xfa
 800713e:	711a      	strb	r2, [r3, #4]
 8007140:	e071      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8007142:	23ff      	movs	r3, #255	; 0xff
 8007144:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f107 020f 	add.w	r2, r7, #15
 8007150:	7ef9      	ldrb	r1, [r7, #27]
 8007152:	4618      	mov	r0, r3
 8007154:	f003 fe42 	bl	800addc <tcp_listen_with_backlog_and_err>
 8007158:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8007160:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	711a      	strb	r2, [r3, #4]
 8007168:	e05d      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3310      	adds	r3, #16
 8007170:	4618      	mov	r0, r3
 8007172:	f00b fcb3 	bl	8012adc <sys_mbox_valid>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3310      	adds	r3, #16
 8007182:	4618      	mov	r0, r3
 8007184:	f00b fc0e 	bl	80129a4 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3310      	adds	r3, #16
 800718e:	4618      	mov	r0, r3
 8007190:	f00b fcb5 	bl	8012afe <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2200      	movs	r2, #0
 8007198:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	4618      	mov	r0, r3
 80071a2:	f00b fc9b 	bl	8012adc <sys_mbox_valid>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3314      	adds	r3, #20
 80071b2:	2106      	movs	r1, #6
 80071b4:	4618      	mov	r0, r3
 80071b6:	f00b fbd3 	bl	8012960 <sys_mbox_new>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d118      	bne.n	80071fe <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2202      	movs	r2, #2
 80071d2:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f004 fcbf 	bl	800bb6c <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4919      	ldr	r1, [pc, #100]	; (800725c <lwip_netconn_do_listen+0x180>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f004 fd2e 	bl	800bc58 <tcp_accept>
 80071fc:	e013      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80071fe:	6978      	ldr	r0, [r7, #20]
 8007200:	f003 fc2c 	bl	800aa5c <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	e00b      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d106      	bne.n	8007226 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2200      	movs	r2, #0
 800721c:	711a      	strb	r2, [r3, #4]
 800721e:	e002      	b.n	8007226 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	22f0      	movs	r2, #240	; 0xf0
 8007224:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <lwip_netconn_do_listen+0x178>
 800722e:	f00b fd71 	bl	8012d14 <sys_arch_protect>
 8007232:	6138      	str	r0, [r7, #16]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800723c:	f113 0f0c 	cmn.w	r3, #12
 8007240:	db05      	blt.n	800724e <lwip_netconn_do_listen+0x172>
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800724c:	721a      	strb	r2, [r3, #8]
 800724e:	6938      	ldr	r0, [r7, #16]
 8007250:	f00b fd6e 	bl	8012d30 <sys_arch_unprotect>
}
 8007254:	bf00      	nop
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	08006641 	.word	0x08006641

08007260 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007274:	f113 0f0c 	cmn.w	r3, #12
 8007278:	da06      	bge.n	8007288 <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	711a      	strb	r2, [r3, #4]
 8007286:	e038      	b.n	80072fa <lwip_netconn_do_send+0x9a>
  } else {
    msg->err = ERR_CONN;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	22f5      	movs	r2, #245	; 0xf5
 800728c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02f      	beq.n	80072f8 <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d000      	beq.n	80072a8 <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 80072a6:	e028      	b.n	80072fa <lwip_netconn_do_send+0x9a>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f008 ff23 	bl	801010c <udp_send>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	711a      	strb	r2, [r3, #4]
        break;
 80072ce:	e014      	b.n	80072fa <lwip_netconn_do_send+0x9a>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6858      	ldr	r0, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f103 0208 	add.w	r2, r3, #8
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	899b      	ldrh	r3, [r3, #12]
 80072ea:	f008 ff27 	bl	801013c <udp_sendto>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	711a      	strb	r2, [r3, #4]
        break;
 80072f6:	e000      	b.n	80072fa <lwip_netconn_do_send+0x9a>
      }
    }
 80072f8:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <lwip_netconn_do_send+0xc8>
 8007302:	f00b fd07 	bl	8012d14 <sys_arch_protect>
 8007306:	60b8      	str	r0, [r7, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007310:	f113 0f0c 	cmn.w	r3, #12
 8007314:	db05      	blt.n	8007322 <lwip_netconn_do_send+0xc2>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007320:	721a      	strb	r2, [r3, #8]
 8007322:	68b8      	ldr	r0, [r7, #8]
 8007324:	f00b fd04 	bl	8012d30 <sys_arch_unprotect>
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2200      	movs	r2, #0
 8007340:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d022      	beq.n	8007392 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007356:	2b10      	cmp	r3, #16
 8007358:	d11b      	bne.n	8007392 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d202      	bcs.n	800736e <lwip_netconn_do_recv+0x3e>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	b29b      	uxth	r3, r3
 800736c:	e001      	b.n	8007372 <lwip_netconn_do_recv+0x42>
 800736e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007372:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	89fa      	ldrh	r2, [r7, #14]
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f003 fe12 	bl	800afa8 <tcp_recved>
        remaining -= recved;
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d012      	beq.n	80073c0 <lwip_netconn_do_recv+0x90>
 800739a:	f00b fcbb 	bl	8012d14 <sys_arch_protect>
 800739e:	60b8      	str	r0, [r7, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073a8:	f113 0f0c 	cmn.w	r3, #12
 80073ac:	db05      	blt.n	80073ba <lwip_netconn_do_recv+0x8a>
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80073b8:	721a      	strb	r2, [r3, #8]
 80073ba:	68b8      	ldr	r0, [r7, #8]
 80073bc:	f00b fcb8 	bl	8012d30 <sys_arch_unprotect>
}
 80073c0:	bf00      	nop
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <lwip_netconn_do_writemore+0x26>
 80073e0:	4ba3      	ldr	r3, [pc, #652]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 80073e2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80073e6:	49a3      	ldr	r1, [pc, #652]	; (8007674 <lwip_netconn_do_writemore+0x2ac>)
 80073e8:	48a3      	ldr	r0, [pc, #652]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 80073ea:	f00c fd4f 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d006      	beq.n	8007404 <lwip_netconn_do_writemore+0x3c>
 80073f6:	4b9e      	ldr	r3, [pc, #632]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 80073f8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80073fc:	499f      	ldr	r1, [pc, #636]	; (800767c <lwip_netconn_do_writemore+0x2b4>)
 80073fe:	489e      	ldr	r0, [pc, #632]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 8007400:	f00c fd44 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <lwip_netconn_do_writemore+0x52>
 800740c:	4b98      	ldr	r3, [pc, #608]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 800740e:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8007412:	499b      	ldr	r1, [pc, #620]	; (8007680 <lwip_netconn_do_writemore+0x2b8>)
 8007414:	4898      	ldr	r0, [pc, #608]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 8007416:	f00c fd39 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <lwip_netconn_do_writemore+0x68>
 8007422:	4b93      	ldr	r3, [pc, #588]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 8007424:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8007428:	4996      	ldr	r1, [pc, #600]	; (8007684 <lwip_netconn_do_writemore+0x2bc>)
 800742a:	4893      	ldr	r0, [pc, #588]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 800742c:	f00c fd2e 	bl	8013e8c <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	429a      	cmp	r2, r3
 800743c:	d306      	bcc.n	800744c <lwip_netconn_do_writemore+0x84>
 800743e:	4b8c      	ldr	r3, [pc, #560]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 8007440:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8007444:	4990      	ldr	r1, [pc, #576]	; (8007688 <lwip_netconn_do_writemore+0x2c0>)
 8007446:	488c      	ldr	r0, [pc, #560]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 8007448:	f00c fd20 	bl	8013e8c <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	7c1b      	ldrb	r3, [r3, #16]
 8007452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7f1b      	ldrb	r3, [r3, #28]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <lwip_netconn_do_writemore+0xa6>
 8007462:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <lwip_netconn_do_writemore+0xaa>
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <lwip_netconn_do_writemore+0xac>
 8007472:	2300      	movs	r3, #0
 8007474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	4413      	add	r3, r2
 8007484:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749a:	d309      	bcc.n	80074b0 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800749c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074a0:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80074a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074a6:	f043 0302 	orr.w	r3, r3, #2
 80074aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074ae:	e001      	b.n	80074b4 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074bc:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80074be:	8afa      	ldrh	r2, [r7, #22]
 80074c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d212      	bcs.n	80074ec <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80074ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 80074d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 80074d8:	23f9      	movs	r3, #249	; 0xf9
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 80074de:	e02a      	b.n	8007536 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80074e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074e4:	f043 0302 	orr.w	r3, r3, #2
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f2:	441a      	add	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d906      	bls.n	800750c <lwip_netconn_do_writemore+0x144>
 80074fe:	4b5c      	ldr	r3, [pc, #368]	; (8007670 <lwip_netconn_do_writemore+0x2a8>)
 8007500:	f240 6213 	movw	r2, #1555	; 0x613
 8007504:	4961      	ldr	r1, [pc, #388]	; (800768c <lwip_netconn_do_writemore+0x2c4>)
 8007506:	485c      	ldr	r0, [pc, #368]	; (8007678 <lwip_netconn_do_writemore+0x2b0>)
 8007508:	f00c fcc0 	bl	8013e8c <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6858      	ldr	r0, [r3, #4]
 8007510:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007514:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007516:	69f9      	ldr	r1, [r7, #28]
 8007518:	f007 f96a 	bl	800e7f0 <tcp_write>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007522:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <lwip_netconn_do_writemore+0x16c>
 800752a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d133      	bne.n	800759c <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8007534:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8007536:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800753a:	2b00      	cmp	r3, #0
 800753c:	d017      	beq.n	800756e <lwip_netconn_do_writemore+0x1a6>
 800753e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	429a      	cmp	r2, r3
 8007548:	d211      	bcs.n	800756e <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <lwip_netconn_do_writemore+0x196>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007558:	2103      	movs	r1, #3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7f1b      	ldrb	r3, [r3, #28]
 8007562:	f043 0310 	orr.w	r3, r3, #16
 8007566:	b2da      	uxtb	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	771a      	strb	r2, [r3, #28]
 800756c:	e016      	b.n	800759c <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007576:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800757a:	d305      	bcc.n	8007588 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007584:	2b04      	cmp	r3, #4
 8007586:	d909      	bls.n	800759c <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <lwip_netconn_do_writemore+0x1d4>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007596:	2103      	movs	r1, #3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800759c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d134      	bne.n	800760e <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075aa:	441a      	add	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a1a      	ldr	r2, [r3, #32]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d003      	beq.n	80075c6 <lwip_netconn_do_writemore+0x1fe>
 80075be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6a12      	ldr	r2, [r2, #32]
 80075ce:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f007 fdba 	bl	800f154 <tcp_output>
 80075e0:	4603      	mov	r3, r0
 80075e2:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80075e4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80075e8:	f113 0f0c 	cmn.w	r3, #12
 80075ec:	db04      	blt.n	80075f8 <lwip_netconn_do_writemore+0x230>
 80075ee:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80075f2:	f113 0f04 	cmn.w	r3, #4
 80075f6:	d152      	bne.n	800769e <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80075f8:	7d3b      	ldrb	r3, [r7, #20]
 80075fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2200      	movs	r2, #0
 800760a:	60da      	str	r2, [r3, #12]
 800760c:	e047      	b.n	800769e <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800760e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d13b      	bne.n	8007690 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4618      	mov	r0, r3
 800761e:	f007 fd99 	bl	800f154 <tcp_output>
 8007622:	4603      	mov	r3, r0
 8007624:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007626:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800762a:	f113 0f0c 	cmn.w	r3, #12
 800762e:	db04      	blt.n	800763a <lwip_netconn_do_writemore+0x272>
 8007630:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007634:	f113 0f04 	cmn.w	r3, #4
 8007638:	d10a      	bne.n	8007650 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800763a:	7d7b      	ldrb	r3, [r7, #21]
 800763c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2200      	movs	r2, #0
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	e026      	b.n	800769e <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8007650:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007654:	2b00      	cmp	r3, #0
 8007656:	d022      	beq.n	800769e <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8007658:	23f9      	movs	r3, #249	; 0xf9
 800765a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2200      	movs	r2, #0
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e017      	b.n	800769e <lwip_netconn_do_writemore+0x2d6>
 800766e:	bf00      	nop
 8007670:	08014f58 	.word	0x08014f58
 8007674:	0801507c 	.word	0x0801507c
 8007678:	08014fb0 	.word	0x08014fb0
 800767c:	0801535c 	.word	0x0801535c
 8007680:	0801508c 	.word	0x0801508c
 8007684:	0801537c 	.word	0x0801537c
 8007688:	08015394 	.word	0x08015394
 800768c:	080153c8 	.word	0x080153c8
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800769e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02c      	beq.n	8007700 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076b8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <lwip_netconn_do_writemore+0x32a>
 80076d2:	f00b fb1f 	bl	8012d14 <sys_arch_protect>
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80076de:	f113 0f0c 	cmn.w	r3, #12
 80076e2:	db03      	blt.n	80076ec <lwip_netconn_do_writemore+0x324>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076ea:	721a      	strb	r2, [r3, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f00b fb1f 	bl	8012d30 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80076f8:	6938      	ldr	r0, [r7, #16]
 80076fa:	f00b fa66 	bl	8012bca <sys_sem_signal>
 80076fe:	e002      	b.n	8007706 <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	e000      	b.n	8007708 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007724:	f113 0f0c 	cmn.w	r3, #12
 8007728:	da06      	bge.n	8007738 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	711a      	strb	r2, [r3, #4]
 8007736:	e072      	b.n	800781e <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007742:	2b10      	cmp	r3, #16
 8007744:	d168      	bne.n	8007818 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	22fb      	movs	r2, #251	; 0xfb
 8007754:	711a      	strb	r2, [r3, #4]
 8007756:	e062      	b.n	800781e <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d056      	beq.n	8007810 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <lwip_netconn_do_write+0x6e>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <lwip_netconn_do_write+0x7c>
 800777e:	4b36      	ldr	r3, [pc, #216]	; (8007858 <lwip_netconn_do_write+0x148>)
 8007780:	f240 6283 	movw	r2, #1667	; 0x683
 8007784:	4935      	ldr	r1, [pc, #212]	; (800785c <lwip_netconn_do_write+0x14c>)
 8007786:	4836      	ldr	r0, [pc, #216]	; (8007860 <lwip_netconn_do_write+0x150>)
 8007788:	f00c fb80 	bl	8013e8c <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <lwip_netconn_do_write+0x92>
 8007794:	4b30      	ldr	r3, [pc, #192]	; (8007858 <lwip_netconn_do_write+0x148>)
 8007796:	f240 6284 	movw	r2, #1668	; 0x684
 800779a:	4932      	ldr	r1, [pc, #200]	; (8007864 <lwip_netconn_do_write+0x154>)
 800779c:	4830      	ldr	r0, [pc, #192]	; (8007860 <lwip_netconn_do_write+0x150>)
 800779e:	f00c fb75 	bl	8013e8c <iprintf>
        msg->conn->current_msg = msg;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fe05 	bl	80073c8 <lwip_netconn_do_writemore>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d044      	beq.n	800784e <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d006      	beq.n	80077dc <lwip_netconn_do_write+0xcc>
 80077ce:	4b22      	ldr	r3, [pc, #136]	; (8007858 <lwip_netconn_do_write+0x148>)
 80077d0:	f240 6289 	movw	r2, #1673	; 0x689
 80077d4:	4924      	ldr	r1, [pc, #144]	; (8007868 <lwip_netconn_do_write+0x158>)
 80077d6:	4822      	ldr	r0, [pc, #136]	; (8007860 <lwip_netconn_do_write+0x150>)
 80077d8:	f00c fb58 	bl	8013e8c <iprintf>
          UNLOCK_TCPIP_CORE();
 80077dc:	4823      	ldr	r0, [pc, #140]	; (800786c <lwip_netconn_do_write+0x15c>)
 80077de:	f00b fa66 	bl	8012cae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f00b f9bc 	bl	8012b68 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80077f0:	481e      	ldr	r0, [pc, #120]	; (800786c <lwip_netconn_do_write+0x15c>)
 80077f2:	f00b fa4d 	bl	8012c90 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d126      	bne.n	800784e <lwip_netconn_do_write+0x13e>
 8007800:	4b15      	ldr	r3, [pc, #84]	; (8007858 <lwip_netconn_do_write+0x148>)
 8007802:	f240 628d 	movw	r2, #1677	; 0x68d
 8007806:	4918      	ldr	r1, [pc, #96]	; (8007868 <lwip_netconn_do_write+0x158>)
 8007808:	4815      	ldr	r0, [pc, #84]	; (8007860 <lwip_netconn_do_write+0x150>)
 800780a:	f00c fb3f 	bl	8013e8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800780e:	e01e      	b.n	800784e <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	22f5      	movs	r2, #245	; 0xf5
 8007814:	711a      	strb	r2, [r3, #4]
 8007816:	e002      	b.n	800781e <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22fa      	movs	r2, #250	; 0xfa
 800781c:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d014      	beq.n	8007850 <lwip_netconn_do_write+0x140>
 8007826:	f00b fa75 	bl	8012d14 <sys_arch_protect>
 800782a:	60b8      	str	r0, [r7, #8]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007834:	f113 0f0c 	cmn.w	r3, #12
 8007838:	db05      	blt.n	8007846 <lwip_netconn_do_write+0x136>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007844:	721a      	strb	r2, [r3, #8]
 8007846:	68b8      	ldr	r0, [r7, #8]
 8007848:	f00b fa72 	bl	8012d30 <sys_arch_unprotect>
 800784c:	e000      	b.n	8007850 <lwip_netconn_do_write+0x140>
        return;
 800784e:	bf00      	nop
}
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	08014f58 	.word	0x08014f58
 800785c:	080152a0 	.word	0x080152a0
 8007860:	08014fb0 	.word	0x08014fb0
 8007864:	080153f4 	.word	0x080153f4
 8007868:	080152bc 	.word	0x080152bc
 800786c:	2000ce38 	.word	0x2000ce38

08007870 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d06c      	beq.n	8007960 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	7c1b      	ldrb	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e006      	b.n	80078ac <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	6852      	ldr	r2, [r2, #4]
 80078aa:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d021      	beq.n	8007904 <lwip_netconn_do_getaddr+0x94>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d144      	bne.n	800794e <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7c1b      	ldrb	r3, [r3, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	8a52      	ldrh	r2, [r2, #18]
 80078d8:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 80078da:	e044      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	7c1b      	ldrb	r3, [r3, #16]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d103      	bne.n	80078f4 <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	22f5      	movs	r2, #245	; 0xf5
 80078f0:	711a      	strb	r2, [r3, #4]
      break;
 80078f2:	e038      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	8a92      	ldrh	r2, [r2, #20]
 8007900:	801a      	strh	r2, [r3, #0]
      break;
 8007902:	e030      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10f      	bne.n	800792c <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	7d1b      	ldrb	r3, [r3, #20]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d103      	bne.n	800792c <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	22f5      	movs	r2, #245	; 0xf5
 8007928:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 800792a:	e01c      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	7c1b      	ldrb	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <lwip_netconn_do_getaddr+0xce>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	8adb      	ldrh	r3, [r3, #22]
 800793c:	e003      	b.n	8007946 <lwip_netconn_do_getaddr+0xd6>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	8b1b      	ldrh	r3, [r3, #24]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	68d2      	ldr	r2, [r2, #12]
 800794a:	8013      	strh	r3, [r2, #0]
      break;
 800794c:	e00b      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <lwip_netconn_do_getaddr+0x12c>)
 8007950:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007954:	4912      	ldr	r1, [pc, #72]	; (80079a0 <lwip_netconn_do_getaddr+0x130>)
 8007956:	4813      	ldr	r0, [pc, #76]	; (80079a4 <lwip_netconn_do_getaddr+0x134>)
 8007958:	f00c fa98 	bl	8013e8c <iprintf>
      break;
 800795c:	bf00      	nop
 800795e:	e002      	b.n	8007966 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	22f5      	movs	r2, #245	; 0xf5
 8007964:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d012      	beq.n	8007994 <lwip_netconn_do_getaddr+0x124>
 800796e:	f00b f9d1 	bl	8012d14 <sys_arch_protect>
 8007972:	60b8      	str	r0, [r7, #8]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800797c:	f113 0f0c 	cmn.w	r3, #12
 8007980:	db05      	blt.n	800798e <lwip_netconn_do_getaddr+0x11e>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800798c:	721a      	strb	r2, [r3, #8]
 800798e:	68b8      	ldr	r0, [r7, #8]
 8007990:	f00b f9ce 	bl	8012d30 <sys_arch_unprotect>
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	08014f58 	.word	0x08014f58
 80079a0:	08015408 	.word	0x08015408
 80079a4:	08014fb0 	.word	0x08014fb0

080079a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d06e      	beq.n	8007aa4 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d167      	bne.n	8007aa4 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d002      	beq.n	80079e2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80079dc:	7cfb      	ldrb	r3, [r7, #19]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d060      	beq.n	8007aa4 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80079e2:	7cfb      	ldrb	r3, [r7, #19]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d103      	bne.n	80079f0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	22f5      	movs	r2, #245	; 0xf5
 80079ec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80079ee:	e05c      	b.n	8007aaa <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 80079f0:	7cfb      	ldrb	r3, [r7, #19]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d103      	bne.n	80079fe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	22fb      	movs	r2, #251	; 0xfb
 80079fa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80079fc:	e055      	b.n	8007aaa <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	7a1b      	ldrb	r3, [r3, #8]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff f80a 	bl	8006a28 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <lwip_netconn_do_close+0x80>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d006      	beq.n	8007a36 <lwip_netconn_do_close+0x8e>
 8007a28:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <lwip_netconn_do_close+0x13c>)
 8007a2a:	f240 721c 	movw	r2, #1820	; 0x71c
 8007a2e:	492e      	ldr	r1, [pc, #184]	; (8007ae8 <lwip_netconn_do_close+0x140>)
 8007a30:	482e      	ldr	r0, [pc, #184]	; (8007aec <lwip_netconn_do_close+0x144>)
 8007a32:	f00c fa2b 	bl	8013e8c <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff f86b 	bl	8006b28 <lwip_netconn_do_close_internal>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d040      	beq.n	8007ada <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d006      	beq.n	8007a70 <lwip_netconn_do_close+0xc8>
 8007a62:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <lwip_netconn_do_close+0x13c>)
 8007a64:	f240 7221 	movw	r2, #1825	; 0x721
 8007a68:	4921      	ldr	r1, [pc, #132]	; (8007af0 <lwip_netconn_do_close+0x148>)
 8007a6a:	4820      	ldr	r0, [pc, #128]	; (8007aec <lwip_netconn_do_close+0x144>)
 8007a6c:	f00c fa0e 	bl	8013e8c <iprintf>
        UNLOCK_TCPIP_CORE();
 8007a70:	4820      	ldr	r0, [pc, #128]	; (8007af4 <lwip_netconn_do_close+0x14c>)
 8007a72:	f00b f91c 	bl	8012cae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f00b f872 	bl	8012b68 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007a84:	481b      	ldr	r0, [pc, #108]	; (8007af4 <lwip_netconn_do_close+0x14c>)
 8007a86:	f00b f903 	bl	8012c90 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d022      	beq.n	8007ada <lwip_netconn_do_close+0x132>
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <lwip_netconn_do_close+0x13c>)
 8007a96:	f240 7225 	movw	r2, #1829	; 0x725
 8007a9a:	4915      	ldr	r1, [pc, #84]	; (8007af0 <lwip_netconn_do_close+0x148>)
 8007a9c:	4813      	ldr	r0, [pc, #76]	; (8007aec <lwip_netconn_do_close+0x144>)
 8007a9e:	f00c f9f5 	bl	8013e8c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8007aa2:	e01a      	b.n	8007ada <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	22f5      	movs	r2, #245	; 0xf5
 8007aa8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d014      	beq.n	8007adc <lwip_netconn_do_close+0x134>
 8007ab2:	f00b f92f 	bl	8012d14 <sys_arch_protect>
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ac0:	f113 0f0c 	cmn.w	r3, #12
 8007ac4:	db05      	blt.n	8007ad2 <lwip_netconn_do_close+0x12a>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007ad0:	721a      	strb	r2, [r3, #8]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f00b f92c 	bl	8012d30 <sys_arch_unprotect>
 8007ad8:	e000      	b.n	8007adc <lwip_netconn_do_close+0x134>
      return;
 8007ada:	bf00      	nop
}
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08014f58 	.word	0x08014f58
 8007ae8:	080152a0 	.word	0x080152a0
 8007aec:	08014fb0 	.word	0x08014fb0
 8007af0:	080152bc 	.word	0x080152bc
 8007af4:	2000ce38 	.word	0x2000ce38

08007af8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dc04      	bgt.n	8007b14 <err_to_errno+0x1c>
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	425b      	negs	r3, r3
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	dd01      	ble.n	8007b18 <err_to_errno+0x20>
    return EIO;
 8007b14:	2305      	movs	r3, #5
 8007b16:	e005      	b.n	8007b24 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8007b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <err_to_errno+0x38>)
 8007b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	08017638 	.word	0x08017638

08007b34 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fb40 	bl	800a1d4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	2006      	movs	r0, #6
 8007b66:	f001 fddb 	bl	8009720 <memp_free>
  }
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <netbuf_free+0x1c>
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <netbuf_free+0x44>)
 8007b84:	2281      	movs	r2, #129	; 0x81
 8007b86:	490d      	ldr	r1, [pc, #52]	; (8007bbc <netbuf_free+0x48>)
 8007b88:	480d      	ldr	r0, [pc, #52]	; (8007bc0 <netbuf_free+0x4c>)
 8007b8a:	f00c f97f 	bl	8013e8c <iprintf>
 8007b8e:	e00f      	b.n	8007bb0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 fb19 	bl	800a1d4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	601a      	str	r2, [r3, #0]
}
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08015420 	.word	0x08015420
 8007bbc:	080154bc 	.word	0x080154bc
 8007bc0:	08015470 	.word	0x08015470

08007bc4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d108      	bne.n	8007bea <netbuf_ref+0x26>
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <netbuf_ref+0x88>)
 8007bda:	2295      	movs	r2, #149	; 0x95
 8007bdc:	491c      	ldr	r1, [pc, #112]	; (8007c50 <netbuf_ref+0x8c>)
 8007bde:	481d      	ldr	r0, [pc, #116]	; (8007c54 <netbuf_ref+0x90>)
 8007be0:	f00c f954 	bl	8013e8c <iprintf>
 8007be4:	f06f 030f 	mvn.w	r3, #15
 8007be8:	e02b      	b.n	8007c42 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 faec 	bl	800a1d4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2100      	movs	r1, #0
 8007c00:	2000      	movs	r0, #0
 8007c02:	f001 ff75 	bl	8009af0 <pbuf_alloc>
 8007c06:	4602      	mov	r2, r0
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	e010      	b.n	8007c42 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	811a      	strh	r2, [r3, #8]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	891b      	ldrh	r3, [r3, #8]
 8007c36:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08015420 	.word	0x08015420
 8007c50:	080154d8 	.word	0x080154d8
 8007c54:	08015470 	.word	0x08015470

08007c58 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	db02      	blt.n	8007c6c <get_socket+0x14>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	dd04      	ble.n	8007c76 <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <get_socket+0x50>)
 8007c6e:	2209      	movs	r2, #9
 8007c70:	601a      	str	r2, [r3, #0]
    return NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e011      	b.n	8007c9a <get_socket+0x42>
  }

  sock = &sockets[s];
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <get_socket+0x54>)
 8007c82:	4413      	add	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8007c8e:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <get_socket+0x50>)
 8007c90:	2209      	movs	r2, #9
 8007c92:	601a      	str	r2, [r3, #0]
    return NULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e000      	b.n	8007c9a <get_socket+0x42>
  }

  return sock;
 8007c98:	68fb      	ldr	r3, [r7, #12]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20010568 	.word	0x20010568
 8007cac:	2000c534 	.word	0x2000c534

08007cb0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e074      	b.n	8007daa <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8007cc0:	f00b f828 	bl	8012d14 <sys_arch_protect>
 8007cc4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8007cc6:	493d      	ldr	r1, [pc, #244]	; (8007dbc <alloc_socket+0x10c>)
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d161      	bne.n	8007d9e <alloc_socket+0xee>
 8007cda:	4938      	ldr	r1, [pc, #224]	; (8007dbc <alloc_socket+0x10c>)
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3311      	adds	r3, #17
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d156      	bne.n	8007d9e <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 8007cf0:	4932      	ldr	r1, [pc, #200]	; (8007dbc <alloc_socket+0x10c>)
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f00b f814 	bl	8012d30 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 8007d08:	492c      	ldr	r1, [pc, #176]	; (8007dbc <alloc_socket+0x10c>)
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	3304      	adds	r3, #4
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 8007d1c:	4927      	ldr	r1, [pc, #156]	; (8007dbc <alloc_socket+0x10c>)
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 8007d30:	4922      	ldr	r1, [pc, #136]	; (8007dbc <alloc_socket+0x10c>)
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	330a      	adds	r3, #10
 8007d40:	2200      	movs	r2, #0
 8007d42:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d102      	bne.n	8007d56 <alloc_socket+0xa6>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <alloc_socket+0xaa>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <alloc_socket+0xac>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	b298      	uxth	r0, r3
 8007d5e:	4917      	ldr	r1, [pc, #92]	; (8007dbc <alloc_socket+0x10c>)
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	4602      	mov	r2, r0
 8007d70:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8007d72:	4912      	ldr	r1, [pc, #72]	; (8007dbc <alloc_socket+0x10c>)
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	330e      	adds	r3, #14
 8007d82:	2200      	movs	r2, #0
 8007d84:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 8007d86:	490d      	ldr	r1, [pc, #52]	; (8007dbc <alloc_socket+0x10c>)
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3310      	adds	r3, #16
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	e00a      	b.n	8007db4 <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	f00a ffc6 	bl	8012d30 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	dd87      	ble.n	8007cc0 <alloc_socket+0x10>
  }
  return -1;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	2000c534 	.word	0x2000c534

08007dc0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  void *lastdata;

  lastdata         = sock->lastdata;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	60fb      	str	r3, [r7, #12]
  sock->lastdata   = NULL;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	605a      	str	r2, [r3, #4]
  sock->lastoffset = 0;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	811a      	strh	r2, [r3, #8]
  sock->err        = 0;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	741a      	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
 8007de2:	f00a ff97 	bl	8012d14 <sys_arch_protect>
 8007de6:	60b8      	str	r0, [r7, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	68b8      	ldr	r0, [r7, #8]
 8007df0:	f00a ff9e 	bl	8012d30 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <free_socket+0x4e>
    if (is_tcp) {
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <free_socket+0x48>
      pbuf_free((struct pbuf *)lastdata);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f002 f9e7 	bl	800a1d4 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 8007e06:	e002      	b.n	8007e0e <free_socket+0x4e>
      netbuf_delete((struct netbuf *)lastdata);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff fe93 	bl	8007b34 <netbuf_delete>
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b097      	sub	sp, #92	; 0x5c
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	847b      	strh	r3, [r7, #34]	; 0x22
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff ff15 	bl	8007c58 <get_socket>
 8007e2e:	6578      	str	r0, [r7, #84]	; 0x54
  if (!sock) {
 8007e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <lwip_accept+0x24>
    return -1;
 8007e36:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3a:	e129      	b.n	8008090 <lwip_accept+0x278>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 8007e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	7f1b      	ldrb	r3, [r3, #28]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <lwip_accept+0x48>
 8007e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dc05      	bgt.n	8007e60 <lwip_accept+0x48>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
 8007e54:	4b90      	ldr	r3, [pc, #576]	; (8008098 <lwip_accept+0x280>)
 8007e56:	220b      	movs	r2, #11
 8007e58:	601a      	str	r2, [r3, #0]
    return -1;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	e117      	b.n	8008090 <lwip_accept+0x278>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8007e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fd fe50 	bl	8005b10 <netconn_accept>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (err != ERR_OK) {
 8007e76:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d038      	beq.n	8007ef0 <lwip_accept+0xd8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8007e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d00c      	beq.n	8007ea6 <lwip_accept+0x8e>
      sock_set_errno(sock, EOPNOTSUPP);
 8007e8c:	235f      	movs	r3, #95	; 0x5f
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e96:	741a      	strb	r2, [r3, #16]
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d025      	beq.n	8007eea <lwip_accept+0xd2>
 8007e9e:	4a7e      	ldr	r2, [pc, #504]	; (8008098 <lwip_accept+0x280>)
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	e021      	b.n	8007eea <lwip_accept+0xd2>
    } else if (err == ERR_CLSD) {
 8007ea6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007eaa:	f113 0f0f 	cmn.w	r3, #15
 8007eae:	d10c      	bne.n	8007eca <lwip_accept+0xb2>
      sock_set_errno(sock, EINVAL);
 8007eb0:	2316      	movs	r3, #22
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eba:	741a      	strb	r2, [r3, #16]
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d013      	beq.n	8007eea <lwip_accept+0xd2>
 8007ec2:	4a75      	ldr	r2, [pc, #468]	; (8008098 <lwip_accept+0x280>)
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	e00f      	b.n	8007eea <lwip_accept+0xd2>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8007eca:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fe12 	bl	8007af8 <err_to_errno>
 8007ed4:	6378      	str	r0, [r7, #52]	; 0x34
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007edc:	741a      	strb	r2, [r3, #16]
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <lwip_accept+0xd2>
 8007ee4:	4a6c      	ldr	r2, [pc, #432]	; (8008098 <lwip_accept+0x280>)
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	6013      	str	r3, [r2, #0]
    }
    return -1;
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	e0cf      	b.n	8008090 <lwip_accept+0x278>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <lwip_accept+0xec>
 8007ef6:	4b69      	ldr	r3, [pc, #420]	; (800809c <lwip_accept+0x284>)
 8007ef8:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007efc:	4968      	ldr	r1, [pc, #416]	; (80080a0 <lwip_accept+0x288>)
 8007efe:	4869      	ldr	r0, [pc, #420]	; (80080a4 <lwip_accept+0x28c>)
 8007f00:	f00b ffc4 	bl	8013e8c <iprintf>

  newsock = alloc_socket(newconn, 1);
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fed1 	bl	8007cb0 <alloc_socket>
 8007f0e:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (newsock == -1) {
 8007f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d112      	bne.n	8007f3e <lwip_accept+0x126>
    netconn_delete(newconn);
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd fd1e 	bl	800595c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8007f20:	2317      	movs	r3, #23
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f2a:	741a      	strb	r2, [r3, #16]
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <lwip_accept+0x120>
 8007f32:	4a59      	ldr	r2, [pc, #356]	; (8008098 <lwip_accept+0x280>)
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	6013      	str	r3, [r2, #0]
    return -1;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	e0a8      	b.n	8008090 <lwip_accept+0x278>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	db02      	blt.n	8007f4a <lwip_accept+0x132>
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	dd06      	ble.n	8007f58 <lwip_accept+0x140>
 8007f4a:	4b54      	ldr	r3, [pc, #336]	; (800809c <lwip_accept+0x284>)
 8007f4c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8007f50:	4955      	ldr	r1, [pc, #340]	; (80080a8 <lwip_accept+0x290>)
 8007f52:	4854      	ldr	r0, [pc, #336]	; (80080a4 <lwip_accept+0x28c>)
 8007f54:	f00b ff9a 	bl	8013e8c <iprintf>
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	4a53      	ldr	r2, [pc, #332]	; (80080ac <lwip_accept+0x294>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d006      	beq.n	8007f70 <lwip_accept+0x158>
 8007f62:	4b4e      	ldr	r3, [pc, #312]	; (800809c <lwip_accept+0x284>)
 8007f64:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8007f68:	4951      	ldr	r1, [pc, #324]	; (80080b0 <lwip_accept+0x298>)
 8007f6a:	484e      	ldr	r0, [pc, #312]	; (80080a4 <lwip_accept+0x28c>)
 8007f6c:	f00b ff8e 	bl	8013e8c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8007f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a4e      	ldr	r2, [pc, #312]	; (80080b4 <lwip_accept+0x29c>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8007f80:	f00a fec8 	bl	8012d14 <sys_arch_protect>
 8007f84:	6478      	str	r0, [r7, #68]	; 0x44
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	b21a      	sxth	r2, r3
 8007f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa0:	815a      	strh	r2, [r3, #10]
  newconn->socket = newsock;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fa6:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8007fa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007faa:	f00a fec1 	bl	8012d30 <sys_arch_unprotect>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d060      	beq.n	8008076 <lwip_accept+0x25e>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8007fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8007fba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f7fd fcf2 	bl	80059a8 <netconn_getaddr>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (err != ERR_OK) {
 8007fca:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01a      	beq.n	8008008 <lwip_accept+0x1f0>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fcc1 	bl	800595c <netconn_delete>
      free_socket(nsock, 1);
 8007fda:	2101      	movs	r1, #1
 8007fdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007fde:	f7ff feef 	bl	8007dc0 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8007fe2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff fd86 	bl	8007af8 <err_to_errno>
 8007fec:	6438      	str	r0, [r7, #64]	; 0x40
 8007fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff4:	741a      	strb	r2, [r3, #16]
 8007ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <lwip_accept+0x1ea>
 8007ffc:	4a26      	ldr	r2, [pc, #152]	; (8008098 <lwip_accept+0x280>)
 8007ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008000:	6013      	str	r3, [r2, #0]
      return -1;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	e043      	b.n	8008090 <lwip_accept+0x278>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <lwip_accept+0x204>
 800800e:	4b23      	ldr	r3, [pc, #140]	; (800809c <lwip_accept+0x284>)
 8008010:	f240 2219 	movw	r2, #537	; 0x219
 8008014:	4928      	ldr	r1, [pc, #160]	; (80080b8 <lwip_accept+0x2a0>)
 8008016:	4823      	ldr	r0, [pc, #140]	; (80080a4 <lwip_accept+0x28c>)
 8008018:	f00b ff38 	bl	8013e8c <iprintf>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800801c:	f107 0310 	add.w	r3, r7, #16
 8008020:	2210      	movs	r2, #16
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	2202      	movs	r2, #2
 800802a:	705a      	strb	r2, [r3, #1]
 800802c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800802e:	f107 0410 	add.w	r4, r7, #16
 8008032:	4618      	mov	r0, r3
 8008034:	f000 ff34 	bl	8008ea0 <lwip_htons>
 8008038:	4603      	mov	r3, r0
 800803a:	8063      	strh	r3, [r4, #2]
 800803c:	f107 0310 	add.w	r3, r7, #16
 8008040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	f107 0310 	add.w	r3, r7, #16
 8008048:	3308      	adds	r3, #8
 800804a:	2208      	movs	r2, #8
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f00b ff14 	bl	8013e7c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	7c3a      	ldrb	r2, [r7, #16]
 800805a:	4293      	cmp	r3, r2
 800805c:	d903      	bls.n	8008066 <lwip_accept+0x24e>
      *addrlen = tempaddr.sa.sa_len;
 800805e:	7c3b      	ldrb	r3, [r7, #16]
 8008060:	461a      	mov	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	f107 0310 	add.w	r3, r7, #16
 800806e:	4619      	mov	r1, r3
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	f00b fef8 	bl	8013e66 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	b2da      	uxtb	r2, r3
 800807e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008080:	741a      	strb	r2, [r3, #16]
 8008082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <lwip_accept+0x276>
 8008088:	4a03      	ldr	r2, [pc, #12]	; (8008098 <lwip_accept+0x280>)
 800808a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808c:	6013      	str	r3, [r2, #0]
  return newsock;
 800808e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8008090:	4618      	mov	r0, r3
 8008092:	375c      	adds	r7, #92	; 0x5c
 8008094:	46bd      	mov	sp, r7
 8008096:	bd90      	pop	{r4, r7, pc}
 8008098:	20010568 	.word	0x20010568
 800809c:	080155b8 	.word	0x080155b8
 80080a0:	080155ec 	.word	0x080155ec
 80080a4:	080155fc 	.word	0x080155fc
 80080a8:	08015624 	.word	0x08015624
 80080ac:	080089a5 	.word	0x080089a5
 80080b0:	0801563c 	.word	0x0801563c
 80080b4:	2000c534 	.word	0x2000c534
 80080b8:	08015660 	.word	0x08015660

080080bc <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fdc5 	bl	8007c58 <get_socket>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <lwip_bind+0x20>
    return -1;
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295
 80080da:	e05d      	b.n	8008198 <lwip_bind+0xdc>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b10      	cmp	r3, #16
 80080e0:	d108      	bne.n	80080f4 <lwip_bind+0x38>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d104      	bne.n	80080f4 <lwip_bind+0x38>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d018      	beq.n	8008126 <lwip_bind+0x6a>
 80080f4:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <lwip_bind+0xe4>)
 80080f6:	f240 2242 	movw	r2, #578	; 0x242
 80080fa:	492a      	ldr	r1, [pc, #168]	; (80081a4 <lwip_bind+0xe8>)
 80080fc:	482a      	ldr	r0, [pc, #168]	; (80081a8 <lwip_bind+0xec>)
 80080fe:	f00b fec5 	bl	8013e8c <iprintf>
 8008102:	f06f 000f 	mvn.w	r0, #15
 8008106:	f7ff fcf7 	bl	8007af8 <err_to_errno>
 800810a:	6178      	str	r0, [r7, #20]
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	b2da      	uxtb	r2, r3
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	741a      	strb	r2, [r3, #16]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <lwip_bind+0x64>
 800811a:	4a24      	ldr	r2, [pc, #144]	; (80081ac <lwip_bind+0xf0>)
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	e038      	b.n	8008198 <lwip_bind+0xdc>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	885b      	ldrh	r3, [r3, #2]
 8008130:	4618      	mov	r0, r3
 8008132:	f000 feb5 	bl	8008ea0 <lwip_htons>
 8008136:	4603      	mov	r3, r0
 8008138:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008140:	f107 0110 	add.w	r1, r7, #16
 8008144:	4618      	mov	r0, r3
 8008146:	f7fd fc7f 	bl	8005a48 <netconn_bind>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8008150:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008154:	2b00      	cmp	r3, #0
 8008156:	d012      	beq.n	800817e <lwip_bind+0xc2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8008158:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fccb 	bl	8007af8 <err_to_errno>
 8008162:	61b8      	str	r0, [r7, #24]
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	741a      	strb	r2, [r3, #16]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <lwip_bind+0xbc>
 8008172:	4a0e      	ldr	r2, [pc, #56]	; (80081ac <lwip_bind+0xf0>)
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6013      	str	r3, [r2, #0]
    return -1;
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	e00c      	b.n	8008198 <lwip_bind+0xdc>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	b2da      	uxtb	r2, r3
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	741a      	strb	r2, [r3, #16]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <lwip_bind+0xda>
 8008190:	4a06      	ldr	r2, [pc, #24]	; (80081ac <lwip_bind+0xf0>)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	6013      	str	r3, [r2, #0]
  return 0;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3728      	adds	r7, #40	; 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	080155b8 	.word	0x080155b8
 80081a4:	0801567c 	.word	0x0801567c
 80081a8:	080155fc 	.word	0x080155fc
 80081ac:	20010568 	.word	0x20010568

080081b0 <lwip_close>:

int
lwip_close(int s)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fd4b 	bl	8007c58 <get_socket>
 80081c2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <lwip_close+0x20>
    return -1;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	e03d      	b.n	800824c <lwip_close+0x9c>
  }

  if (sock->conn != NULL) {
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081e2:	2b10      	cmp	r3, #16
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	e00a      	b.n	8008206 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d006      	beq.n	8008206 <lwip_close+0x56>
 80081f8:	4b16      	ldr	r3, [pc, #88]	; (8008254 <lwip_close+0xa4>)
 80081fa:	f44f 721c 	mov.w	r2, #624	; 0x270
 80081fe:	4916      	ldr	r1, [pc, #88]	; (8008258 <lwip_close+0xa8>)
 8008200:	4816      	ldr	r0, [pc, #88]	; (800825c <lwip_close+0xac>)
 8008202:	f00b fe43 	bl	8013e8c <iprintf>
#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7fd fba6 	bl	800595c <netconn_delete>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d012      	beq.n	8008242 <lwip_close+0x92>
    sock_set_errno(sock, err_to_errno(err));
 800821c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fc69 	bl	8007af8 <err_to_errno>
 8008226:	60b8      	str	r0, [r7, #8]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	741a      	strb	r2, [r3, #16]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <lwip_close+0x8c>
 8008236:	4a0a      	ldr	r2, [pc, #40]	; (8008260 <lwip_close+0xb0>)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6013      	str	r3, [r2, #0]
    return -1;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	e004      	b.n	800824c <lwip_close+0x9c>
  }

  free_socket(sock, is_tcp);
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	6938      	ldr	r0, [r7, #16]
 8008246:	f7ff fdbb 	bl	8007dc0 <free_socket>
  set_errno(0);
  return 0;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	080155b8 	.word	0x080155b8
 8008258:	08015698 	.word	0x08015698
 800825c:	080155fc 	.word	0x080155fc
 8008260:	20010568 	.word	0x20010568

08008264 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fcf2 	bl	8007c58 <get_socket>
 8008274:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <lwip_listen+0x1e>
    return -1;
 800827c:	f04f 33ff 	mov.w	r3, #4294967295
 8008280:	e04c      	b.n	800831c <lwip_listen+0xb8>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2bfe      	cmp	r3, #254	; 0xfe
 8008286:	dc03      	bgt.n	8008290 <lwip_listen+0x2c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800828e:	e000      	b.n	8008292 <lwip_listen+0x2e>
 8008290:	23ff      	movs	r3, #255	; 0xff
 8008292:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd fc0a 	bl	8005ab8 <netconn_listen_with_backlog>
 80082a4:	4603      	mov	r3, r0
 80082a6:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 80082a8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d028      	beq.n	8008302 <lwip_listen+0x9e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d00e      	beq.n	80082dc <lwip_listen+0x78>
      sock_set_errno(sock, EOPNOTSUPP);
 80082be:	235f      	movs	r3, #95	; 0x5f
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	741a      	strb	r2, [r3, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <lwip_listen+0x72>
 80082d0:	4a14      	ldr	r2, [pc, #80]	; (8008324 <lwip_listen+0xc0>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6013      	str	r3, [r2, #0]
      return -1;
 80082d6:	f04f 33ff 	mov.w	r3, #4294967295
 80082da:	e01f      	b.n	800831c <lwip_listen+0xb8>
    }
    sock_set_errno(sock, err_to_errno(err));
 80082dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fc09 	bl	8007af8 <err_to_errno>
 80082e6:	6138      	str	r0, [r7, #16]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	741a      	strb	r2, [r3, #16]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <lwip_listen+0x98>
 80082f6:	4a0b      	ldr	r2, [pc, #44]	; (8008324 <lwip_listen+0xc0>)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6013      	str	r3, [r2, #0]
    return -1;
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	e00c      	b.n	800831c <lwip_listen+0xb8>
  }

  sock_set_errno(sock, 0);
 8008302:	2300      	movs	r3, #0
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	741a      	strb	r2, [r3, #16]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <lwip_listen+0xb6>
 8008314:	4a03      	ldr	r2, [pc, #12]	; (8008324 <lwip_listen+0xc0>)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6013      	str	r3, [r2, #0]
  return 0;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3720      	adds	r7, #32
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20010568 	.word	0x20010568

08008328 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b097      	sub	sp, #92	; 0x5c
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	64fb      	str	r3, [r7, #76]	; 0x4c
  u8_t             done = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fc87 	bl	8007c58 <get_socket>
 800834a:	6438      	str	r0, [r7, #64]	; 0x40
  if (!sock) {
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <lwip_recvfrom+0x30>
    return -1;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	e199      	b.n	800868c <lwip_recvfrom+0x364>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 8008358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 8008360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
 8008366:	e08d      	b.n	8008484 <lwip_recvfrom+0x15c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <lwip_recvfrom+0x58>
 8008372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	7f1b      	ldrb	r3, [r3, #28]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <lwip_recvfrom+0x90>
          (sock->rcvevent <= 0)) {
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008386:	2b00      	cmp	r3, #0
 8008388:	dc16      	bgt.n	80083b8 <lwip_recvfrom+0x90>
        if (off > 0) {
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd0d      	ble.n	80083ac <lwip_recvfrom+0x84>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	b2da      	uxtb	r2, r3
 8008398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800839a:	741a      	strb	r2, [r3, #16]
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <lwip_recvfrom+0x80>
 80083a2:	4aa9      	ldr	r2, [pc, #676]	; (8008648 <lwip_recvfrom+0x320>)
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	6013      	str	r3, [r2, #0]
          return off;
 80083a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083aa:	e16f      	b.n	800868c <lwip_recvfrom+0x364>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 80083ac:	4ba6      	ldr	r3, [pc, #664]	; (8008648 <lwip_recvfrom+0x320>)
 80083ae:	220b      	movs	r2, #11
 80083b0:	601a      	str	r2, [r3, #0]
        return -1;
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295
 80083b6:	e169      	b.n	800868c <lwip_recvfrom+0x364>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80083b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d10b      	bne.n	80083de <lwip_recvfrom+0xb6>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 80083c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd fceb 	bl	8005dac <netconn_recv_tcp_pbuf>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80083dc:	e00a      	b.n	80083f4 <lwip_recvfrom+0xcc>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 80083de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083e6:	4611      	mov	r1, r2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fd07 	bl	8005dfc <netconn_recv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 80083f4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d036      	beq.n	800846a <lwip_recvfrom+0x142>
        if (off > 0) {
 80083fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd19      	ble.n	8008436 <lwip_recvfrom+0x10e>
          if (err == ERR_CLSD) {
 8008402:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8008406:	f113 0f0f 	cmn.w	r3, #15
 800840a:	d106      	bne.n	800841a <lwip_recvfrom+0xf2>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 800840c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fac5 	bl	80089a4 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800841a:	2300      	movs	r3, #0
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	b2da      	uxtb	r2, r3
 8008422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008424:	741a      	strb	r2, [r3, #16]
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <lwip_recvfrom+0x10a>
 800842c:	4a86      	ldr	r2, [pc, #536]	; (8008648 <lwip_recvfrom+0x320>)
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	6013      	str	r3, [r2, #0]
          return off;
 8008432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008434:	e12a      	b.n	800868c <lwip_recvfrom+0x364>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8008436:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fb5c 	bl	8007af8 <err_to_errno>
 8008440:	63b8      	str	r0, [r7, #56]	; 0x38
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	b2da      	uxtb	r2, r3
 8008446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008448:	741a      	strb	r2, [r3, #16]
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <lwip_recvfrom+0x12e>
 8008450:	4a7d      	ldr	r2, [pc, #500]	; (8008648 <lwip_recvfrom+0x320>)
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8008456:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800845a:	f113 0f0f 	cmn.w	r3, #15
 800845e:	d101      	bne.n	8008464 <lwip_recvfrom+0x13c>
          return 0;
 8008460:	2300      	movs	r3, #0
 8008462:	e113      	b.n	800868c <lwip_recvfrom+0x364>
        } else {
          return -1;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
 8008468:	e110      	b.n	800868c <lwip_recvfrom+0x364>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d106      	bne.n	800847e <lwip_recvfrom+0x156>
 8008470:	4b76      	ldr	r3, [pc, #472]	; (800864c <lwip_recvfrom+0x324>)
 8008472:	f240 3227 	movw	r2, #807	; 0x327
 8008476:	4976      	ldr	r1, [pc, #472]	; (8008650 <lwip_recvfrom+0x328>)
 8008478:	4876      	ldr	r0, [pc, #472]	; (8008654 <lwip_recvfrom+0x32c>)
 800847a:	f00b fd07 	bl	8013e8c <iprintf>
      sock->lastdata = buf;
 800847e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008482:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800848e:	2b10      	cmp	r3, #16
 8008490:	d102      	bne.n	8008498 <lwip_recvfrom+0x170>
      p = (struct pbuf *)buf;
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	657b      	str	r3, [r7, #84]	; 0x54
 8008496:	e002      	b.n	800849e <lwip_recvfrom+0x176>
    } else {
      p = ((struct netbuf *)buf)->p;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	657b      	str	r3, [r7, #84]	; 0x54
    }
    buflen = p->tot_len;
 800849e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a0:	891b      	ldrh	r3, [r3, #8]
 80084a2:	867b      	strh	r3, [r7, #50]	; 0x32
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 80084a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a6:	891b      	ldrh	r3, [r3, #8]
 80084a8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	867b      	strh	r3, [r7, #50]	; 0x32

    if (len > buflen) {
 80084ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d903      	bls.n	80084be <lwip_recvfrom+0x196>
      copylen = buflen;
 80084b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80084b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80084bc:	e002      	b.n	80084c4 <lwip_recvfrom+0x19c>
    } else {
      copylen = (u16_t)len;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 80084c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	18d1      	adds	r1, r2, r3
 80084ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084cc:	891b      	ldrh	r3, [r3, #8]
 80084ce:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80084d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80084d4:	f002 f88a 	bl	800a5ec <pbuf_copy_partial>

    off += copylen;
 80084d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80084dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084de:	4413      	add	r3, r2
 80084e0:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80084e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d127      	bne.n	8008540 <lwip_recvfrom+0x218>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 80084f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d206      	bcs.n	8008508 <lwip_recvfrom+0x1e0>
 80084fa:	4b54      	ldr	r3, [pc, #336]	; (800864c <lwip_recvfrom+0x324>)
 80084fc:	f240 3243 	movw	r2, #835	; 0x343
 8008500:	4955      	ldr	r1, [pc, #340]	; (8008658 <lwip_recvfrom+0x330>)
 8008502:	4854      	ldr	r0, [pc, #336]	; (8008654 <lwip_recvfrom+0x32c>)
 8008504:	f00b fcc2 	bl	8013e8c <iprintf>
      len -= copylen;
 8008508:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00f      	beq.n	8008538 <lwip_recvfrom+0x210>
          (p->flags & PBUF_FLAG_PUSH) ||
 8008518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851a:	7b5b      	ldrb	r3, [r3, #13]
 800851c:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <lwip_recvfrom+0x210>
          (sock->rcvevent <= 0) ||
 8008524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008526:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 800852a:	2b00      	cmp	r3, #0
 800852c:	dd04      	ble.n	8008538 <lwip_recvfrom+0x210>
          ((flags & MSG_PEEK) != 0)) {
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <lwip_recvfrom+0x21e>
        done = 1;
 8008538:	2301      	movs	r3, #1
 800853a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800853e:	e002      	b.n	8008546 <lwip_recvfrom+0x21e>
      }
    } else {
      done = 1;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 8008546:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800854a:	2b00      	cmp	r3, #0
 800854c:	d04c      	beq.n	80085e8 <lwip_recvfrom+0x2c0>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800854e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008550:	2b00      	cmp	r3, #0
 8008552:	d049      	beq.n	80085e8 <lwip_recvfrom+0x2c0>
 8008554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d046      	beq.n	80085e8 <lwip_recvfrom+0x2c0>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800855a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008564:	2b10      	cmp	r3, #16
 8008566:	d10b      	bne.n	8008580 <lwip_recvfrom+0x258>
          fromaddr = &tmpaddr;
 8008568:	f107 0320 	add.w	r3, r7, #32
 800856c:	647b      	str	r3, [r7, #68]	; 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800856e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8008576:	2300      	movs	r3, #0
 8008578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800857a:	f7fd fa15 	bl	80059a8 <netconn_getaddr>
 800857e:	e005      	b.n	800858c <lwip_recvfrom+0x264>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	899b      	ldrh	r3, [r3, #12]
 8008584:	84fb      	strh	r3, [r7, #38]	; 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	3308      	adds	r3, #8
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	2210      	movs	r2, #16
 8008592:	701a      	strb	r2, [r3, #0]
 8008594:	f107 0310 	add.w	r3, r7, #16
 8008598:	2202      	movs	r2, #2
 800859a:	705a      	strb	r2, [r3, #1]
 800859c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800859e:	f107 0410 	add.w	r4, r7, #16
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fc7c 	bl	8008ea0 <lwip_htons>
 80085a8:	4603      	mov	r3, r0
 80085aa:	8063      	strh	r3, [r4, #2]
 80085ac:	f107 0310 	add.w	r3, r7, #16
 80085b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	3308      	adds	r3, #8
 80085bc:	2208      	movs	r2, #8
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f00b fc5b 	bl	8013e7c <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 80085c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	7c3a      	ldrb	r2, [r7, #16]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d903      	bls.n	80085d8 <lwip_recvfrom+0x2b0>
            *fromlen = saddr.sa.sa_len;
 80085d0:	7c3b      	ldrb	r3, [r7, #16]
 80085d2:	461a      	mov	r2, r3
 80085d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d6:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 80085d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	f107 0310 	add.w	r3, r7, #16
 80085e0:	4619      	mov	r1, r3
 80085e2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80085e4:	f00b fc3f 	bl	8013e66 <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d13a      	bne.n	8008668 <lwip_recvfrom+0x340>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 80085f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d111      	bne.n	8008624 <lwip_recvfrom+0x2fc>
 8008600:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008602:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	dd0b      	ble.n	8008624 <lwip_recvfrom+0x2fc>
        sock->lastdata = buf;
 800860c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800860e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008610:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 8008612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800861a:	4413      	add	r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008620:	811a      	strh	r2, [r3, #8]
 8008622:	e021      	b.n	8008668 <lwip_recvfrom+0x340>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 8008624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008626:	2200      	movs	r2, #0
 8008628:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 800862a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862c:	2200      	movs	r2, #0
 800862e:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800863a:	2b10      	cmp	r3, #16
 800863c:	d10e      	bne.n	800865c <lwip_recvfrom+0x334>
          pbuf_free((struct pbuf *)buf);
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fdc7 	bl	800a1d4 <pbuf_free>
 8008646:	e00d      	b.n	8008664 <lwip_recvfrom+0x33c>
 8008648:	20010568 	.word	0x20010568
 800864c:	080155b8 	.word	0x080155b8
 8008650:	080156d0 	.word	0x080156d0
 8008654:	080155fc 	.word	0x080155fc
 8008658:	080156dc 	.word	0x080156dc
        } else {
          netbuf_delete((struct netbuf *)buf);
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fa68 	bl	8007b34 <netbuf_delete>
        }
        buf = NULL;
 8008664:	2300      	movs	r3, #0
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  } while (!done);
 8008668:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800866c:	2b00      	cmp	r3, #0
 800866e:	f43f ae73 	beq.w	8008358 <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 8008672:	2300      	movs	r3, #0
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	b2da      	uxtb	r2, r3
 800867a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867c:	741a      	strb	r2, [r3, #16]
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <lwip_recvfrom+0x362>
 8008684:	4a03      	ldr	r2, [pc, #12]	; (8008694 <lwip_recvfrom+0x36c>)
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	6013      	str	r3, [r2, #0]
  return off;
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800868c:	4618      	mov	r0, r3
 800868e:	375c      	adds	r7, #92	; 0x5c
 8008690:	46bd      	mov	sp, r7
 8008692:	bd90      	pop	{r4, r7, pc}
 8008694:	20010568 	.word	0x20010568

08008698 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af02      	add	r7, sp, #8
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 80086a6:	2300      	movs	r3, #0
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff fe37 	bl	8008328 <lwip_recvfrom>
 80086ba:	4603      	mov	r3, r0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08a      	sub	sp, #40	; 0x28
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff fac0 	bl	8007c58 <get_socket>
 80086d8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <lwip_send+0x22>
    return -1;
 80086e0:	f04f 33ff 	mov.w	r3, #4294967295
 80086e4:	e04b      	b.n	800877e <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d00b      	beq.n	800870c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80086f4:	2300      	movs	r3, #0
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f842 	bl	800878c <lwip_sendto>
 8008708:	4603      	mov	r3, r0
 800870a:	e038      	b.n	800877e <lwip_send+0xba>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	10db      	asrs	r3, r3, #3
 8008710:	b25b      	sxtb	r3, r3
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	b25a      	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	105b      	asrs	r3, r3, #1
 8008722:	b25b      	sxtb	r3, r3
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	b25b      	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800872a:	4313      	orrs	r3, r2
 800872c:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800872e:	76fb      	strb	r3, [r7, #27]
  written = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	7efa      	ldrb	r2, [r7, #27]
 800873a:	f107 0310 	add.w	r3, r7, #16
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	4613      	mov	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	f7fd fbfd 	bl	8005f44 <netconn_write_partly>
 800874a:	4603      	mov	r3, r0
 800874c:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800874e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff f9d0 	bl	8007af8 <err_to_errno>
 8008758:	6178      	str	r0, [r7, #20]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	b2da      	uxtb	r2, r3
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	741a      	strb	r2, [r3, #16]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <lwip_send+0xaa>
 8008768:	4a07      	ldr	r2, [pc, #28]	; (8008788 <lwip_send+0xc4>)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 800876e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <lwip_send+0xb6>
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	e001      	b.n	800877e <lwip_send+0xba>
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800877e:	4618      	mov	r0, r3
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20010568 	.word	0x20010568

0800878c <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	; 0x38
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff fa5c 	bl	8007c58 <get_socket>
 80087a0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <lwip_sendto+0x22>
    return -1;
 80087a8:	f04f 33ff 	mov.w	r3, #4294967295
 80087ac:	e094      	b.n	80088d8 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d107      	bne.n	80087cc <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff ff7e 	bl	80086c4 <lwip_send>
 80087c8:	4603      	mov	r3, r0
 80087ca:	e085      	b.n	80088d8 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d2:	d306      	bcc.n	80087e2 <lwip_sendto+0x56>
 80087d4:	4b42      	ldr	r3, [pc, #264]	; (80088e0 <lwip_sendto+0x154>)
 80087d6:	f240 427b 	movw	r2, #1147	; 0x47b
 80087da:	4942      	ldr	r1, [pc, #264]	; (80088e4 <lwip_sendto+0x158>)
 80087dc:	4842      	ldr	r0, [pc, #264]	; (80088e8 <lwip_sendto+0x15c>)
 80087de:	f00b fb55 	bl	8013e8c <iprintf>
  short_size = (u16_t)size;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80087e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d102      	bne.n	80087f2 <lwip_sendto+0x66>
 80087ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d024      	beq.n	800883c <lwip_sendto+0xb0>
 80087f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d108      	bne.n	800880a <lwip_sendto+0x7e>
 80087f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d104      	bne.n	800880a <lwip_sendto+0x7e>
 8008800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d018      	beq.n	800883c <lwip_sendto+0xb0>
 800880a:	4b35      	ldr	r3, [pc, #212]	; (80088e0 <lwip_sendto+0x154>)
 800880c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8008810:	4936      	ldr	r1, [pc, #216]	; (80088ec <lwip_sendto+0x160>)
 8008812:	4835      	ldr	r0, [pc, #212]	; (80088e8 <lwip_sendto+0x15c>)
 8008814:	f00b fb3a 	bl	8013e8c <iprintf>
 8008818:	f06f 000f 	mvn.w	r0, #15
 800881c:	f7ff f96c 	bl	8007af8 <err_to_errno>
 8008820:	62b8      	str	r0, [r7, #40]	; 0x28
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	b2da      	uxtb	r2, r3
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	741a      	strb	r2, [r3, #16]
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <lwip_sendto+0xaa>
 8008830:	4a2f      	ldr	r2, [pc, #188]	; (80088f0 <lwip_sendto+0x164>)
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	f04f 33ff 	mov.w	r3, #4294967295
 800883a:	e04d      	b.n	80088d8 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8008844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800884a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	61fb      	str	r3, [r7, #28]
 8008850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fb23 	bl	8008ea0 <lwip_htons>
 800885a:	4603      	mov	r3, r0
 800885c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800885e:	e003      	b.n	8008868 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8008868:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800886a:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800886c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff f9a5 	bl	8007bc4 <netbuf_ref>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8008880:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f107 0214 	add.w	r2, r7, #20
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fd fb2a 	bl	8005eec <netconn_send>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800889e:	f107 0314 	add.w	r3, r7, #20
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff f966 	bl	8007b74 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 80088a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff f923 	bl	8007af8 <err_to_errno>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	741a      	strb	r2, [r3, #16]
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <lwip_sendto+0x13c>
 80088c2:	4a0b      	ldr	r2, [pc, #44]	; (80088f0 <lwip_sendto+0x164>)
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 80088c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <lwip_sendto+0x148>
 80088d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088d2:	e001      	b.n	80088d8 <lwip_sendto+0x14c>
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3738      	adds	r7, #56	; 0x38
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	080155b8 	.word	0x080155b8
 80088e4:	0801577c 	.word	0x0801577c
 80088e8:	080155fc 	.word	0x080155fc
 80088ec:	080157a0 	.word	0x080157a0
 80088f0:	20010568 	.word	0x20010568

080088f4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d00d      	beq.n	8008922 <lwip_socket+0x2e>
 8008906:	2b03      	cmp	r3, #3
 8008908:	d002      	beq.n	8008910 <lwip_socket+0x1c>
 800890a:	2b01      	cmp	r3, #1
 800890c:	d016      	beq.n	800893c <lwip_socket+0x48>
 800890e:	e01c      	b.n	800894a <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	4a21      	ldr	r2, [pc, #132]	; (800899c <lwip_socket+0xa8>)
 8008916:	4619      	mov	r1, r3
 8008918:	2040      	movs	r0, #64	; 0x40
 800891a:	f7fc ffa5 	bl	8005868 <netconn_new_with_proto_and_callback>
 800891e:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008920:	e019      	b.n	8008956 <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b88      	cmp	r3, #136	; 0x88
 8008926:	d101      	bne.n	800892c <lwip_socket+0x38>
 8008928:	2321      	movs	r3, #33	; 0x21
 800892a:	e000      	b.n	800892e <lwip_socket+0x3a>
 800892c:	2320      	movs	r3, #32
 800892e:	4a1b      	ldr	r2, [pc, #108]	; (800899c <lwip_socket+0xa8>)
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f7fc ff98 	bl	8005868 <netconn_new_with_proto_and_callback>
 8008938:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800893a:	e00c      	b.n	8008956 <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800893c:	4a17      	ldr	r2, [pc, #92]	; (800899c <lwip_socket+0xa8>)
 800893e:	2100      	movs	r1, #0
 8008940:	2010      	movs	r0, #16
 8008942:	f7fc ff91 	bl	8005868 <netconn_new_with_proto_and_callback>
 8008946:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008948:	e005      	b.n	8008956 <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 800894a:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <lwip_socket+0xac>)
 800894c:	2216      	movs	r2, #22
 800894e:	601a      	str	r2, [r3, #0]
    return -1;
 8008950:	f04f 33ff 	mov.w	r3, #4294967295
 8008954:	e01e      	b.n	8008994 <lwip_socket+0xa0>
  }

  if (!conn) {
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800895c:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <lwip_socket+0xac>)
 800895e:	2269      	movs	r2, #105	; 0x69
 8008960:	601a      	str	r2, [r3, #0]
    return -1;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295
 8008966:	e015      	b.n	8008994 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8008968:	2100      	movs	r1, #0
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	f7ff f9a0 	bl	8007cb0 <alloc_socket>
 8008970:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008978:	d108      	bne.n	800898c <lwip_socket+0x98>
    netconn_delete(conn);
 800897a:	6978      	ldr	r0, [r7, #20]
 800897c:	f7fc ffee 	bl	800595c <netconn_delete>
    set_errno(ENFILE);
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <lwip_socket+0xac>)
 8008982:	2217      	movs	r2, #23
 8008984:	601a      	str	r2, [r3, #0]
    return -1;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e003      	b.n	8008994 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008992:	693b      	ldr	r3, [r7, #16]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	080089a5 	.word	0x080089a5
 80089a0:	20010568 	.word	0x20010568

080089a4 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
 80089b0:	4613      	mov	r3, r2
 80089b2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 80eb 	beq.w	8008b92 <event_callback+0x1ee>
    s = conn->socket;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da18      	bge.n	80089fa <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80089c8:	f00a f9a4 	bl	8012d14 <sys_arch_protect>
 80089cc:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da0b      	bge.n	80089ee <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <event_callback+0x42>
          conn->socket--;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 80089e6:	6978      	ldr	r0, [r7, #20]
 80089e8:	f00a f9a2 	bl	8012d30 <sys_arch_unprotect>
        return;
 80089ec:	e0d4      	b.n	8008b98 <event_callback+0x1f4>
      }
      s = conn->socket;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f00a f99b 	bl	8012d30 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80089fa:	69f8      	ldr	r0, [r7, #28]
 80089fc:	f7ff f92c 	bl	8007c58 <get_socket>
 8008a00:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80c6 	beq.w	8008b96 <event_callback+0x1f2>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8008a0a:	f00a f983 	bl	8012d14 <sys_arch_protect>
 8008a0e:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d82c      	bhi.n	8008a70 <event_callback+0xcc>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <event_callback+0x78>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a31 	.word	0x08008a31
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a59 	.word	0x08008a59
 8008a28:	08008a61 	.word	0x08008a61
 8008a2c:	08008a69 	.word	0x08008a69
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3301      	adds	r3, #1
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	b21a      	sxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	815a      	strh	r2, [r3, #10]
      break;
 8008a42:	e01d      	b.n	8008a80 <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	b21a      	sxth	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	815a      	strh	r2, [r3, #10]
      break;
 8008a56:	e013      	b.n	8008a80 <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	819a      	strh	r2, [r3, #12]
      break;
 8008a5e:	e00f      	b.n	8008a80 <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	819a      	strh	r2, [r3, #12]
      break;
 8008a66:	e00b      	b.n	8008a80 <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	81da      	strh	r2, [r3, #14]
      break;
 8008a6e:	e007      	b.n	8008a80 <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 8008a70:	4b4b      	ldr	r3, [pc, #300]	; (8008ba0 <event_callback+0x1fc>)
 8008a72:	f240 625d 	movw	r2, #1629	; 0x65d
 8008a76:	494b      	ldr	r1, [pc, #300]	; (8008ba4 <event_callback+0x200>)
 8008a78:	484b      	ldr	r0, [pc, #300]	; (8008ba8 <event_callback+0x204>)
 8008a7a:	f00b fa07 	bl	8013e8c <iprintf>
      break;
 8008a7e:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	7c5b      	ldrb	r3, [r3, #17]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d103      	bne.n	8008a90 <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 8008a88:	6978      	ldr	r0, [r7, #20]
 8008a8a:	f00a f951 	bl	8012d30 <sys_arch_unprotect>
    return;
 8008a8e:	e083      	b.n	8008b98 <event_callback+0x1f4>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
 8008a90:	bf00      	nop
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008a92:	4b46      	ldr	r3, [pc, #280]	; (8008bac <event_callback+0x208>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	e074      	b.n	8008b84 <event_callback+0x1e0>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 8008a9a:	4b45      	ldr	r3, [pc, #276]	; (8008bb0 <event_callback+0x20c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d15e      	bne.n	8008b66 <event_callback+0x1c2>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dd14      	ble.n	8008ae0 <event_callback+0x13c>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <event_callback+0x13c>
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	0952      	lsrs	r2, r2, #5
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	f002 021f 	and.w	r2, r2, #31
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <event_callback+0x13c>
          do_signal = 1;
 8008adc:	2301      	movs	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	899b      	ldrh	r3, [r3, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d017      	beq.n	8008b18 <event_callback+0x174>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d114      	bne.n	8008b18 <event_callback+0x174>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <event_callback+0x174>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	0952      	lsrs	r2, r2, #5
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	f002 021f 	and.w	r2, r2, #31
 8008b08:	2101      	movs	r1, #1
 8008b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <event_callback+0x174>
          do_signal = 1;
 8008b14:	2301      	movs	r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	89db      	ldrh	r3, [r3, #14]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d017      	beq.n	8008b50 <event_callback+0x1ac>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d114      	bne.n	8008b50 <event_callback+0x1ac>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d010      	beq.n	8008b50 <event_callback+0x1ac>
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	0952      	lsrs	r2, r2, #5
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	f002 021f 	and.w	r2, r2, #31
 8008b40:	2101      	movs	r1, #1
 8008b42:	fa01 f202 	lsl.w	r2, r1, r2
 8008b46:	4013      	ands	r3, r2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <event_callback+0x1ac>
          do_signal = 1;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <event_callback+0x1c2>
        scb->sem_signalled = 1;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	3318      	adds	r3, #24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f00a f832 	bl	8012bca <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8008b66:	6978      	ldr	r0, [r7, #20]
 8008b68:	f00a f8e2 	bl	8012d30 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8008b6c:	f00a f8d2 	bl	8012d14 <sys_arch_protect>
 8008b70:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 8008b72:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <event_callback+0x20c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d000      	beq.n	8008b7e <event_callback+0x1da>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 8008b7c:	e789      	b.n	8008a92 <event_callback+0xee>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	61bb      	str	r3, [r7, #24]
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d187      	bne.n	8008a9a <event_callback+0xf6>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f00a f8d0 	bl	8012d30 <sys_arch_unprotect>
 8008b90:	e002      	b.n	8008b98 <event_callback+0x1f4>
    return;
 8008b92:	bf00      	nop
 8008b94:	e000      	b.n	8008b98 <event_callback+0x1f4>
      return;
 8008b96:	bf00      	nop
}
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	080155b8 	.word	0x080155b8
 8008ba4:	08015818 	.word	0x08015818
 8008ba8:	080155fc 	.word	0x080155fc
 8008bac:	2000c584 	.word	0x2000c584
 8008bb0:	2000c588 	.word	0x2000c588

08008bb4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008bbc:	4b29      	ldr	r3, [pc, #164]	; (8008c64 <tcpip_thread+0xb0>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d005      	beq.n	8008bd0 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8008bc4:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <tcpip_thread+0xb0>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a27      	ldr	r2, [pc, #156]	; (8008c68 <tcpip_thread+0xb4>)
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8008bd0:	4826      	ldr	r0, [pc, #152]	; (8008c6c <tcpip_thread+0xb8>)
 8008bd2:	f00a f85d 	bl	8012c90 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8008bd6:	4825      	ldr	r0, [pc, #148]	; (8008c6c <tcpip_thread+0xb8>)
 8008bd8:	f00a f869 	bl	8012cae <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	4619      	mov	r1, r3
 8008be2:	4823      	ldr	r0, [pc, #140]	; (8008c70 <tcpip_thread+0xbc>)
 8008be4:	f007 f90a 	bl	800fdfc <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008be8:	4820      	ldr	r0, [pc, #128]	; (8008c6c <tcpip_thread+0xb8>)
 8008bea:	f00a f851 	bl	8012c90 <sys_mutex_lock>
    if (msg == NULL) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <tcpip_thread+0xc0>)
 8008bf6:	2269      	movs	r2, #105	; 0x69
 8008bf8:	491f      	ldr	r1, [pc, #124]	; (8008c78 <tcpip_thread+0xc4>)
 8008bfa:	4820      	ldr	r0, [pc, #128]	; (8008c7c <tcpip_thread+0xc8>)
 8008bfc:	f00b f946 	bl	8013e8c <iprintf>
      continue;
 8008c00:	e02f      	b.n	8008c62 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d011      	beq.n	8008c2e <tcpip_thread+0x7a>
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d01b      	beq.n	8008c46 <tcpip_thread+0x92>
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d120      	bne.n	8008c54 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	6850      	ldr	r0, [r2, #4]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	6892      	ldr	r2, [r2, #8]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4619      	mov	r1, r3
 8008c26:	2009      	movs	r0, #9
 8008c28:	f000 fd7a 	bl	8009720 <memp_free>
      break;
 8008c2c:	e019      	b.n	8008c62 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	6892      	ldr	r2, [r2, #8]
 8008c36:	4610      	mov	r0, r2
 8008c38:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	2008      	movs	r0, #8
 8008c40:	f000 fd6e 	bl	8009720 <memp_free>
      break;
 8008c44:	e00d      	b.n	8008c62 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	6892      	ldr	r2, [r2, #8]
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4798      	blx	r3
      break;
 8008c52:	e006      	b.n	8008c62 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008c54:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <tcpip_thread+0xc0>)
 8008c56:	229b      	movs	r2, #155	; 0x9b
 8008c58:	4907      	ldr	r1, [pc, #28]	; (8008c78 <tcpip_thread+0xc4>)
 8008c5a:	4808      	ldr	r0, [pc, #32]	; (8008c7c <tcpip_thread+0xc8>)
 8008c5c:	f00b f916 	bl	8013e8c <iprintf>
      break;
 8008c60:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8008c62:	e7b8      	b.n	8008bd6 <tcpip_thread+0x22>
 8008c64:	2000c58c 	.word	0x2000c58c
 8008c68:	2000c590 	.word	0x2000c590
 8008c6c:	2000ce38 	.word	0x2000ce38
 8008c70:	2000c594 	.word	0x2000c594
 8008c74:	08015828 	.word	0x08015828
 8008c78:	08015858 	.word	0x08015858
 8008c7c:	08015878 	.word	0x08015878

08008c80 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008c8c:	481a      	ldr	r0, [pc, #104]	; (8008cf8 <tcpip_inpkt+0x78>)
 8008c8e:	f009 ff25 	bl	8012adc <sys_mbox_valid>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <tcpip_inpkt+0x24>
 8008c98:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <tcpip_inpkt+0x7c>)
 8008c9a:	22b5      	movs	r2, #181	; 0xb5
 8008c9c:	4918      	ldr	r1, [pc, #96]	; (8008d00 <tcpip_inpkt+0x80>)
 8008c9e:	4819      	ldr	r0, [pc, #100]	; (8008d04 <tcpip_inpkt+0x84>)
 8008ca0:	f00b f8f4 	bl	8013e8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008ca4:	2009      	movs	r0, #9
 8008ca6:	f000 fce9 	bl	800967c <memp_malloc>
 8008caa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	e01a      	b.n	8008cee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008cd0:	6979      	ldr	r1, [r7, #20]
 8008cd2:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <tcpip_inpkt+0x78>)
 8008cd4:	f009 fe8d 	bl	80129f2 <sys_mbox_trypost>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d006      	beq.n	8008cec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008cde:	6979      	ldr	r1, [r7, #20]
 8008ce0:	2009      	movs	r0, #9
 8008ce2:	f000 fd1d 	bl	8009720 <memp_free>
    return ERR_MEM;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	e000      	b.n	8008cee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008cec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	2000c594 	.word	0x2000c594
 8008cfc:	08015828 	.word	0x08015828
 8008d00:	080158a0 	.word	0x080158a0
 8008d04:	08015878 	.word	0x08015878

08008d08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008d18:	f003 0318 	and.w	r3, r3, #24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008d20:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <tcpip_input+0x3c>)
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ffab 	bl	8008c80 <tcpip_inpkt>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	e005      	b.n	8008d3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008d2e:	4a06      	ldr	r2, [pc, #24]	; (8008d48 <tcpip_input+0x40>)
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff ffa4 	bl	8008c80 <tcpip_inpkt>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	080127a9 	.word	0x080127a9
 8008d48:	0801176d 	.word	0x0801176d

08008d4c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008d5a:	481d      	ldr	r0, [pc, #116]	; (8008dd0 <tcpip_callback_with_block+0x84>)
 8008d5c:	f009 febe 	bl	8012adc <sys_mbox_valid>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d105      	bne.n	8008d72 <tcpip_callback_with_block+0x26>
 8008d66:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <tcpip_callback_with_block+0x88>)
 8008d68:	22ee      	movs	r2, #238	; 0xee
 8008d6a:	491b      	ldr	r1, [pc, #108]	; (8008dd8 <tcpip_callback_with_block+0x8c>)
 8008d6c:	481b      	ldr	r0, [pc, #108]	; (8008ddc <tcpip_callback_with_block+0x90>)
 8008d6e:	f00b f88d 	bl	8013e8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008d72:	2008      	movs	r0, #8
 8008d74:	f000 fc82 	bl	800967c <memp_malloc>
 8008d78:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	e01f      	b.n	8008dc6 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2203      	movs	r2, #3
 8008d8a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	609a      	str	r2, [r3, #8]
  if (block) {
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008d9e:	6979      	ldr	r1, [r7, #20]
 8008da0:	480b      	ldr	r0, [pc, #44]	; (8008dd0 <tcpip_callback_with_block+0x84>)
 8008da2:	f009 fe11 	bl	80129c8 <sys_mbox_post>
 8008da6:	e00d      	b.n	8008dc4 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008da8:	6979      	ldr	r1, [r7, #20]
 8008daa:	4809      	ldr	r0, [pc, #36]	; (8008dd0 <tcpip_callback_with_block+0x84>)
 8008dac:	f009 fe21 	bl	80129f2 <sys_mbox_trypost>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d006      	beq.n	8008dc4 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008db6:	6979      	ldr	r1, [r7, #20]
 8008db8:	2008      	movs	r0, #8
 8008dba:	f000 fcb1 	bl	8009720 <memp_free>
      return ERR_MEM;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	e000      	b.n	8008dc6 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	2000c594 	.word	0x2000c594
 8008dd4:	08015828 	.word	0x08015828
 8008dd8:	080158a0 	.word	0x080158a0
 8008ddc:	08015878 	.word	0x08015878

08008de0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8008dec:	4806      	ldr	r0, [pc, #24]	; (8008e08 <tcpip_send_msg_wait_sem+0x28>)
 8008dee:	f009 ff4f 	bl	8012c90 <sys_mutex_lock>
  fn(apimsg);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68b8      	ldr	r0, [r7, #8]
 8008df6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8008df8:	4803      	ldr	r0, [pc, #12]	; (8008e08 <tcpip_send_msg_wait_sem+0x28>)
 8008dfa:	f009 ff58 	bl	8012cae <sys_mutex_unlock>
  return ERR_OK;
 8008dfe:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	2000ce38 	.word	0x2000ce38

08008e0c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008e16:	f000 f86a 	bl	8008eee <lwip_init>

  tcpip_init_done = initfunc;
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <tcpip_init+0x6c>)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008e20:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <tcpip_init+0x70>)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008e26:	2106      	movs	r1, #6
 8008e28:	4815      	ldr	r0, [pc, #84]	; (8008e80 <tcpip_init+0x74>)
 8008e2a:	f009 fd99 	bl	8012960 <sys_mbox_new>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <tcpip_init+0x78>)
 8008e36:	f240 12d5 	movw	r2, #469	; 0x1d5
 8008e3a:	4913      	ldr	r1, [pc, #76]	; (8008e88 <tcpip_init+0x7c>)
 8008e3c:	4813      	ldr	r0, [pc, #76]	; (8008e8c <tcpip_init+0x80>)
 8008e3e:	f00b f825 	bl	8013e8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008e42:	4813      	ldr	r0, [pc, #76]	; (8008e90 <tcpip_init+0x84>)
 8008e44:	f009 ff08 	bl	8012c58 <sys_mutex_new>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d006      	beq.n	8008e5c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <tcpip_init+0x78>)
 8008e50:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008e54:	490f      	ldr	r1, [pc, #60]	; (8008e94 <tcpip_init+0x88>)
 8008e56:	480d      	ldr	r0, [pc, #52]	; (8008e8c <tcpip_init+0x80>)
 8008e58:	f00b f818 	bl	8013e8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e64:	2200      	movs	r2, #0
 8008e66:	490c      	ldr	r1, [pc, #48]	; (8008e98 <tcpip_init+0x8c>)
 8008e68:	480c      	ldr	r0, [pc, #48]	; (8008e9c <tcpip_init+0x90>)
 8008e6a:	f009 ff2d 	bl	8012cc8 <sys_thread_new>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	2000c58c 	.word	0x2000c58c
 8008e7c:	2000c590 	.word	0x2000c590
 8008e80:	2000c594 	.word	0x2000c594
 8008e84:	08015828 	.word	0x08015828
 8008e88:	080158b0 	.word	0x080158b0
 8008e8c:	08015878 	.word	0x08015878
 8008e90:	2000ce38 	.word	0x2000ce38
 8008e94:	080158d4 	.word	0x080158d4
 8008e98:	08008bb5 	.word	0x08008bb5
 8008e9c:	080158f8 	.word	0x080158f8

08008ea0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	ba5b      	rev16	r3, r3
 8008eae:	b29b      	uxth	r3, r3
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	061a      	lsls	r2, r3, #24
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	0a1b      	lsrs	r3, r3, #8
 8008ed6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	0e1b      	lsrs	r3, r3, #24
 8008ee0:	4313      	orrs	r3, r2
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008ef8:	f009 fea0 	bl	8012c3c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008efc:	f000 f8a6 	bl	800904c <mem_init>
  memp_init();
 8008f00:	f000 fb70 	bl	80095e4 <memp_init>
  pbuf_init();
  netif_init();
 8008f04:	f000 fc36 	bl	8009774 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008f08:	f006 ff9e 	bl	800fe48 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008f0c:	f001 fbe8 	bl	800a6e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8008f10:	f006 fe30 	bl	800fb74 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008f24:	4b40      	ldr	r3, [pc, #256]	; (8009028 <plug_holes+0x10c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d206      	bcs.n	8008f3c <plug_holes+0x20>
 8008f2e:	4b3f      	ldr	r3, [pc, #252]	; (800902c <plug_holes+0x110>)
 8008f30:	f240 125d 	movw	r2, #349	; 0x15d
 8008f34:	493e      	ldr	r1, [pc, #248]	; (8009030 <plug_holes+0x114>)
 8008f36:	483f      	ldr	r0, [pc, #252]	; (8009034 <plug_holes+0x118>)
 8008f38:	f00a ffa8 	bl	8013e8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008f3c:	4b3e      	ldr	r3, [pc, #248]	; (8009038 <plug_holes+0x11c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d306      	bcc.n	8008f54 <plug_holes+0x38>
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <plug_holes+0x110>)
 8008f48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008f4c:	493b      	ldr	r1, [pc, #236]	; (800903c <plug_holes+0x120>)
 8008f4e:	4839      	ldr	r0, [pc, #228]	; (8009034 <plug_holes+0x118>)
 8008f50:	f00a ff9c 	bl	8013e8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	791b      	ldrb	r3, [r3, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <plug_holes+0x4e>
 8008f5c:	4b33      	ldr	r3, [pc, #204]	; (800902c <plug_holes+0x110>)
 8008f5e:	f240 125f 	movw	r2, #351	; 0x15f
 8008f62:	4937      	ldr	r1, [pc, #220]	; (8009040 <plug_holes+0x124>)
 8008f64:	4833      	ldr	r0, [pc, #204]	; (8009034 <plug_holes+0x118>)
 8008f66:	f00a ff91 	bl	8013e8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f72:	d906      	bls.n	8008f82 <plug_holes+0x66>
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <plug_holes+0x110>)
 8008f76:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8008f7a:	4932      	ldr	r1, [pc, #200]	; (8009044 <plug_holes+0x128>)
 8008f7c:	482d      	ldr	r0, [pc, #180]	; (8009034 <plug_holes+0x118>)
 8008f7e:	f00a ff85 	bl	8013e8c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <plug_holes+0x10c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	8812      	ldrh	r2, [r2, #0]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d01f      	beq.n	8008fd6 <plug_holes+0xba>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	791b      	ldrb	r3, [r3, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11b      	bne.n	8008fd6 <plug_holes+0xba>
 8008f9e:	4b26      	ldr	r3, [pc, #152]	; (8009038 <plug_holes+0x11c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d016      	beq.n	8008fd6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008fa8:	4b27      	ldr	r3, [pc, #156]	; (8009048 <plug_holes+0x12c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d102      	bne.n	8008fb8 <plug_holes+0x9c>
      lfree = mem;
 8008fb2:	4a25      	ldr	r2, [pc, #148]	; (8009048 <plug_holes+0x12c>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	881a      	ldrh	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a19      	ldr	r2, [pc, #100]	; (8009028 <plug_holes+0x10c>)
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	1a99      	subs	r1, r3, r2
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <plug_holes+0x10c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	8812      	ldrh	r2, [r2, #0]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	b28a      	uxth	r2, r1
 8008fd4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <plug_holes+0x10c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	8852      	ldrh	r2, [r2, #2]
 8008fde:	4413      	add	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d01a      	beq.n	8009020 <plug_holes+0x104>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	791b      	ldrb	r3, [r3, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d116      	bne.n	8009020 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <plug_holes+0x12c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d102      	bne.n	8009002 <plug_holes+0xe6>
      lfree = pmem;
 8008ffc:	4a12      	ldr	r2, [pc, #72]	; (8009048 <plug_holes+0x12c>)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4a06      	ldr	r2, [pc, #24]	; (8009028 <plug_holes+0x10c>)
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	1a99      	subs	r1, r3, r2
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <plug_holes+0x10c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	8812      	ldrh	r2, [r2, #0]
 800901a:	4413      	add	r3, r2
 800901c:	b28a      	uxth	r2, r1
 800901e:	805a      	strh	r2, [r3, #2]
  }
}
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	2000c598 	.word	0x2000c598
 800902c:	08015908 	.word	0x08015908
 8009030:	08015938 	.word	0x08015938
 8009034:	08015950 	.word	0x08015950
 8009038:	2000c59c 	.word	0x2000c59c
 800903c:	08015978 	.word	0x08015978
 8009040:	08015994 	.word	0x08015994
 8009044:	080159b0 	.word	0x080159b0
 8009048:	2000c5a0 	.word	0x2000c5a0

0800904c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009052:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <mem_init+0x80>)
 8009054:	3303      	adds	r3, #3
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	461a      	mov	r2, r3
 800905c:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <mem_init+0x84>)
 800905e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009060:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <mem_init+0x84>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800906c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <mem_init+0x84>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8009082:	4a14      	ldr	r2, [pc, #80]	; (80090d4 <mem_init+0x88>)
 8009084:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009086:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <mem_init+0x88>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2201      	movs	r2, #1
 800908c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800908e:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <mem_init+0x88>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009096:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <mem_init+0x88>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80090a0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80090a2:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <mem_init+0x84>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a0c      	ldr	r2, [pc, #48]	; (80090d8 <mem_init+0x8c>)
 80090a8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80090aa:	480c      	ldr	r0, [pc, #48]	; (80090dc <mem_init+0x90>)
 80090ac:	f009 fdd4 	bl	8012c58 <sys_mutex_new>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d006      	beq.n	80090c4 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80090b6:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <mem_init+0x94>)
 80090b8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <mem_init+0x98>)
 80090be:	480a      	ldr	r0, [pc, #40]	; (80090e8 <mem_init+0x9c>)
 80090c0:	f00a fee4 	bl	8013e8c <iprintf>
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2000ce54 	.word	0x2000ce54
 80090d0:	2000c598 	.word	0x2000c598
 80090d4:	2000c59c 	.word	0x2000c59c
 80090d8:	2000c5a0 	.word	0x2000c5a0
 80090dc:	2000c5a4 	.word	0x2000c5a4
 80090e0:	08015908 	.word	0x08015908
 80090e4:	080159dc 	.word	0x080159dc
 80090e8:	08015950 	.word	0x08015950

080090ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d050      	beq.n	800919c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d006      	beq.n	8009112 <mem_free+0x26>
 8009104:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <mem_free+0xb8>)
 8009106:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800910a:	4927      	ldr	r1, [pc, #156]	; (80091a8 <mem_free+0xbc>)
 800910c:	4827      	ldr	r0, [pc, #156]	; (80091ac <mem_free+0xc0>)
 800910e:	f00a febd 	bl	8013e8c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009112:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <mem_free+0xc4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	429a      	cmp	r2, r3
 800911a:	d304      	bcc.n	8009126 <mem_free+0x3a>
 800911c:	4b25      	ldr	r3, [pc, #148]	; (80091b4 <mem_free+0xc8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	429a      	cmp	r2, r3
 8009124:	d306      	bcc.n	8009134 <mem_free+0x48>
 8009126:	4b1f      	ldr	r3, [pc, #124]	; (80091a4 <mem_free+0xb8>)
 8009128:	f240 12af 	movw	r2, #431	; 0x1af
 800912c:	4922      	ldr	r1, [pc, #136]	; (80091b8 <mem_free+0xcc>)
 800912e:	481f      	ldr	r0, [pc, #124]	; (80091ac <mem_free+0xc0>)
 8009130:	f00a feac 	bl	8013e8c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009134:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <mem_free+0xc4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d304      	bcc.n	8009148 <mem_free+0x5c>
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <mem_free+0xc8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d306      	bcc.n	8009156 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8009148:	f009 fde4 	bl	8012d14 <sys_arch_protect>
 800914c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f009 fdee 	bl	8012d30 <sys_arch_unprotect>
    return;
 8009154:	e023      	b.n	800919e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009156:	4819      	ldr	r0, [pc, #100]	; (80091bc <mem_free+0xd0>)
 8009158:	f009 fd9a 	bl	8012c90 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3b08      	subs	r3, #8
 8009160:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	791b      	ldrb	r3, [r3, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <mem_free+0x8c>
 800916a:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <mem_free+0xb8>)
 800916c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8009170:	4913      	ldr	r1, [pc, #76]	; (80091c0 <mem_free+0xd4>)
 8009172:	480e      	ldr	r0, [pc, #56]	; (80091ac <mem_free+0xc0>)
 8009174:	f00a fe8a 	bl	8013e8c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <mem_free+0xd8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d202      	bcs.n	800918e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009188:	4a0e      	ldr	r2, [pc, #56]	; (80091c4 <mem_free+0xd8>)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff fec4 	bl	8008f1c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009194:	4809      	ldr	r0, [pc, #36]	; (80091bc <mem_free+0xd0>)
 8009196:	f009 fd8a 	bl	8012cae <sys_mutex_unlock>
 800919a:	e000      	b.n	800919e <mem_free+0xb2>
    return;
 800919c:	bf00      	nop
}
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	08015908 	.word	0x08015908
 80091a8:	080159f8 	.word	0x080159f8
 80091ac:	08015950 	.word	0x08015950
 80091b0:	2000c598 	.word	0x2000c598
 80091b4:	2000c59c 	.word	0x2000c59c
 80091b8:	08015a1c 	.word	0x08015a1c
 80091bc:	2000c5a4 	.word	0x2000c5a4
 80091c0:	08015a34 	.word	0x08015a34
 80091c4:	2000c5a0 	.word	0x2000c5a0

080091c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80091d4:	887b      	ldrh	r3, [r7, #2]
 80091d6:	3303      	adds	r3, #3
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80091e0:	887b      	ldrh	r3, [r7, #2]
 80091e2:	2b0b      	cmp	r3, #11
 80091e4:	d801      	bhi.n	80091ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80091e6:	230c      	movs	r3, #12
 80091e8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80091ea:	887b      	ldrh	r3, [r7, #2]
 80091ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091f0:	d901      	bls.n	80091f6 <mem_trim+0x2e>
    return NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e0bd      	b.n	8009372 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80091f6:	4b61      	ldr	r3, [pc, #388]	; (800937c <mem_trim+0x1b4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d304      	bcc.n	800920a <mem_trim+0x42>
 8009200:	4b5f      	ldr	r3, [pc, #380]	; (8009380 <mem_trim+0x1b8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d306      	bcc.n	8009218 <mem_trim+0x50>
 800920a:	4b5e      	ldr	r3, [pc, #376]	; (8009384 <mem_trim+0x1bc>)
 800920c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009210:	495d      	ldr	r1, [pc, #372]	; (8009388 <mem_trim+0x1c0>)
 8009212:	485e      	ldr	r0, [pc, #376]	; (800938c <mem_trim+0x1c4>)
 8009214:	f00a fe3a 	bl	8013e8c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009218:	4b58      	ldr	r3, [pc, #352]	; (800937c <mem_trim+0x1b4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d304      	bcc.n	800922c <mem_trim+0x64>
 8009222:	4b57      	ldr	r3, [pc, #348]	; (8009380 <mem_trim+0x1b8>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	429a      	cmp	r2, r3
 800922a:	d307      	bcc.n	800923c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800922c:	f009 fd72 	bl	8012d14 <sys_arch_protect>
 8009230:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f009 fd7c 	bl	8012d30 <sys_arch_unprotect>
    return rmem;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	e09a      	b.n	8009372 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3b08      	subs	r3, #8
 8009240:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	4a4d      	ldr	r2, [pc, #308]	; (800937c <mem_trim+0x1b4>)
 8009246:	6812      	ldr	r2, [r2, #0]
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	881a      	ldrh	r2, [r3, #0]
 8009250:	8b7b      	ldrh	r3, [r7, #26]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	b29b      	uxth	r3, r3
 8009256:	3b08      	subs	r3, #8
 8009258:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800925a:	887a      	ldrh	r2, [r7, #2]
 800925c:	8b3b      	ldrh	r3, [r7, #24]
 800925e:	429a      	cmp	r2, r3
 8009260:	d906      	bls.n	8009270 <mem_trim+0xa8>
 8009262:	4b48      	ldr	r3, [pc, #288]	; (8009384 <mem_trim+0x1bc>)
 8009264:	f240 2206 	movw	r2, #518	; 0x206
 8009268:	4949      	ldr	r1, [pc, #292]	; (8009390 <mem_trim+0x1c8>)
 800926a:	4848      	ldr	r0, [pc, #288]	; (800938c <mem_trim+0x1c4>)
 800926c:	f00a fe0e 	bl	8013e8c <iprintf>
  if (newsize > size) {
 8009270:	887a      	ldrh	r2, [r7, #2]
 8009272:	8b3b      	ldrh	r3, [r7, #24]
 8009274:	429a      	cmp	r2, r3
 8009276:	d901      	bls.n	800927c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	e07a      	b.n	8009372 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800927c:	887a      	ldrh	r2, [r7, #2]
 800927e:	8b3b      	ldrh	r3, [r7, #24]
 8009280:	429a      	cmp	r2, r3
 8009282:	d101      	bne.n	8009288 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	e074      	b.n	8009372 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009288:	4842      	ldr	r0, [pc, #264]	; (8009394 <mem_trim+0x1cc>)
 800928a:	f009 fd01 	bl	8012c90 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800928e:	4b3b      	ldr	r3, [pc, #236]	; (800937c <mem_trim+0x1b4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	8812      	ldrh	r2, [r2, #0]
 8009296:	4413      	add	r3, r2
 8009298:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	791b      	ldrb	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d131      	bne.n	8009306 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80092a8:	8b7a      	ldrh	r2, [r7, #26]
 80092aa:	887b      	ldrh	r3, [r7, #2]
 80092ac:	4413      	add	r3, r2
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	3308      	adds	r3, #8
 80092b2:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80092b4:	4b38      	ldr	r3, [pc, #224]	; (8009398 <mem_trim+0x1d0>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d105      	bne.n	80092ca <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80092be:	4b2f      	ldr	r3, [pc, #188]	; (800937c <mem_trim+0x1b4>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	8a7b      	ldrh	r3, [r7, #18]
 80092c4:	4413      	add	r3, r2
 80092c6:	4a34      	ldr	r2, [pc, #208]	; (8009398 <mem_trim+0x1d0>)
 80092c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80092ca:	4b2c      	ldr	r3, [pc, #176]	; (800937c <mem_trim+0x1b4>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	8a7b      	ldrh	r3, [r7, #18]
 80092d0:	4413      	add	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2200      	movs	r2, #0
 80092d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	8a3a      	ldrh	r2, [r7, #16]
 80092de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	8b7a      	ldrh	r2, [r7, #26]
 80092e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	8a7a      	ldrh	r2, [r7, #18]
 80092ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092f4:	d039      	beq.n	800936a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80092f6:	4b21      	ldr	r3, [pc, #132]	; (800937c <mem_trim+0x1b4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	8812      	ldrh	r2, [r2, #0]
 80092fe:	4413      	add	r3, r2
 8009300:	8a7a      	ldrh	r2, [r7, #18]
 8009302:	805a      	strh	r2, [r3, #2]
 8009304:	e031      	b.n	800936a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009306:	887b      	ldrh	r3, [r7, #2]
 8009308:	f103 0214 	add.w	r2, r3, #20
 800930c:	8b3b      	ldrh	r3, [r7, #24]
 800930e:	429a      	cmp	r2, r3
 8009310:	d82b      	bhi.n	800936a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009312:	8b7a      	ldrh	r2, [r7, #26]
 8009314:	887b      	ldrh	r3, [r7, #2]
 8009316:	4413      	add	r3, r2
 8009318:	b29b      	uxth	r3, r3
 800931a:	3308      	adds	r3, #8
 800931c:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800931e:	4b17      	ldr	r3, [pc, #92]	; (800937c <mem_trim+0x1b4>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	8a7b      	ldrh	r3, [r7, #18]
 8009324:	4413      	add	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8009328:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <mem_trim+0x1d0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	429a      	cmp	r2, r3
 8009330:	d202      	bcs.n	8009338 <mem_trim+0x170>
      lfree = mem2;
 8009332:	4a19      	ldr	r2, [pc, #100]	; (8009398 <mem_trim+0x1d0>)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2200      	movs	r2, #0
 800933c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	881a      	ldrh	r2, [r3, #0]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	8b7a      	ldrh	r2, [r7, #26]
 800934a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	8a7a      	ldrh	r2, [r7, #18]
 8009350:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800935a:	d006      	beq.n	800936a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800935c:	4b07      	ldr	r3, [pc, #28]	; (800937c <mem_trim+0x1b4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	4413      	add	r3, r2
 8009366:	8a7a      	ldrh	r2, [r7, #18]
 8009368:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800936a:	480a      	ldr	r0, [pc, #40]	; (8009394 <mem_trim+0x1cc>)
 800936c:	f009 fc9f 	bl	8012cae <sys_mutex_unlock>
  return rmem;
 8009370:	687b      	ldr	r3, [r7, #4]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	2000c598 	.word	0x2000c598
 8009380:	2000c59c 	.word	0x2000c59c
 8009384:	08015908 	.word	0x08015908
 8009388:	08015a48 	.word	0x08015a48
 800938c:	08015950 	.word	0x08015950
 8009390:	08015a60 	.word	0x08015a60
 8009394:	2000c5a4 	.word	0x2000c5a4
 8009398:	2000c5a0 	.word	0x2000c5a0

0800939c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <mem_malloc+0x14>
    return NULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e0d1      	b.n	8009554 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	3303      	adds	r3, #3
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f023 0303 	bic.w	r3, r3, #3
 80093ba:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	2b0b      	cmp	r3, #11
 80093c0:	d801      	bhi.n	80093c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80093c2:	230c      	movs	r3, #12
 80093c4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093cc:	d901      	bls.n	80093d2 <mem_malloc+0x36>
    return NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e0c0      	b.n	8009554 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80093d2:	4862      	ldr	r0, [pc, #392]	; (800955c <mem_malloc+0x1c0>)
 80093d4:	f009 fc5c 	bl	8012c90 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80093d8:	4b61      	ldr	r3, [pc, #388]	; (8009560 <mem_malloc+0x1c4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	4b61      	ldr	r3, [pc, #388]	; (8009564 <mem_malloc+0x1c8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	83fb      	strh	r3, [r7, #30]
 80093e6:	e0aa      	b.n	800953e <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80093e8:	4b5e      	ldr	r3, [pc, #376]	; (8009564 <mem_malloc+0x1c8>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	8bfb      	ldrh	r3, [r7, #30]
 80093ee:	4413      	add	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	791b      	ldrb	r3, [r3, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 809b 	bne.w	8009532 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	8bfb      	ldrh	r3, [r7, #30]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	f1a3 0208 	sub.w	r2, r3, #8
 800940a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800940c:	429a      	cmp	r2, r3
 800940e:	f0c0 8090 	bcc.w	8009532 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	8bfb      	ldrh	r3, [r7, #30]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	f1a3 0208 	sub.w	r2, r3, #8
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	3314      	adds	r3, #20
 8009424:	429a      	cmp	r2, r3
 8009426:	d327      	bcc.n	8009478 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8009428:	8bfa      	ldrh	r2, [r7, #30]
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	4413      	add	r3, r2
 800942e:	b29b      	uxth	r3, r3
 8009430:	3308      	adds	r3, #8
 8009432:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009434:	4b4b      	ldr	r3, [pc, #300]	; (8009564 <mem_malloc+0x1c8>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	8a7b      	ldrh	r3, [r7, #18]
 800943a:	4413      	add	r3, r2
 800943c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	881a      	ldrh	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8bfa      	ldrh	r2, [r7, #30]
 8009450:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	8a7a      	ldrh	r2, [r7, #18]
 8009456:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2201      	movs	r2, #1
 800945c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009466:	d00a      	beq.n	800947e <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009468:	4b3e      	ldr	r3, [pc, #248]	; (8009564 <mem_malloc+0x1c8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	8812      	ldrh	r2, [r2, #0]
 8009470:	4413      	add	r3, r2
 8009472:	8a7a      	ldrh	r2, [r7, #18]
 8009474:	805a      	strh	r2, [r3, #2]
 8009476:	e002      	b.n	800947e <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2201      	movs	r2, #1
 800947c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800947e:	4b38      	ldr	r3, [pc, #224]	; (8009560 <mem_malloc+0x1c4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	429a      	cmp	r2, r3
 8009486:	d127      	bne.n	80094d8 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8009488:	4b35      	ldr	r3, [pc, #212]	; (8009560 <mem_malloc+0x1c4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800948e:	e005      	b.n	800949c <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8009490:	4b34      	ldr	r3, [pc, #208]	; (8009564 <mem_malloc+0x1c8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	8812      	ldrh	r2, [r2, #0]
 8009498:	4413      	add	r3, r2
 800949a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	791b      	ldrb	r3, [r3, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <mem_malloc+0x112>
 80094a4:	4b30      	ldr	r3, [pc, #192]	; (8009568 <mem_malloc+0x1cc>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d1f0      	bne.n	8009490 <mem_malloc+0xf4>
          }
          lfree = cur;
 80094ae:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <mem_malloc+0x1c4>)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80094b4:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <mem_malloc+0x1c4>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	4b2b      	ldr	r3, [pc, #172]	; (8009568 <mem_malloc+0x1cc>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d00b      	beq.n	80094d8 <mem_malloc+0x13c>
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <mem_malloc+0x1c4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	791b      	ldrb	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d006      	beq.n	80094d8 <mem_malloc+0x13c>
 80094ca:	4b28      	ldr	r3, [pc, #160]	; (800956c <mem_malloc+0x1d0>)
 80094cc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80094d0:	4927      	ldr	r1, [pc, #156]	; (8009570 <mem_malloc+0x1d4>)
 80094d2:	4828      	ldr	r0, [pc, #160]	; (8009574 <mem_malloc+0x1d8>)
 80094d4:	f00a fcda 	bl	8013e8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80094d8:	4820      	ldr	r0, [pc, #128]	; (800955c <mem_malloc+0x1c0>)
 80094da:	f009 fbe8 	bl	8012cae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80094de:	88fa      	ldrh	r2, [r7, #6]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	4413      	add	r3, r2
 80094e4:	3308      	adds	r3, #8
 80094e6:	4a20      	ldr	r2, [pc, #128]	; (8009568 <mem_malloc+0x1cc>)
 80094e8:	6812      	ldr	r2, [r2, #0]
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d906      	bls.n	80094fc <mem_malloc+0x160>
 80094ee:	4b1f      	ldr	r3, [pc, #124]	; (800956c <mem_malloc+0x1d0>)
 80094f0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80094f4:	4920      	ldr	r1, [pc, #128]	; (8009578 <mem_malloc+0x1dc>)
 80094f6:	481f      	ldr	r0, [pc, #124]	; (8009574 <mem_malloc+0x1d8>)
 80094f8:	f00a fcc8 	bl	8013e8c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d006      	beq.n	8009514 <mem_malloc+0x178>
 8009506:	4b19      	ldr	r3, [pc, #100]	; (800956c <mem_malloc+0x1d0>)
 8009508:	f240 22d6 	movw	r2, #726	; 0x2d6
 800950c:	491b      	ldr	r1, [pc, #108]	; (800957c <mem_malloc+0x1e0>)
 800950e:	4819      	ldr	r0, [pc, #100]	; (8009574 <mem_malloc+0x1d8>)
 8009510:	f00a fcbc 	bl	8013e8c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <mem_malloc+0x190>
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <mem_malloc+0x1d0>)
 8009520:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8009524:	4916      	ldr	r1, [pc, #88]	; (8009580 <mem_malloc+0x1e4>)
 8009526:	4813      	ldr	r0, [pc, #76]	; (8009574 <mem_malloc+0x1d8>)
 8009528:	f00a fcb0 	bl	8013e8c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3308      	adds	r3, #8
 8009530:	e010      	b.n	8009554 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009532:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <mem_malloc+0x1c8>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	8bfb      	ldrh	r3, [r7, #30]
 8009538:	4413      	add	r3, r2
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800953e:	8bfa      	ldrh	r2, [r7, #30]
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009546:	429a      	cmp	r2, r3
 8009548:	f4ff af4e 	bcc.w	80093e8 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800954c:	4803      	ldr	r0, [pc, #12]	; (800955c <mem_malloc+0x1c0>)
 800954e:	f009 fbae 	bl	8012cae <sys_mutex_unlock>
  return NULL;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	2000c5a4 	.word	0x2000c5a4
 8009560:	2000c5a0 	.word	0x2000c5a0
 8009564:	2000c598 	.word	0x2000c598
 8009568:	2000c59c 	.word	0x2000c59c
 800956c:	08015908 	.word	0x08015908
 8009570:	08015a80 	.word	0x08015a80
 8009574:	08015950 	.word	0x08015950
 8009578:	08015a9c 	.word	0x08015a9c
 800957c:	08015acc 	.word	0x08015acc
 8009580:	08015afc 	.word	0x08015afc

08009584 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	3303      	adds	r3, #3
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e011      	b.n	80095ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4413      	add	r3, r2
 80095c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	461a      	mov	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	dbe7      	blt.n	80095a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80095ea:	2300      	movs	r3, #0
 80095ec:	80fb      	strh	r3, [r7, #6]
 80095ee:	e009      	b.n	8009604 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	4a08      	ldr	r2, [pc, #32]	; (8009614 <memp_init+0x30>)
 80095f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff ffc3 	bl	8009584 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	3301      	adds	r3, #1
 8009602:	80fb      	strh	r3, [r7, #6]
 8009604:	88fb      	ldrh	r3, [r7, #6]
 8009606:	2b0c      	cmp	r3, #12
 8009608:	d9f2      	bls.n	80095f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	08017718 	.word	0x08017718

08009618 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009620:	f009 fb78 	bl	8012d14 <sys_arch_protect>
 8009624:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d015      	beq.n	8009660 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	2b00      	cmp	r3, #0
 8009646:	d006      	beq.n	8009656 <do_memp_malloc_pool+0x3e>
 8009648:	4b09      	ldr	r3, [pc, #36]	; (8009670 <do_memp_malloc_pool+0x58>)
 800964a:	f240 1249 	movw	r2, #329	; 0x149
 800964e:	4909      	ldr	r1, [pc, #36]	; (8009674 <do_memp_malloc_pool+0x5c>)
 8009650:	4809      	ldr	r0, [pc, #36]	; (8009678 <do_memp_malloc_pool+0x60>)
 8009652:	f00a fc1b 	bl	8013e8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f009 fb6a 	bl	8012d30 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	e003      	b.n	8009668 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f009 fb65 	bl	8012d30 <sys_arch_unprotect>
  return NULL;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	08015b20 	.word	0x08015b20
 8009674:	08015b50 	.word	0x08015b50
 8009678:	08015b74 	.word	0x08015b74

0800967c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	2b0c      	cmp	r3, #12
 800968a:	d908      	bls.n	800969e <memp_malloc+0x22>
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <memp_malloc+0x3c>)
 800968e:	f240 1287 	movw	r2, #391	; 0x187
 8009692:	490a      	ldr	r1, [pc, #40]	; (80096bc <memp_malloc+0x40>)
 8009694:	480a      	ldr	r0, [pc, #40]	; (80096c0 <memp_malloc+0x44>)
 8009696:	f00a fbf9 	bl	8013e8c <iprintf>
 800969a:	2300      	movs	r3, #0
 800969c:	e008      	b.n	80096b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <memp_malloc+0x48>)
 80096a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff ffb6 	bl	8009618 <do_memp_malloc_pool>
 80096ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	08015b20 	.word	0x08015b20
 80096bc:	08015bb0 	.word	0x08015bb0
 80096c0:	08015b74 	.word	0x08015b74
 80096c4:	08017718 	.word	0x08017718

080096c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	f003 0303 	and.w	r3, r3, #3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d006      	beq.n	80096ea <do_memp_free_pool+0x22>
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <do_memp_free_pool+0x4c>)
 80096de:	f240 129d 	movw	r2, #413	; 0x19d
 80096e2:	490d      	ldr	r1, [pc, #52]	; (8009718 <do_memp_free_pool+0x50>)
 80096e4:	480d      	ldr	r0, [pc, #52]	; (800971c <do_memp_free_pool+0x54>)
 80096e6:	f00a fbd1 	bl	8013e8c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80096ee:	f009 fb11 	bl	8012d14 <sys_arch_protect>
 80096f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009706:	68b8      	ldr	r0, [r7, #8]
 8009708:	f009 fb12 	bl	8012d30 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	08015b20 	.word	0x08015b20
 8009718:	08015bd0 	.word	0x08015bd0
 800971c:	08015b74 	.word	0x08015b74

08009720 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	2b0c      	cmp	r3, #12
 8009730:	d907      	bls.n	8009742 <memp_free+0x22>
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <memp_free+0x44>)
 8009734:	f240 12db 	movw	r2, #475	; 0x1db
 8009738:	490b      	ldr	r1, [pc, #44]	; (8009768 <memp_free+0x48>)
 800973a:	480c      	ldr	r0, [pc, #48]	; (800976c <memp_free+0x4c>)
 800973c:	f00a fba6 	bl	8013e8c <iprintf>
 8009740:	e00c      	b.n	800975c <memp_free+0x3c>

  if (mem == NULL) {
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d008      	beq.n	800975a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	4a09      	ldr	r2, [pc, #36]	; (8009770 <memp_free+0x50>)
 800974c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff ffb8 	bl	80096c8 <do_memp_free_pool>
 8009758:	e000      	b.n	800975c <memp_free+0x3c>
    return;
 800975a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	08015b20 	.word	0x08015b20
 8009768:	08015bf0 	.word	0x08015bf0
 800976c:	08015b74 	.word	0x08015b74
 8009770:	08017718 	.word	0x08017718

08009774 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009778:	bf00      	nop
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <netif_add+0x20>
 8009798:	4b1f      	ldr	r3, [pc, #124]	; (8009818 <netif_add+0x94>)
 800979a:	22fb      	movs	r2, #251	; 0xfb
 800979c:	491f      	ldr	r1, [pc, #124]	; (800981c <netif_add+0x98>)
 800979e:	4820      	ldr	r0, [pc, #128]	; (8009820 <netif_add+0x9c>)
 80097a0:	f00a fb74 	bl	8013e8c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2203      	movs	r2, #3
 80097c2:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80097cc:	4b15      	ldr	r3, [pc, #84]	; (8009824 <netif_add+0xa0>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	b2d1      	uxtb	r1, r2
 80097d4:	4a13      	ldr	r2, [pc, #76]	; (8009824 <netif_add+0xa0>)
 80097d6:	7011      	strb	r1, [r2, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a3a      	ldr	r2, [r7, #32]
 80097e2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 f81e 	bl	800982c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	4798      	blx	r3
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <netif_add+0x7c>
    return NULL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e007      	b.n	8009810 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009800:	4b09      	ldr	r3, [pc, #36]	; (8009828 <netif_add+0xa4>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009808:	4a07      	ldr	r2, [pc, #28]	; (8009828 <netif_add+0xa4>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	08015c0c 	.word	0x08015c0c
 800981c:	08015c40 	.word	0x08015c40
 8009820:	08015c58 	.word	0x08015c58
 8009824:	2000c5dc 	.word	0x2000c5dc
 8009828:	2001053c 	.word	0x2001053c

0800982c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <netif_set_addr+0x1c>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10c      	bne.n	8009862 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f81a 	bl	8009884 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f862 	bl	800991c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 f84a 	bl	80098f4 <netif_set_gw>
 8009860:	e00b      	b.n	800987a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f859 	bl	800991c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f841 	bl	80098f4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 f805 	bl	8009884 <netif_set_ipaddr>
  }
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <netif_set_ipaddr+0x18>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	e002      	b.n	80098a2 <netif_set_ipaddr+0x1e>
 800989c:	4b14      	ldr	r3, [pc, #80]	; (80098f0 <netif_set_ipaddr+0x6c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d01c      	beq.n	80098e8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3304      	adds	r3, #4
 80098b2:	f107 020c 	add.w	r2, r7, #12
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 fb25 	bl	800bf08 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	3304      	adds	r3, #4
 80098c2:	f107 020c 	add.w	r2, r7, #12
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f006 fe11 	bl	80104f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <netif_set_ipaddr+0x56>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	e000      	b.n	80098dc <netif_set_ipaddr+0x58>
 80098da:	2300      	movs	r3, #0
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80098e0:	2101      	movs	r1, #1
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f861 	bl	80099aa <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	0801778c 	.word	0x0801778c

080098f4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <netif_set_gw+0x16>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	e000      	b.n	800990c <netif_set_gw+0x18>
 800990a:	2300      	movs	r3, #0
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <netif_set_netmask+0x16>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	e000      	b.n	8009934 <netif_set_netmask+0x18>
 8009932:	2300      	movs	r3, #0
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800994c:	4a04      	ldr	r2, [pc, #16]	; (8009960 <netif_set_default+0x1c>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20010540 	.word	0x20010540

08009964 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d113      	bne.n	80099a2 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800999a:	2103      	movs	r1, #3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f804 	bl	80099aa <netif_issue_reports>
    }
  }
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d011      	beq.n	80099e4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f007 fcba 	bl	8011358 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d012      	beq.n	8009a28 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f007 f85e 	bl	8010ae4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009a36:	f009 f96d 	bl	8012d14 <sys_arch_protect>
 8009a3a:	6038      	str	r0, [r7, #0]
 8009a3c:	4b0f      	ldr	r3, [pc, #60]	; (8009a7c <pbuf_free_ooseq+0x4c>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	6838      	ldr	r0, [r7, #0]
 8009a44:	f009 f974 	bl	8012d30 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a48:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <pbuf_free_ooseq+0x50>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e00f      	b.n	8009a70 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d008      	beq.n	8009a6a <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 fece 	bl	800b7fe <tcp_segs_free>
      pcb->ooseq = NULL;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8009a68:	e005      	b.n	8009a76 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1ec      	bne.n	8009a50 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20010544 	.word	0x20010544
 8009a80:	2001054c 	.word	0x2001054c

08009a84 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009a8c:	f7ff ffd0 	bl	8009a30 <pbuf_free_ooseq>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009a9e:	f009 f939 	bl	8012d14 <sys_arch_protect>
 8009aa2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009aa4:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <pbuf_pool_is_empty+0x50>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <pbuf_pool_is_empty+0x50>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f009 f93d 	bl	8012d30 <sys_arch_unprotect>

  if (!queued) {
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d110      	bne.n	8009ade <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009abc:	2200      	movs	r2, #0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	480a      	ldr	r0, [pc, #40]	; (8009aec <pbuf_pool_is_empty+0x54>)
 8009ac2:	f7ff f943 	bl	8008d4c <tcpip_callback_with_block>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d008      	beq.n	8009ade <pbuf_pool_is_empty+0x46>
 8009acc:	f009 f922 	bl	8012d14 <sys_arch_protect>
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <pbuf_pool_is_empty+0x50>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f009 f929 	bl	8012d30 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009ade:	bf00      	nop
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20010544 	.word	0x20010544
 8009aec:	08009a85 	.word	0x08009a85

08009af0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	460b      	mov	r3, r1
 8009afc:	80bb      	strh	r3, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8009b02:	79fb      	ldrb	r3, [r7, #7]
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d81c      	bhi.n	8009b42 <pbuf_alloc+0x52>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <pbuf_alloc+0x20>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b25 	.word	0x08009b25
 8009b14:	08009b2b 	.word	0x08009b2b
 8009b18:	08009b31 	.word	0x08009b31
 8009b1c:	08009b37 	.word	0x08009b37
 8009b20:	08009b3d 	.word	0x08009b3d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009b24:	2336      	movs	r3, #54	; 0x36
 8009b26:	82fb      	strh	r3, [r7, #22]
    break;
 8009b28:	e014      	b.n	8009b54 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009b2a:	2322      	movs	r3, #34	; 0x22
 8009b2c:	82fb      	strh	r3, [r7, #22]
    break;
 8009b2e:	e011      	b.n	8009b54 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009b30:	230e      	movs	r3, #14
 8009b32:	82fb      	strh	r3, [r7, #22]
    break;
 8009b34:	e00e      	b.n	8009b54 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009b36:	2300      	movs	r3, #0
 8009b38:	82fb      	strh	r3, [r7, #22]
    break;
 8009b3a:	e00b      	b.n	8009b54 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	82fb      	strh	r3, [r7, #22]
    break;
 8009b40:	e008      	b.n	8009b54 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009b42:	4ba5      	ldr	r3, [pc, #660]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009b44:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009b48:	49a4      	ldr	r1, [pc, #656]	; (8009ddc <pbuf_alloc+0x2ec>)
 8009b4a:	48a5      	ldr	r0, [pc, #660]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009b4c:	f00a f99e 	bl	8013e8c <iprintf>
    return NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e15d      	b.n	8009e10 <pbuf_alloc+0x320>
  }

  switch (type) {
 8009b54:	79bb      	ldrb	r3, [r7, #6]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	f200 8134 	bhi.w	8009dc4 <pbuf_alloc+0x2d4>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <pbuf_alloc+0x74>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009d05 	.word	0x08009d05
 8009b68:	08009d91 	.word	0x08009d91
 8009b6c:	08009d91 	.word	0x08009d91
 8009b70:	08009b75 	.word	0x08009b75
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009b74:	200c      	movs	r0, #12
 8009b76:	f7ff fd81 	bl	800967c <memp_malloc>
 8009b7a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8009b82:	f7ff ff89 	bl	8009a98 <pbuf_pool_is_empty>
      return NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e142      	b.n	8009e10 <pbuf_alloc+0x320>
    }
    p->type = type;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	79ba      	ldrb	r2, [r7, #6]
 8009b8e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009b96:	8afb      	ldrh	r3, [r7, #22]
 8009b98:	3310      	adds	r3, #16
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3303      	adds	r3, #3
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d006      	beq.n	8009bc4 <pbuf_alloc+0xd4>
 8009bb6:	4b88      	ldr	r3, [pc, #544]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009bb8:	f240 1229 	movw	r2, #297	; 0x129
 8009bbc:	4989      	ldr	r1, [pc, #548]	; (8009de4 <pbuf_alloc+0x2f4>)
 8009bbe:	4888      	ldr	r0, [pc, #544]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009bc0:	f00a f964 	bl	8013e8c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	88ba      	ldrh	r2, [r7, #4]
 8009bc8:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009bca:	8afb      	ldrh	r3, [r7, #22]
 8009bcc:	3303      	adds	r3, #3
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8009bd6:	88bb      	ldrh	r3, [r7, #4]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	bf28      	it	cs
 8009bdc:	4613      	movcs	r3, r2
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	8952      	ldrh	r2, [r2, #10]
 8009bec:	441a      	add	r2, r3
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d906      	bls.n	8009c06 <pbuf_alloc+0x116>
 8009bf8:	4b77      	ldr	r3, [pc, #476]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009bfa:	f44f 7298 	mov.w	r2, #304	; 0x130
 8009bfe:	497a      	ldr	r1, [pc, #488]	; (8009de8 <pbuf_alloc+0x2f8>)
 8009c00:	4877      	ldr	r0, [pc, #476]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009c02:	f00a f943 	bl	8013e8c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009c06:	8afb      	ldrh	r3, [r7, #22]
 8009c08:	3303      	adds	r3, #3
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009c12:	d106      	bne.n	8009c22 <pbuf_alloc+0x132>
 8009c14:	4b70      	ldr	r3, [pc, #448]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009c16:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009c1a:	4974      	ldr	r1, [pc, #464]	; (8009dec <pbuf_alloc+0x2fc>)
 8009c1c:	4870      	ldr	r0, [pc, #448]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009c1e:	f00a f935 	bl	8013e8c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	2201      	movs	r2, #1
 8009c26:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009c2c:	88bb      	ldrh	r3, [r7, #4]
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	8952      	ldrh	r2, [r2, #10]
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8009c36:	e061      	b.n	8009cfc <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009c38:	200c      	movs	r0, #12
 8009c3a:	f7ff fd1f 	bl	800967c <memp_malloc>
 8009c3e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8009c46:	f7ff ff27 	bl	8009a98 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f000 fac2 	bl	800a1d4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e0dd      	b.n	8009e10 <pbuf_alloc+0x320>
      }
      q->type = type;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	79ba      	ldrb	r2, [r7, #6]
 8009c58:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c72:	4293      	cmp	r3, r2
 8009c74:	dd06      	ble.n	8009c84 <pbuf_alloc+0x194>
 8009c76:	4b58      	ldr	r3, [pc, #352]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009c78:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009c7c:	495c      	ldr	r1, [pc, #368]	; (8009df0 <pbuf_alloc+0x300>)
 8009c7e:	4858      	ldr	r0, [pc, #352]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009c80:	f00a f904 	bl	8013e8c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009c94:	bf28      	it	cs
 8009c96:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f103 0210 	add.w	r2, r3, #16
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d006      	beq.n	8009cc4 <pbuf_alloc+0x1d4>
 8009cb6:	4b48      	ldr	r3, [pc, #288]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009cb8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8009cbc:	494d      	ldr	r1, [pc, #308]	; (8009df4 <pbuf_alloc+0x304>)
 8009cbe:	4848      	ldr	r0, [pc, #288]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009cc0:	f00a f8e4 	bl	8013e8c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	69fa      	ldr	r2, [r7, #28]
 8009cca:	8952      	ldrh	r2, [r2, #10]
 8009ccc:	441a      	add	r2, r3
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d906      	bls.n	8009ce6 <pbuf_alloc+0x1f6>
 8009cd8:	4b3f      	ldr	r3, [pc, #252]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009cda:	f240 1255 	movw	r2, #341	; 0x155
 8009cde:	4942      	ldr	r1, [pc, #264]	; (8009de8 <pbuf_alloc+0x2f8>)
 8009ce0:	483f      	ldr	r0, [pc, #252]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009ce2:	f00a f8d3 	bl	8013e8c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	895b      	ldrh	r3, [r3, #10]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dc9a      	bgt.n	8009c38 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8009d02:	e07e      	b.n	8009e02 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009d04:	8afb      	ldrh	r3, [r7, #22]
 8009d06:	3313      	adds	r3, #19
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	88bb      	ldrh	r3, [r7, #4]
 8009d12:	3303      	adds	r3, #3
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009d20:	897a      	ldrh	r2, [r7, #10]
 8009d22:	88bb      	ldrh	r3, [r7, #4]
 8009d24:	3303      	adds	r3, #3
 8009d26:	f023 0303 	bic.w	r3, r3, #3
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d201      	bcs.n	8009d32 <pbuf_alloc+0x242>
        return NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e06e      	b.n	8009e10 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8009d32:	897b      	ldrh	r3, [r7, #10]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7ff fb31 	bl	800939c <mem_malloc>
 8009d3a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <pbuf_alloc+0x256>
      return NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	e064      	b.n	8009e10 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009d46:	8afb      	ldrh	r3, [r7, #22]
 8009d48:	3310      	adds	r3, #16
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3303      	adds	r3, #3
 8009d50:	f023 0303 	bic.w	r3, r3, #3
 8009d54:	461a      	mov	r2, r3
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	88ba      	ldrh	r2, [r7, #4]
 8009d5e:	811a      	strh	r2, [r3, #8]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	891a      	ldrh	r2, [r3, #8]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	79ba      	ldrb	r2, [r7, #6]
 8009d72:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f003 0303 	and.w	r3, r3, #3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d03f      	beq.n	8009e00 <pbuf_alloc+0x310>
 8009d80:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009d82:	f240 1277 	movw	r2, #375	; 0x177
 8009d86:	491c      	ldr	r1, [pc, #112]	; (8009df8 <pbuf_alloc+0x308>)
 8009d88:	4815      	ldr	r0, [pc, #84]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009d8a:	f00a f87f 	bl	8013e8c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8009d8e:	e037      	b.n	8009e00 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009d90:	200b      	movs	r0, #11
 8009d92:	f7ff fc73 	bl	800967c <memp_malloc>
 8009d96:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e036      	b.n	8009e10 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	88ba      	ldrh	r2, [r7, #4]
 8009dac:	811a      	strh	r2, [r3, #8]
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	891a      	ldrh	r2, [r3, #8]
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	79ba      	ldrb	r2, [r7, #6]
 8009dc0:	731a      	strb	r2, [r3, #12]
    break;
 8009dc2:	e01e      	b.n	8009e02 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <pbuf_alloc+0x2e8>)
 8009dc6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8009dca:	490c      	ldr	r1, [pc, #48]	; (8009dfc <pbuf_alloc+0x30c>)
 8009dcc:	4804      	ldr	r0, [pc, #16]	; (8009de0 <pbuf_alloc+0x2f0>)
 8009dce:	f00a f85d 	bl	8013e8c <iprintf>
    return NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e01c      	b.n	8009e10 <pbuf_alloc+0x320>
 8009dd6:	bf00      	nop
 8009dd8:	08015c80 	.word	0x08015c80
 8009ddc:	08015cb0 	.word	0x08015cb0
 8009de0:	08015ccc 	.word	0x08015ccc
 8009de4:	08015cf4 	.word	0x08015cf4
 8009de8:	08015d24 	.word	0x08015d24
 8009dec:	08015d58 	.word	0x08015d58
 8009df0:	08015d8c 	.word	0x08015d8c
 8009df4:	08015da0 	.word	0x08015da0
 8009df8:	08015dd0 	.word	0x08015dd0
 8009dfc:	08015dfc 	.word	0x08015dfc
    break;
 8009e00:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	2201      	movs	r2, #1
 8009e06:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4603      	mov	r3, r0
 8009e22:	71fb      	strb	r3, [r7, #7]
 8009e24:	460b      	mov	r3, r1
 8009e26:	80bb      	strh	r3, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d81b      	bhi.n	8009e6a <pbuf_alloced_custom+0x52>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <pbuf_alloced_custom+0x20>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e53 	.word	0x08009e53
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e5f 	.word	0x08009e5f
 8009e48:	08009e65 	.word	0x08009e65
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009e4c:	2336      	movs	r3, #54	; 0x36
 8009e4e:	81fb      	strh	r3, [r7, #14]
    break;
 8009e50:	e014      	b.n	8009e7c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009e52:	2322      	movs	r3, #34	; 0x22
 8009e54:	81fb      	strh	r3, [r7, #14]
    break;
 8009e56:	e011      	b.n	8009e7c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009e58:	230e      	movs	r3, #14
 8009e5a:	81fb      	strh	r3, [r7, #14]
    break;
 8009e5c:	e00e      	b.n	8009e7c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	81fb      	strh	r3, [r7, #14]
    break;
 8009e62:	e00b      	b.n	8009e7c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	81fb      	strh	r3, [r7, #14]
    break;
 8009e68:	e008      	b.n	8009e7c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009e6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <pbuf_alloced_custom+0xc8>)
 8009e6c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009e70:	491c      	ldr	r1, [pc, #112]	; (8009ee4 <pbuf_alloced_custom+0xcc>)
 8009e72:	481d      	ldr	r0, [pc, #116]	; (8009ee8 <pbuf_alloced_custom+0xd0>)
 8009e74:	f00a f80a 	bl	8013e8c <iprintf>
    return NULL;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e02d      	b.n	8009ed8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009e7c:	89fb      	ldrh	r3, [r7, #14]
 8009e7e:	3303      	adds	r3, #3
 8009e80:	f023 0203 	bic.w	r2, r3, #3
 8009e84:	88bb      	ldrh	r3, [r7, #4]
 8009e86:	441a      	add	r2, r3
 8009e88:	8bbb      	ldrh	r3, [r7, #28]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d901      	bls.n	8009e92 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e022      	b.n	8009ed8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d008      	beq.n	8009eb0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009e9e:	89fb      	ldrh	r3, [r7, #14]
 8009ea0:	3303      	adds	r3, #3
 8009ea2:	f023 0303 	bic.w	r3, r3, #3
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	441a      	add	r2, r3
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	605a      	str	r2, [r3, #4]
 8009eae:	e002      	b.n	8009eb6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	88ba      	ldrh	r2, [r7, #4]
 8009ec0:	811a      	strh	r2, [r3, #8]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	891a      	ldrh	r2, [r3, #8]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	79ba      	ldrb	r2, [r7, #6]
 8009ece:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009ed6:	683b      	ldr	r3, [r7, #0]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	08015c80 	.word	0x08015c80
 8009ee4:	08015e18 	.word	0x08015e18
 8009ee8:	08015ccc 	.word	0x08015ccc

08009eec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <pbuf_realloc+0x20>
 8009efe:	4b4b      	ldr	r3, [pc, #300]	; (800a02c <pbuf_realloc+0x140>)
 8009f00:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009f04:	494a      	ldr	r1, [pc, #296]	; (800a030 <pbuf_realloc+0x144>)
 8009f06:	484b      	ldr	r0, [pc, #300]	; (800a034 <pbuf_realloc+0x148>)
 8009f08:	f009 ffc0 	bl	8013e8c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7b1b      	ldrb	r3, [r3, #12]
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d012      	beq.n	8009f3a <pbuf_realloc+0x4e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7b1b      	ldrb	r3, [r3, #12]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d00e      	beq.n	8009f3a <pbuf_realloc+0x4e>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7b1b      	ldrb	r3, [r3, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <pbuf_realloc+0x4e>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	7b1b      	ldrb	r3, [r3, #12]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d006      	beq.n	8009f3a <pbuf_realloc+0x4e>
 8009f2c:	4b3f      	ldr	r3, [pc, #252]	; (800a02c <pbuf_realloc+0x140>)
 8009f2e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009f32:	4941      	ldr	r1, [pc, #260]	; (800a038 <pbuf_realloc+0x14c>)
 8009f34:	483f      	ldr	r0, [pc, #252]	; (800a034 <pbuf_realloc+0x148>)
 8009f36:	f009 ffa9 	bl	8013e8c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	891b      	ldrh	r3, [r3, #8]
 8009f3e:	887a      	ldrh	r2, [r7, #2]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d26f      	bcs.n	800a024 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009f44:	887b      	ldrh	r3, [r7, #2]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	8912      	ldrh	r2, [r2, #8]
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009f4e:	887b      	ldrh	r3, [r7, #2]
 8009f50:	827b      	strh	r3, [r7, #18]
  q = p;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009f56:	e025      	b.n	8009fa4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	895b      	ldrh	r3, [r3, #10]
 8009f5c:	8a7a      	ldrh	r2, [r7, #18]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	dd06      	ble.n	8009f7a <pbuf_realloc+0x8e>
 8009f6c:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <pbuf_realloc+0x140>)
 8009f6e:	f240 220b 	movw	r2, #523	; 0x20b
 8009f72:	4932      	ldr	r1, [pc, #200]	; (800a03c <pbuf_realloc+0x150>)
 8009f74:	482f      	ldr	r0, [pc, #188]	; (800a034 <pbuf_realloc+0x148>)
 8009f76:	f009 ff89 	bl	8013e8c <iprintf>
    q->tot_len += (u16_t)grow;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	891a      	ldrh	r2, [r3, #8]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4413      	add	r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <pbuf_realloc+0xb8>
 8009f96:	4b25      	ldr	r3, [pc, #148]	; (800a02c <pbuf_realloc+0x140>)
 8009f98:	f240 220f 	movw	r2, #527	; 0x20f
 8009f9c:	4928      	ldr	r1, [pc, #160]	; (800a040 <pbuf_realloc+0x154>)
 8009f9e:	4825      	ldr	r0, [pc, #148]	; (800a034 <pbuf_realloc+0x148>)
 8009fa0:	f009 ff74 	bl	8013e8c <iprintf>
  while (rem_len > q->len) {
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	895b      	ldrh	r3, [r3, #10]
 8009fa8:	8a7a      	ldrh	r2, [r7, #18]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d8d4      	bhi.n	8009f58 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	7b1b      	ldrb	r3, [r3, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d122      	bne.n	8009ffc <pbuf_realloc+0x110>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	895b      	ldrh	r3, [r3, #10]
 8009fba:	8a7a      	ldrh	r2, [r7, #18]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d01d      	beq.n	8009ffc <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	7b5b      	ldrb	r3, [r3, #13]
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d117      	bne.n	8009ffc <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	8a7b      	ldrh	r3, [r7, #18]
 8009fda:	4413      	add	r3, r2
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6978      	ldr	r0, [r7, #20]
 8009fe2:	f7ff f8f1 	bl	80091c8 <mem_trim>
 8009fe6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d106      	bne.n	8009ffc <pbuf_realloc+0x110>
 8009fee:	4b0f      	ldr	r3, [pc, #60]	; (800a02c <pbuf_realloc+0x140>)
 8009ff0:	f240 221d 	movw	r2, #541	; 0x21d
 8009ff4:	4913      	ldr	r1, [pc, #76]	; (800a044 <pbuf_realloc+0x158>)
 8009ff6:	480f      	ldr	r0, [pc, #60]	; (800a034 <pbuf_realloc+0x148>)
 8009ff8:	f009 ff48 	bl	8013e8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	8a7a      	ldrh	r2, [r7, #18]
 800a000:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	895a      	ldrh	r2, [r3, #10]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f8dc 	bl	800a1d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	e000      	b.n	800a026 <pbuf_realloc+0x13a>
    return;
 800a024:	bf00      	nop

}
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	08015c80 	.word	0x08015c80
 800a030:	08015e3c 	.word	0x08015e3c
 800a034:	08015ccc 	.word	0x08015ccc
 800a038:	08015e54 	.word	0x08015e54
 800a03c:	08015e70 	.word	0x08015e70
 800a040:	08015e84 	.word	0x08015e84
 800a044:	08015e9c 	.word	0x08015e9c

0800a048 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	807b      	strh	r3, [r7, #2]
 800a054:	4613      	mov	r3, r2
 800a056:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <pbuf_header_impl+0x24>
 800a05e:	4b46      	ldr	r3, [pc, #280]	; (800a178 <pbuf_header_impl+0x130>)
 800a060:	f240 223f 	movw	r2, #575	; 0x23f
 800a064:	4945      	ldr	r1, [pc, #276]	; (800a17c <pbuf_header_impl+0x134>)
 800a066:	4846      	ldr	r0, [pc, #280]	; (800a180 <pbuf_header_impl+0x138>)
 800a068:	f009 ff10 	bl	8013e8c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a06c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <pbuf_header_impl+0x32>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <pbuf_header_impl+0x36>
    return 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e078      	b.n	800a170 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a07e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a082:	2b00      	cmp	r3, #0
 800a084:	da10      	bge.n	800a0a8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a086:	887b      	ldrh	r3, [r7, #2]
 800a088:	425b      	negs	r3, r3
 800a08a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	895b      	ldrh	r3, [r3, #10]
 800a090:	89fa      	ldrh	r2, [r7, #14]
 800a092:	429a      	cmp	r2, r3
 800a094:	d90a      	bls.n	800a0ac <pbuf_header_impl+0x64>
 800a096:	4b38      	ldr	r3, [pc, #224]	; (800a178 <pbuf_header_impl+0x130>)
 800a098:	f240 2247 	movw	r2, #583	; 0x247
 800a09c:	4939      	ldr	r1, [pc, #228]	; (800a184 <pbuf_header_impl+0x13c>)
 800a09e:	4838      	ldr	r0, [pc, #224]	; (800a180 <pbuf_header_impl+0x138>)
 800a0a0:	f009 fef4 	bl	8013e8c <iprintf>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e063      	b.n	800a170 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a0a8:	887b      	ldrh	r3, [r7, #2]
 800a0aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7b1b      	ldrb	r3, [r3, #12]
 800a0b0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a0b8:	89bb      	ldrh	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <pbuf_header_impl+0x7c>
 800a0be:	89bb      	ldrh	r3, [r7, #12]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d112      	bne.n	800a0ea <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	441a      	add	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3310      	adds	r3, #16
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d238      	bcs.n	800a152 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e042      	b.n	800a170 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a0ea:	89bb      	ldrh	r3, [r7, #12]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d002      	beq.n	800a0f6 <pbuf_header_impl+0xae>
 800a0f0:	89bb      	ldrh	r3, [r7, #12]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d124      	bne.n	800a140 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a0f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	da0d      	bge.n	800a11a <pbuf_header_impl+0xd2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	895b      	ldrh	r3, [r3, #10]
 800a102:	89fa      	ldrh	r2, [r7, #14]
 800a104:	429a      	cmp	r2, r3
 800a106:	d808      	bhi.n	800a11a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a110:	425b      	negs	r3, r3
 800a112:	441a      	add	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	605a      	str	r2, [r3, #4]
 800a118:	e011      	b.n	800a13e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a11a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dd0b      	ble.n	800a13a <pbuf_header_impl+0xf2>
 800a122:	787b      	ldrb	r3, [r7, #1]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a130:	425b      	negs	r3, r3
 800a132:	441a      	add	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]
 800a138:	e001      	b.n	800a13e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e018      	b.n	800a170 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a13e:	e008      	b.n	800a152 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a140:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <pbuf_header_impl+0x130>)
 800a142:	f240 2277 	movw	r2, #631	; 0x277
 800a146:	4910      	ldr	r1, [pc, #64]	; (800a188 <pbuf_header_impl+0x140>)
 800a148:	480d      	ldr	r0, [pc, #52]	; (800a180 <pbuf_header_impl+0x138>)
 800a14a:	f009 fe9f 	bl	8013e8c <iprintf>
    return 1;
 800a14e:	2301      	movs	r3, #1
 800a150:	e00e      	b.n	800a170 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	895a      	ldrh	r2, [r3, #10]
 800a156:	887b      	ldrh	r3, [r7, #2]
 800a158:	4413      	add	r3, r2
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	891a      	ldrh	r2, [r3, #8]
 800a164:	887b      	ldrh	r3, [r7, #2]
 800a166:	4413      	add	r3, r2
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	08015c80 	.word	0x08015c80
 800a17c:	08015eb8 	.word	0x08015eb8
 800a180:	08015ccc 	.word	0x08015ccc
 800a184:	08015ec4 	.word	0x08015ec4
 800a188:	08015ee4 	.word	0x08015ee4

0800a18c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a19c:	2200      	movs	r2, #0
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff ff51 	bl	800a048 <pbuf_header_impl>
 800a1a6:	4603      	mov	r3, r0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a1bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ff3f 	bl	800a048 <pbuf_header_impl>
 800a1ca:	4603      	mov	r3, r0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <pbuf_free+0x22>
 800a1e8:	4b41      	ldr	r3, [pc, #260]	; (800a2f0 <pbuf_free+0x11c>)
 800a1ea:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a1ee:	4941      	ldr	r1, [pc, #260]	; (800a2f4 <pbuf_free+0x120>)
 800a1f0:	4841      	ldr	r0, [pc, #260]	; (800a2f8 <pbuf_free+0x124>)
 800a1f2:	f009 fe4b 	bl	8013e8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e076      	b.n	800a2e8 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	7b1b      	ldrb	r3, [r3, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d012      	beq.n	800a228 <pbuf_free+0x54>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7b1b      	ldrb	r3, [r3, #12]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d00e      	beq.n	800a228 <pbuf_free+0x54>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	7b1b      	ldrb	r3, [r3, #12]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d00a      	beq.n	800a228 <pbuf_free+0x54>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7b1b      	ldrb	r3, [r3, #12]
 800a216:	2b03      	cmp	r3, #3
 800a218:	d006      	beq.n	800a228 <pbuf_free+0x54>
 800a21a:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <pbuf_free+0x11c>)
 800a21c:	f240 22de 	movw	r2, #734	; 0x2de
 800a220:	4936      	ldr	r1, [pc, #216]	; (800a2fc <pbuf_free+0x128>)
 800a222:	4835      	ldr	r0, [pc, #212]	; (800a2f8 <pbuf_free+0x124>)
 800a224:	f009 fe32 	bl	8013e8c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a22c:	e058      	b.n	800a2e0 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a22e:	f008 fd71 	bl	8012d14 <sys_arch_protect>
 800a232:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	89db      	ldrh	r3, [r3, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <pbuf_free+0x76>
 800a23c:	4b2c      	ldr	r3, [pc, #176]	; (800a2f0 <pbuf_free+0x11c>)
 800a23e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a242:	492f      	ldr	r1, [pc, #188]	; (800a300 <pbuf_free+0x12c>)
 800a244:	482c      	ldr	r0, [pc, #176]	; (800a2f8 <pbuf_free+0x124>)
 800a246:	f009 fe21 	bl	8013e8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	89db      	ldrh	r3, [r3, #14]
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29a      	uxth	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	81da      	strh	r2, [r3, #14]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	89db      	ldrh	r3, [r3, #14]
 800a25a:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800a25c:	69b8      	ldr	r0, [r7, #24]
 800a25e:	f008 fd67 	bl	8012d30 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a262:	8afb      	ldrh	r3, [r7, #22]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d139      	bne.n	800a2dc <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	7b1b      	ldrb	r3, [r3, #12]
 800a272:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	7b5b      	ldrb	r3, [r3, #13]
 800a278:	f003 0302 	and.w	r3, r3, #2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d011      	beq.n	800a2a4 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d106      	bne.n	800a29a <pbuf_free+0xc6>
 800a28c:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <pbuf_free+0x11c>)
 800a28e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a292:	491c      	ldr	r1, [pc, #112]	; (800a304 <pbuf_free+0x130>)
 800a294:	4818      	ldr	r0, [pc, #96]	; (800a2f8 <pbuf_free+0x124>)
 800a296:	f009 fdf9 	bl	8013e8c <iprintf>
        pc->custom_free_function(p);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
 800a2a2:	e015      	b.n	800a2d0 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800a2a4:	89fb      	ldrh	r3, [r7, #14]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d104      	bne.n	800a2b4 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	200c      	movs	r0, #12
 800a2ae:	f7ff fa37 	bl	8009720 <memp_free>
 800a2b2:	e00d      	b.n	800a2d0 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800a2b4:	89fb      	ldrh	r3, [r7, #14]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d002      	beq.n	800a2c0 <pbuf_free+0xec>
 800a2ba:	89fb      	ldrh	r3, [r7, #14]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d104      	bne.n	800a2ca <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800a2c0:	6879      	ldr	r1, [r7, #4]
 800a2c2:	200b      	movs	r0, #11
 800a2c4:	f7ff fa2c 	bl	8009720 <memp_free>
 800a2c8:	e002      	b.n	800a2d0 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7fe ff0e 	bl	80090ec <mem_free>
        }
      }
      count++;
 800a2d0:	7ffb      	ldrb	r3, [r7, #31]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	607b      	str	r3, [r7, #4]
 800a2da:	e001      	b.n	800a2e0 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1a3      	bne.n	800a22e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	08015c80 	.word	0x08015c80
 800a2f4:	08015eb8 	.word	0x08015eb8
 800a2f8:	08015ccc 	.word	0x08015ccc
 800a2fc:	08015ef4 	.word	0x08015ef4
 800a300:	08015f0c 	.word	0x08015f0c
 800a304:	08015f24 	.word	0x08015f24

0800a308 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a314:	e005      	b.n	800a322 <pbuf_clen+0x1a>
    ++len;
 800a316:	89fb      	ldrh	r3, [r7, #14]
 800a318:	3301      	adds	r3, #1
 800a31a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1f6      	bne.n	800a316 <pbuf_clen+0xe>
  }
  return len;
 800a328:	89fb      	ldrh	r3, [r7, #14]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
	...

0800a338 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d016      	beq.n	800a374 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800a346:	f008 fce5 	bl	8012d14 <sys_arch_protect>
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	89db      	ldrh	r3, [r3, #14]
 800a350:	3301      	adds	r3, #1
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	81da      	strh	r2, [r3, #14]
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f008 fce9 	bl	8012d30 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	89db      	ldrh	r3, [r3, #14]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <pbuf_ref+0x3c>
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <pbuf_ref+0x44>)
 800a368:	f240 3239 	movw	r2, #825	; 0x339
 800a36c:	4904      	ldr	r1, [pc, #16]	; (800a380 <pbuf_ref+0x48>)
 800a36e:	4805      	ldr	r0, [pc, #20]	; (800a384 <pbuf_ref+0x4c>)
 800a370:	f009 fd8c 	bl	8013e8c <iprintf>
  }
}
 800a374:	bf00      	nop
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	08015c80 	.word	0x08015c80
 800a380:	08015f48 	.word	0x08015f48
 800a384:	08015ccc 	.word	0x08015ccc

0800a388 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <pbuf_cat+0x16>
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d107      	bne.n	800a3ae <pbuf_cat+0x26>
 800a39e:	4b20      	ldr	r3, [pc, #128]	; (800a420 <pbuf_cat+0x98>)
 800a3a0:	f240 324d 	movw	r2, #845	; 0x34d
 800a3a4:	491f      	ldr	r1, [pc, #124]	; (800a424 <pbuf_cat+0x9c>)
 800a3a6:	4820      	ldr	r0, [pc, #128]	; (800a428 <pbuf_cat+0xa0>)
 800a3a8:	f009 fd70 	bl	8013e8c <iprintf>
 800a3ac:	e034      	b.n	800a418 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e00a      	b.n	800a3ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	891a      	ldrh	r2, [r3, #8]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	891a      	ldrh	r2, [r3, #8]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	895b      	ldrh	r3, [r3, #10]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d006      	beq.n	800a3ec <pbuf_cat+0x64>
 800a3de:	4b10      	ldr	r3, [pc, #64]	; (800a420 <pbuf_cat+0x98>)
 800a3e0:	f240 3255 	movw	r2, #853	; 0x355
 800a3e4:	4911      	ldr	r1, [pc, #68]	; (800a42c <pbuf_cat+0xa4>)
 800a3e6:	4810      	ldr	r0, [pc, #64]	; (800a428 <pbuf_cat+0xa0>)
 800a3e8:	f009 fd50 	bl	8013e8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d006      	beq.n	800a402 <pbuf_cat+0x7a>
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <pbuf_cat+0x98>)
 800a3f6:	f240 3256 	movw	r2, #854	; 0x356
 800a3fa:	490d      	ldr	r1, [pc, #52]	; (800a430 <pbuf_cat+0xa8>)
 800a3fc:	480a      	ldr	r0, [pc, #40]	; (800a428 <pbuf_cat+0xa0>)
 800a3fe:	f009 fd45 	bl	8013e8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	891a      	ldrh	r2, [r3, #8]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	891b      	ldrh	r3, [r3, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	08015c80 	.word	0x08015c80
 800a424:	08015f5c 	.word	0x08015f5c
 800a428:	08015ccc 	.word	0x08015ccc
 800a42c:	08015f94 	.word	0x08015f94
 800a430:	08015fc4 	.word	0x08015fc4

0800a434 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ffa1 	bl	800a388 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a446:	6838      	ldr	r0, [r7, #0]
 800a448:	f7ff ff76 	bl	800a338 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800a45e:	2300      	movs	r3, #0
 800a460:	81fb      	strh	r3, [r7, #14]
 800a462:	2300      	movs	r3, #0
 800a464:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d008      	beq.n	800a47e <pbuf_copy+0x2a>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <pbuf_copy+0x2a>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	891a      	ldrh	r2, [r3, #8]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	891b      	ldrh	r3, [r3, #8]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d209      	bcs.n	800a492 <pbuf_copy+0x3e>
 800a47e:	4b54      	ldr	r3, [pc, #336]	; (800a5d0 <pbuf_copy+0x17c>)
 800a480:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a484:	4953      	ldr	r1, [pc, #332]	; (800a5d4 <pbuf_copy+0x180>)
 800a486:	4854      	ldr	r0, [pc, #336]	; (800a5d8 <pbuf_copy+0x184>)
 800a488:	f009 fd00 	bl	8013e8c <iprintf>
 800a48c:	f06f 030f 	mvn.w	r3, #15
 800a490:	e099      	b.n	800a5c6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	895b      	ldrh	r3, [r3, #10]
 800a496:	461a      	mov	r2, r3
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	895b      	ldrh	r3, [r3, #10]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	89bb      	ldrh	r3, [r7, #12]
 800a4a4:	1acb      	subs	r3, r1, r3
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	db05      	blt.n	800a4b6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	895a      	ldrh	r2, [r3, #10]
 800a4ae:	89bb      	ldrh	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	817b      	strh	r3, [r7, #10]
 800a4b4:	e004      	b.n	800a4c0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	895a      	ldrh	r2, [r3, #10]
 800a4ba:	89fb      	ldrh	r3, [r7, #14]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	18d0      	adds	r0, r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	89bb      	ldrh	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	897a      	ldrh	r2, [r7, #10]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	f009 fcc7 	bl	8013e66 <memcpy>
    offset_to += len;
 800a4d8:	89fa      	ldrh	r2, [r7, #14]
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	4413      	add	r3, r2
 800a4de:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800a4e0:	89ba      	ldrh	r2, [r7, #12]
 800a4e2:	897b      	ldrh	r3, [r7, #10]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	895b      	ldrh	r3, [r3, #10]
 800a4ec:	89fa      	ldrh	r2, [r7, #14]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d906      	bls.n	800a500 <pbuf_copy+0xac>
 800a4f2:	4b37      	ldr	r3, [pc, #220]	; (800a5d0 <pbuf_copy+0x17c>)
 800a4f4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a4f8:	4938      	ldr	r1, [pc, #224]	; (800a5dc <pbuf_copy+0x188>)
 800a4fa:	4837      	ldr	r0, [pc, #220]	; (800a5d8 <pbuf_copy+0x184>)
 800a4fc:	f009 fcc6 	bl	8013e8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	895b      	ldrh	r3, [r3, #10]
 800a504:	89ba      	ldrh	r2, [r7, #12]
 800a506:	429a      	cmp	r2, r3
 800a508:	d906      	bls.n	800a518 <pbuf_copy+0xc4>
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <pbuf_copy+0x17c>)
 800a50c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a510:	4933      	ldr	r1, [pc, #204]	; (800a5e0 <pbuf_copy+0x18c>)
 800a512:	4831      	ldr	r0, [pc, #196]	; (800a5d8 <pbuf_copy+0x184>)
 800a514:	f009 fcba 	bl	8013e8c <iprintf>
    if (offset_from >= p_from->len) {
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	895b      	ldrh	r3, [r3, #10]
 800a51c:	89ba      	ldrh	r2, [r7, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d304      	bcc.n	800a52c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	895b      	ldrh	r3, [r3, #10]
 800a530:	89fa      	ldrh	r2, [r7, #14]
 800a532:	429a      	cmp	r2, r3
 800a534:	d114      	bne.n	800a560 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10c      	bne.n	800a560 <pbuf_copy+0x10c>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d009      	beq.n	800a560 <pbuf_copy+0x10c>
 800a54c:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <pbuf_copy+0x17c>)
 800a54e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a552:	4924      	ldr	r1, [pc, #144]	; (800a5e4 <pbuf_copy+0x190>)
 800a554:	4820      	ldr	r0, [pc, #128]	; (800a5d8 <pbuf_copy+0x184>)
 800a556:	f009 fc99 	bl	8013e8c <iprintf>
 800a55a:	f06f 030f 	mvn.w	r3, #15
 800a55e:	e032      	b.n	800a5c6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d013      	beq.n	800a58e <pbuf_copy+0x13a>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	895a      	ldrh	r2, [r3, #10]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	891b      	ldrh	r3, [r3, #8]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d10d      	bne.n	800a58e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <pbuf_copy+0x13a>
 800a57a:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <pbuf_copy+0x17c>)
 800a57c:	f240 32de 	movw	r2, #990	; 0x3de
 800a580:	4919      	ldr	r1, [pc, #100]	; (800a5e8 <pbuf_copy+0x194>)
 800a582:	4815      	ldr	r0, [pc, #84]	; (800a5d8 <pbuf_copy+0x184>)
 800a584:	f009 fc82 	bl	8013e8c <iprintf>
 800a588:	f06f 0305 	mvn.w	r3, #5
 800a58c:	e01b      	b.n	800a5c6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d013      	beq.n	800a5bc <pbuf_copy+0x168>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	895a      	ldrh	r2, [r3, #10]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	891b      	ldrh	r3, [r3, #8]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d10d      	bne.n	800a5bc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d009      	beq.n	800a5bc <pbuf_copy+0x168>
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <pbuf_copy+0x17c>)
 800a5aa:	f240 32e3 	movw	r2, #995	; 0x3e3
 800a5ae:	490e      	ldr	r1, [pc, #56]	; (800a5e8 <pbuf_copy+0x194>)
 800a5b0:	4809      	ldr	r0, [pc, #36]	; (800a5d8 <pbuf_copy+0x184>)
 800a5b2:	f009 fc6b 	bl	8013e8c <iprintf>
 800a5b6:	f06f 0305 	mvn.w	r3, #5
 800a5ba:	e004      	b.n	800a5c6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f47f af67 	bne.w	800a492 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	08015c80 	.word	0x08015c80
 800a5d4:	08016010 	.word	0x08016010
 800a5d8:	08015ccc 	.word	0x08015ccc
 800a5dc:	08016040 	.word	0x08016040
 800a5e0:	08016058 	.word	0x08016058
 800a5e4:	08016074 	.word	0x08016074
 800a5e8:	08016084 	.word	0x08016084

0800a5ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	80fb      	strh	r3, [r7, #6]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d108      	bne.n	800a61e <pbuf_copy_partial+0x32>
 800a60c:	4b30      	ldr	r3, [pc, #192]	; (800a6d0 <pbuf_copy_partial+0xe4>)
 800a60e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a612:	4930      	ldr	r1, [pc, #192]	; (800a6d4 <pbuf_copy_partial+0xe8>)
 800a614:	4830      	ldr	r0, [pc, #192]	; (800a6d8 <pbuf_copy_partial+0xec>)
 800a616:	f009 fc39 	bl	8013e8c <iprintf>
 800a61a:	2300      	movs	r3, #0
 800a61c:	e054      	b.n	800a6c8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d108      	bne.n	800a636 <pbuf_copy_partial+0x4a>
 800a624:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <pbuf_copy_partial+0xe4>)
 800a626:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a62a:	492c      	ldr	r1, [pc, #176]	; (800a6dc <pbuf_copy_partial+0xf0>)
 800a62c:	482a      	ldr	r0, [pc, #168]	; (800a6d8 <pbuf_copy_partial+0xec>)
 800a62e:	f009 fc2d 	bl	8013e8c <iprintf>
 800a632:	2300      	movs	r3, #0
 800a634:	e048      	b.n	800a6c8 <pbuf_copy_partial+0xdc>

  left = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <pbuf_copy_partial+0x5a>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <pbuf_copy_partial+0x5e>
    return 0;
 800a646:	2300      	movs	r3, #0
 800a648:	e03e      	b.n	800a6c8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	61fb      	str	r3, [r7, #28]
 800a64e:	e034      	b.n	800a6ba <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800a650:	88bb      	ldrh	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <pbuf_copy_partial+0x80>
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	895b      	ldrh	r3, [r3, #10]
 800a65a:	88ba      	ldrh	r2, [r7, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d305      	bcc.n	800a66c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	895b      	ldrh	r3, [r3, #10]
 800a664:	88ba      	ldrh	r2, [r7, #4]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	80bb      	strh	r3, [r7, #4]
 800a66a:	e023      	b.n	800a6b4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	895a      	ldrh	r2, [r3, #10]
 800a670:	88bb      	ldrh	r3, [r7, #4]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a676:	8b3a      	ldrh	r2, [r7, #24]
 800a678:	88fb      	ldrh	r3, [r7, #6]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d901      	bls.n	800a682 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a682:	8b7b      	ldrh	r3, [r7, #26]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	18d0      	adds	r0, r2, r3
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	88bb      	ldrh	r3, [r7, #4]
 800a68e:	4413      	add	r3, r2
 800a690:	8b3a      	ldrh	r2, [r7, #24]
 800a692:	4619      	mov	r1, r3
 800a694:	f009 fbe7 	bl	8013e66 <memcpy>
      copied_total += buf_copy_len;
 800a698:	8afa      	ldrh	r2, [r7, #22]
 800a69a:	8b3b      	ldrh	r3, [r7, #24]
 800a69c:	4413      	add	r3, r2
 800a69e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800a6a0:	8b7a      	ldrh	r2, [r7, #26]
 800a6a2:	8b3b      	ldrh	r3, [r7, #24]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800a6a8:	88fa      	ldrh	r2, [r7, #6]
 800a6aa:	8b3b      	ldrh	r3, [r7, #24]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <pbuf_copy_partial+0xda>
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1c4      	bne.n	800a650 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08015c80 	.word	0x08015c80
 800a6d4:	080160b0 	.word	0x080160b0
 800a6d8:	08015ccc 	.word	0x08015ccc
 800a6dc:	080160d0 	.word	0x080160d0

0800a6e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a6e4:	bf00      	nop
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a6f4:	f000 ffb6 	bl	800b664 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a6f8:	4b07      	ldr	r3, [pc, #28]	; (800a718 <tcp_tmr+0x28>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	4b05      	ldr	r3, [pc, #20]	; (800a718 <tcp_tmr+0x28>)
 800a702:	701a      	strb	r2, [r3, #0]
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <tcp_tmr+0x28>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a710:	f000 fce8 	bl	800b0e4 <tcp_slowtmr>
  }
}
 800a714:	bf00      	nop
 800a716:	bd80      	pop	{r7, pc}
 800a718:	2000c5dd 	.word	0x2000c5dd

0800a71c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e00a      	b.n	800a742 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d102      	bne.n	800a73c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1f1      	bne.n	800a72c <tcp_remove_listener+0x10>
      }
   }
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <tcp_listen_closed+0x1a>
 800a762:	4b13      	ldr	r3, [pc, #76]	; (800a7b0 <tcp_listen_closed+0x5c>)
 800a764:	22c0      	movs	r2, #192	; 0xc0
 800a766:	4913      	ldr	r1, [pc, #76]	; (800a7b4 <tcp_listen_closed+0x60>)
 800a768:	4813      	ldr	r0, [pc, #76]	; (800a7b8 <tcp_listen_closed+0x64>)
 800a76a:	f009 fb8f 	bl	8013e8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	7d1b      	ldrb	r3, [r3, #20]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d005      	beq.n	800a782 <tcp_listen_closed+0x2e>
 800a776:	4b0e      	ldr	r3, [pc, #56]	; (800a7b0 <tcp_listen_closed+0x5c>)
 800a778:	22c1      	movs	r2, #193	; 0xc1
 800a77a:	4910      	ldr	r1, [pc, #64]	; (800a7bc <tcp_listen_closed+0x68>)
 800a77c:	480e      	ldr	r0, [pc, #56]	; (800a7b8 <tcp_listen_closed+0x64>)
 800a77e:	f009 fb85 	bl	8013e8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a782:	2301      	movs	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	e00b      	b.n	800a7a0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800a788:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <tcp_listen_closed+0x6c>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff ffc1 	bl	800a71c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d9f0      	bls.n	800a788 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	08016204 	.word	0x08016204
 800a7b4:	08016234 	.word	0x08016234
 800a7b8:	08016240 	.word	0x08016240
 800a7bc:	08016268 	.word	0x08016268
 800a7c0:	08017764 	.word	0x08017764

0800a7c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a7c4:	b5b0      	push	{r4, r5, r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d075      	beq.n	800a8c2 <tcp_close_shutdown+0xfe>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7d1b      	ldrb	r3, [r3, #20]
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d003      	beq.n	800a7e6 <tcp_close_shutdown+0x22>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7d1b      	ldrb	r3, [r3, #20]
 800a7e2:	2b07      	cmp	r3, #7
 800a7e4:	d16d      	bne.n	800a8c2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d104      	bne.n	800a7f8 <tcp_close_shutdown+0x34>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7f6:	d064      	beq.n	800a8c2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7e9b      	ldrb	r3, [r3, #26]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	d106      	bne.n	800a812 <tcp_close_shutdown+0x4e>
 800a804:	4b59      	ldr	r3, [pc, #356]	; (800a96c <tcp_close_shutdown+0x1a8>)
 800a806:	f240 120f 	movw	r2, #271	; 0x10f
 800a80a:	4959      	ldr	r1, [pc, #356]	; (800a970 <tcp_close_shutdown+0x1ac>)
 800a80c:	4859      	ldr	r0, [pc, #356]	; (800a974 <tcp_close_shutdown+0x1b0>)
 800a80e:	f009 fb3d 	bl	8013e8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a81a:	687c      	ldr	r4, [r7, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	1d1d      	adds	r5, r3, #4
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8adb      	ldrh	r3, [r3, #22]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	8b12      	ldrh	r2, [r2, #24]
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	462b      	mov	r3, r5
 800a82e:	4622      	mov	r2, r4
 800a830:	f004 ff1a 	bl	800f668 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fa4b 	bl	800bcd0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a83a:	4b4f      	ldr	r3, [pc, #316]	; (800a978 <tcp_close_shutdown+0x1b4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	429a      	cmp	r2, r3
 800a842:	d105      	bne.n	800a850 <tcp_close_shutdown+0x8c>
 800a844:	4b4c      	ldr	r3, [pc, #304]	; (800a978 <tcp_close_shutdown+0x1b4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	4a4b      	ldr	r2, [pc, #300]	; (800a978 <tcp_close_shutdown+0x1b4>)
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	e013      	b.n	800a878 <tcp_close_shutdown+0xb4>
 800a850:	4b49      	ldr	r3, [pc, #292]	; (800a978 <tcp_close_shutdown+0x1b4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	e00c      	b.n	800a872 <tcp_close_shutdown+0xae>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d104      	bne.n	800a86c <tcp_close_shutdown+0xa8>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	e005      	b.n	800a878 <tcp_close_shutdown+0xb4>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1ef      	bne.n	800a858 <tcp_close_shutdown+0x94>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	60da      	str	r2, [r3, #12]
 800a87e:	4b3f      	ldr	r3, [pc, #252]	; (800a97c <tcp_close_shutdown+0x1b8>)
 800a880:	2201      	movs	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d10c      	bne.n	800a8a6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	220a      	movs	r2, #10
 800a890:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a892:	4b3b      	ldr	r3, [pc, #236]	; (800a980 <tcp_close_shutdown+0x1bc>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	60da      	str	r2, [r3, #12]
 800a89a:	4a39      	ldr	r2, [pc, #228]	; (800a980 <tcp_close_shutdown+0x1bc>)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	f005 f932 	bl	800fb08 <tcp_timer_needed>
 800a8a4:	e00b      	b.n	800a8be <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800a8a6:	4b37      	ldr	r3, [pc, #220]	; (800a984 <tcp_close_shutdown+0x1c0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d102      	bne.n	800a8b6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800a8b0:	f003 fd72 	bl	800e398 <tcp_trigger_input_pcb_close>
 800a8b4:	e003      	b.n	800a8be <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	2001      	movs	r0, #1
 800a8ba:	f7fe ff31 	bl	8009720 <memp_free>
        }
      }
      return ERR_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e050      	b.n	800a964 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	7d1b      	ldrb	r3, [r3, #20]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d02e      	beq.n	800a928 <tcp_close_shutdown+0x164>
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d038      	beq.n	800a940 <tcp_close_shutdown+0x17c>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d142      	bne.n	800a958 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	8adb      	ldrh	r3, [r3, #22]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d021      	beq.n	800a91e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8da:	4b2b      	ldr	r3, [pc, #172]	; (800a988 <tcp_close_shutdown+0x1c4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d105      	bne.n	800a8f0 <tcp_close_shutdown+0x12c>
 800a8e4:	4b28      	ldr	r3, [pc, #160]	; (800a988 <tcp_close_shutdown+0x1c4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	4a27      	ldr	r2, [pc, #156]	; (800a988 <tcp_close_shutdown+0x1c4>)
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e013      	b.n	800a918 <tcp_close_shutdown+0x154>
 800a8f0:	4b25      	ldr	r3, [pc, #148]	; (800a988 <tcp_close_shutdown+0x1c4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
 800a8f6:	e00c      	b.n	800a912 <tcp_close_shutdown+0x14e>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d104      	bne.n	800a90c <tcp_close_shutdown+0x148>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68da      	ldr	r2, [r3, #12]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	60da      	str	r2, [r3, #12]
 800a90a:	e005      	b.n	800a918 <tcp_close_shutdown+0x154>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	60bb      	str	r3, [r7, #8]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ef      	bne.n	800a8f8 <tcp_close_shutdown+0x134>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	2001      	movs	r0, #1
 800a922:	f7fe fefd 	bl	8009720 <memp_free>
    break;
 800a926:	e01c      	b.n	800a962 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff ff13 	bl	800a754 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	4816      	ldr	r0, [pc, #88]	; (800a98c <tcp_close_shutdown+0x1c8>)
 800a932:	f001 fa0f 	bl	800bd54 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	2002      	movs	r0, #2
 800a93a:	f7fe fef1 	bl	8009720 <memp_free>
    break;
 800a93e:	e010      	b.n	800a962 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	480d      	ldr	r0, [pc, #52]	; (800a978 <tcp_close_shutdown+0x1b4>)
 800a944:	f001 fa06 	bl	800bd54 <tcp_pcb_remove>
 800a948:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <tcp_close_shutdown+0x1b8>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	2001      	movs	r0, #1
 800a952:	f7fe fee5 	bl	8009720 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800a956:	e004      	b.n	800a962 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f819 	bl	800a990 <tcp_close_shutdown_fin>
 800a95e:	4603      	mov	r3, r0
 800a960:	e000      	b.n	800a964 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bdb0      	pop	{r4, r5, r7, pc}
 800a96c:	08016204 	.word	0x08016204
 800a970:	08016280 	.word	0x08016280
 800a974:	08016240 	.word	0x08016240
 800a978:	2001054c 	.word	0x2001054c
 800a97c:	20010548 	.word	0x20010548
 800a980:	2001055c 	.word	0x2001055c
 800a984:	20010560 	.word	0x20010560
 800a988:	20010558 	.word	0x20010558
 800a98c:	20010554 	.word	0x20010554

0800a990 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <tcp_close_shutdown_fin+0x1c>
 800a99e:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <tcp_close_shutdown_fin+0xc0>)
 800a9a0:	f240 124d 	movw	r2, #333	; 0x14d
 800a9a4:	492b      	ldr	r1, [pc, #172]	; (800aa54 <tcp_close_shutdown_fin+0xc4>)
 800a9a6:	482c      	ldr	r0, [pc, #176]	; (800aa58 <tcp_close_shutdown_fin+0xc8>)
 800a9a8:	f009 fa70 	bl	8013e8c <iprintf>

  switch (pcb->state) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7d1b      	ldrb	r3, [r3, #20]
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	d010      	beq.n	800a9d6 <tcp_close_shutdown_fin+0x46>
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	d01b      	beq.n	800a9f0 <tcp_close_shutdown_fin+0x60>
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d126      	bne.n	800aa0a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f003 fd77 	bl	800e4b0 <tcp_send_fin>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d11f      	bne.n	800aa0e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2205      	movs	r2, #5
 800a9d2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a9d4:	e01b      	b.n	800aa0e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f003 fd6a 	bl	800e4b0 <tcp_send_fin>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d114      	bne.n	800aa12 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2205      	movs	r2, #5
 800a9ec:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a9ee:	e010      	b.n	800aa12 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f003 fd5d 	bl	800e4b0 <tcp_send_fin>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d109      	bne.n	800aa16 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2209      	movs	r2, #9
 800aa06:	751a      	strb	r2, [r3, #20]
    }
    break;
 800aa08:	e005      	b.n	800aa16 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e01c      	b.n	800aa48 <tcp_close_shutdown_fin+0xb8>
    break;
 800aa0e:	bf00      	nop
 800aa10:	e002      	b.n	800aa18 <tcp_close_shutdown_fin+0x88>
    break;
 800aa12:	bf00      	nop
 800aa14:	e000      	b.n	800aa18 <tcp_close_shutdown_fin+0x88>
    break;
 800aa16:	bf00      	nop
  }

  if (err == ERR_OK) {
 800aa18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f004 fb97 	bl	800f154 <tcp_output>
 800aa26:	e00d      	b.n	800aa44 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800aa28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d108      	bne.n	800aa44 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7e9b      	ldrb	r3, [r3, #26]
 800aa36:	f043 0308 	orr.w	r3, r3, #8
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	e001      	b.n	800aa48 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800aa44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	08016204 	.word	0x08016204
 800aa54:	08016234 	.word	0x08016234
 800aa58:	08016240 	.word	0x08016240

0800aa5c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7d1b      	ldrb	r3, [r3, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d006      	beq.n	800aa7a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	7e9b      	ldrb	r3, [r3, #26]
 800aa70:	f043 0310 	orr.w	r3, r3, #16
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fea1 	bl	800a7c4 <tcp_close_shutdown>
 800aa82:	4603      	mov	r3, r0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	7d1b      	ldrb	r3, [r3, #20]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d102      	bne.n	800aaa6 <tcp_shutdown+0x1a>
    return ERR_CONN;
 800aaa0:	f06f 030a 	mvn.w	r3, #10
 800aaa4:	e035      	b.n	800ab12 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01b      	beq.n	800aae4 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	7e9b      	ldrb	r3, [r3, #26]
 800aab0:	f043 0310 	orr.w	r3, r3, #16
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d005      	beq.n	800aacc <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800aac0:	2101      	movs	r1, #1
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f7ff fe7e 	bl	800a7c4 <tcp_close_shutdown>
 800aac8:	4603      	mov	r3, r0
 800aaca:	e022      	b.n	800ab12 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d007      	beq.n	800aae4 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff fb7b 	bl	800a1d4 <pbuf_free>
      pcb->refused_data = NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d012      	beq.n	800ab10 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7d1b      	ldrb	r3, [r3, #20]
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	db0b      	blt.n	800ab0a <tcp_shutdown+0x7e>
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	dd01      	ble.n	800aafa <tcp_shutdown+0x6e>
 800aaf6:	2b07      	cmp	r3, #7
 800aaf8:	d107      	bne.n	800ab0a <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	4619      	mov	r1, r3
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fe5f 	bl	800a7c4 <tcp_close_shutdown>
 800ab06:	4603      	mov	r3, r0
 800ab08:	e003      	b.n	800ab12 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800ab0a:	f06f 030a 	mvn.w	r3, #10
 800ab0e:	e000      	b.n	800ab12 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08c      	sub	sp, #48	; 0x30
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7d1b      	ldrb	r3, [r3, #20]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d106      	bne.n	800ab3c <tcp_abandon+0x20>
 800ab2e:	4b4d      	ldr	r3, [pc, #308]	; (800ac64 <tcp_abandon+0x148>)
 800ab30:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ab34:	494c      	ldr	r1, [pc, #304]	; (800ac68 <tcp_abandon+0x14c>)
 800ab36:	484d      	ldr	r0, [pc, #308]	; (800ac6c <tcp_abandon+0x150>)
 800ab38:	f009 f9a8 	bl	8013e8c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	7d1b      	ldrb	r3, [r3, #20]
 800ab40:	2b0a      	cmp	r3, #10
 800ab42:	d108      	bne.n	800ab56 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ab44:	6879      	ldr	r1, [r7, #4]
 800ab46:	484a      	ldr	r0, [pc, #296]	; (800ac70 <tcp_abandon+0x154>)
 800ab48:	f001 f904 	bl	800bd54 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ab4c:	6879      	ldr	r1, [r7, #4]
 800ab4e:	2001      	movs	r0, #1
 800ab50:	f7fe fde6 	bl	8009720 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800ab54:	e081      	b.n	800ac5a <tcp_abandon+0x13e>
    int send_rst = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab70:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7d1b      	ldrb	r3, [r3, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d126      	bne.n	800abce <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8adb      	ldrh	r3, [r3, #22]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02e      	beq.n	800abe6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab88:	4b3a      	ldr	r3, [pc, #232]	; (800ac74 <tcp_abandon+0x158>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d105      	bne.n	800ab9e <tcp_abandon+0x82>
 800ab92:	4b38      	ldr	r3, [pc, #224]	; (800ac74 <tcp_abandon+0x158>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4a36      	ldr	r2, [pc, #216]	; (800ac74 <tcp_abandon+0x158>)
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	e013      	b.n	800abc6 <tcp_abandon+0xaa>
 800ab9e:	4b35      	ldr	r3, [pc, #212]	; (800ac74 <tcp_abandon+0x158>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e00c      	b.n	800abc0 <tcp_abandon+0xa4>
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	d104      	bne.n	800abba <tcp_abandon+0x9e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	60da      	str	r2, [r3, #12]
 800abb8:	e005      	b.n	800abc6 <tcp_abandon+0xaa>
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1ef      	bne.n	800aba6 <tcp_abandon+0x8a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	60da      	str	r2, [r3, #12]
 800abcc:	e00b      	b.n	800abe6 <tcp_abandon+0xca>
      send_rst = reset;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	8adb      	ldrh	r3, [r3, #22]
 800abd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4827      	ldr	r0, [pc, #156]	; (800ac78 <tcp_abandon+0x15c>)
 800abdc:	f001 f8ba 	bl	800bd54 <tcp_pcb_remove>
 800abe0:	4b26      	ldr	r3, [pc, #152]	; (800ac7c <tcp_abandon+0x160>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d004      	beq.n	800abf8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fe03 	bl	800b7fe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fdfa 	bl	800b7fe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fdf1 	bl	800b7fe <tcp_segs_free>
    if (send_rst) {
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00c      	beq.n	800ac3c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	1d19      	adds	r1, r3, #4
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	8b1b      	ldrh	r3, [r3, #24]
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	460b      	mov	r3, r1
 800ac34:	6979      	ldr	r1, [r7, #20]
 800ac36:	69b8      	ldr	r0, [r7, #24]
 800ac38:	f004 fd16 	bl	800f668 <tcp_rst>
    last_state = pcb->state;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7d1b      	ldrb	r3, [r3, #20]
 800ac40:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800ac42:	6879      	ldr	r1, [r7, #4]
 800ac44:	2001      	movs	r0, #1
 800ac46:	f7fe fd6b 	bl	8009720 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d004      	beq.n	800ac5a <tcp_abandon+0x13e>
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f06f 010c 	mvn.w	r1, #12
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	4798      	blx	r3
}
 800ac5a:	bf00      	nop
 800ac5c:	3728      	adds	r7, #40	; 0x28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	08016204 	.word	0x08016204
 800ac68:	0801629c 	.word	0x0801629c
 800ac6c:	08016240 	.word	0x08016240
 800ac70:	2001055c 	.word	0x2001055c
 800ac74:	20010558 	.word	0x20010558
 800ac78:	2001054c 	.word	0x2001054c
 800ac7c:	20010548 	.word	0x20010548

0800ac80 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ac88:	2101      	movs	r1, #1
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff ff46 	bl	800ab1c <tcp_abandon>
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800aca6:	2304      	movs	r3, #4
 800aca8:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800acb0:	4b3c      	ldr	r3, [pc, #240]	; (800ada4 <tcp_bind+0x10c>)
 800acb2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <tcp_bind+0x28>
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d102      	bne.n	800acc6 <tcp_bind+0x2e>
    return ERR_VAL;
 800acc0:	f06f 0305 	mvn.w	r3, #5
 800acc4:	e06a      	b.n	800ad9c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	7d1b      	ldrb	r3, [r3, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d009      	beq.n	800ace2 <tcp_bind+0x4a>
 800acce:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <tcp_bind+0x110>)
 800acd0:	f44f 7211 	mov.w	r2, #580	; 0x244
 800acd4:	4935      	ldr	r1, [pc, #212]	; (800adac <tcp_bind+0x114>)
 800acd6:	4836      	ldr	r0, [pc, #216]	; (800adb0 <tcp_bind+0x118>)
 800acd8:	f009 f8d8 	bl	8013e8c <iprintf>
 800acdc:	f06f 0305 	mvn.w	r3, #5
 800ace0:	e05c      	b.n	800ad9c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <tcp_bind+0x64>
    port = tcp_new_port();
 800ace8:	f000 f9b8 	bl	800b05c <tcp_new_port>
 800acec:	4603      	mov	r3, r0
 800acee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d135      	bne.n	800ad62 <tcp_bind+0xca>
      return ERR_BUF;
 800acf6:	f06f 0301 	mvn.w	r3, #1
 800acfa:	e04f      	b.n	800ad9c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800acfc:	2300      	movs	r3, #0
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	e02b      	b.n	800ad5a <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ad02:	4a2c      	ldr	r2, [pc, #176]	; (800adb4 <tcp_bind+0x11c>)
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	e01e      	b.n	800ad4e <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	8adb      	ldrh	r3, [r3, #22]
 800ad14:	88fa      	ldrh	r2, [r7, #6]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d116      	bne.n	800ad48 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ad1a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d010      	beq.n	800ad42 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00c      	beq.n	800ad42 <tcp_bind+0xaa>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d005      	beq.n	800ad42 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d102      	bne.n	800ad48 <tcp_bind+0xb0>
              return ERR_USE;
 800ad42:	f06f 0307 	mvn.w	r3, #7
 800ad46:	e029      	b.n	800ad9c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	61bb      	str	r3, [r7, #24]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1dd      	bne.n	800ad10 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	3301      	adds	r3, #1
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	dbcf      	blt.n	800ad02 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00c      	beq.n	800ad82 <tcp_bind+0xea>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d008      	beq.n	800ad82 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <tcp_bind+0xe4>
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	e000      	b.n	800ad7e <tcp_bind+0xe6>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	88fa      	ldrh	r2, [r7, #6]
 800ad86:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ad88:	4b0b      	ldr	r3, [pc, #44]	; (800adb8 <tcp_bind+0x120>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	60da      	str	r2, [r3, #12]
 800ad90:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <tcp_bind+0x120>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6013      	str	r3, [r2, #0]
 800ad96:	f004 feb7 	bl	800fb08 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	0801778c 	.word	0x0801778c
 800ada8:	08016204 	.word	0x08016204
 800adac:	080162d0 	.word	0x080162d0
 800adb0:	08016240 	.word	0x08016240
 800adb4:	08017764 	.word	0x08017764
 800adb8:	20010558 	.word	0x20010558

0800adbc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800adca:	68b8      	ldr	r0, [r7, #8]
 800adcc:	f7ff ff58 	bl	800ac80 <tcp_abort>

  return ERR_ABRT;
 800add0:	f06f 030c 	mvn.w	r3, #12
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b088      	sub	sp, #32
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	460b      	mov	r3, r1
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	7d1b      	ldrb	r3, [r3, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d009      	beq.n	800ae0a <tcp_listen_with_backlog_and_err+0x2e>
 800adf6:	4b3f      	ldr	r3, [pc, #252]	; (800aef4 <tcp_listen_with_backlog_and_err+0x118>)
 800adf8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800adfc:	493e      	ldr	r1, [pc, #248]	; (800aef8 <tcp_listen_with_backlog_and_err+0x11c>)
 800adfe:	483f      	ldr	r0, [pc, #252]	; (800aefc <tcp_listen_with_backlog_and_err+0x120>)
 800ae00:	f009 f844 	bl	8013e8c <iprintf>
 800ae04:	23f1      	movs	r3, #241	; 0xf1
 800ae06:	76fb      	strb	r3, [r7, #27]
 800ae08:	e069      	b.n	800aede <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	7d1b      	ldrb	r3, [r3, #20]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d104      	bne.n	800ae1c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ae16:	23f7      	movs	r3, #247	; 0xf7
 800ae18:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ae1a:	e060      	b.n	800aede <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ae1c:	2002      	movs	r0, #2
 800ae1e:	f7fe fc2d 	bl	800967c <memp_malloc>
 800ae22:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800ae2a:	23ff      	movs	r3, #255	; 0xff
 800ae2c:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ae2e:	e056      	b.n	800aede <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	8ada      	ldrh	r2, [r3, #22]
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2201      	movs	r2, #1
 800ae44:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	7d5a      	ldrb	r2, [r3, #21]
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	7a1a      	ldrb	r2, [r3, #8]
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	7a9a      	ldrb	r2, [r3, #10]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	7a5a      	ldrb	r2, [r3, #9]
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	8adb      	ldrh	r3, [r3, #22]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae76:	4b22      	ldr	r3, [pc, #136]	; (800af00 <tcp_listen_with_backlog_and_err+0x124>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d105      	bne.n	800ae8c <tcp_listen_with_backlog_and_err+0xb0>
 800ae80:	4b1f      	ldr	r3, [pc, #124]	; (800af00 <tcp_listen_with_backlog_and_err+0x124>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	4a1e      	ldr	r2, [pc, #120]	; (800af00 <tcp_listen_with_backlog_and_err+0x124>)
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e013      	b.n	800aeb4 <tcp_listen_with_backlog_and_err+0xd8>
 800ae8c:	4b1c      	ldr	r3, [pc, #112]	; (800af00 <tcp_listen_with_backlog_and_err+0x124>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	e00c      	b.n	800aeae <tcp_listen_with_backlog_and_err+0xd2>
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d104      	bne.n	800aea8 <tcp_listen_with_backlog_and_err+0xcc>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	60da      	str	r2, [r3, #12]
 800aea6:	e005      	b.n	800aeb4 <tcp_listen_with_backlog_and_err+0xd8>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1ef      	bne.n	800ae94 <tcp_listen_with_backlog_and_err+0xb8>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7fe fc2f 	bl	8009720 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4a0f      	ldr	r2, [pc, #60]	; (800af04 <tcp_listen_with_backlog_and_err+0x128>)
 800aec6:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aec8:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <tcp_listen_with_backlog_and_err+0x12c>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	4a0d      	ldr	r2, [pc, #52]	; (800af08 <tcp_listen_with_backlog_and_err+0x12c>)
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	f004 fe17 	bl	800fb08 <tcp_timer_needed>
  res = ERR_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7efa      	ldrb	r2, [r7, #27]
 800aee8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800aeea:	69fb      	ldr	r3, [r7, #28]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3720      	adds	r7, #32
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	08016204 	.word	0x08016204
 800aef8:	080162f8 	.word	0x080162f8
 800aefc:	08016240 	.word	0x08016240
 800af00:	20010558 	.word	0x20010558
 800af04:	0800adbd 	.word	0x0800adbd
 800af08:	20010554 	.word	0x20010554

0800af0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800af1c:	4413      	add	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800af28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800af2c:	bf28      	it	cs
 800af2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800af32:	b292      	uxth	r2, r2
 800af34:	4413      	add	r3, r2
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	db08      	blt.n	800af50 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	e020      	b.n	800af92 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd03      	ble.n	800af66 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af64:	e014      	b.n	800af90 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af78:	d306      	bcc.n	800af88 <tcp_update_rcv_ann_wnd+0x7c>
 800af7a:	4b08      	ldr	r3, [pc, #32]	; (800af9c <tcp_update_rcv_ann_wnd+0x90>)
 800af7c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800af80:	4907      	ldr	r1, [pc, #28]	; (800afa0 <tcp_update_rcv_ann_wnd+0x94>)
 800af82:	4808      	ldr	r0, [pc, #32]	; (800afa4 <tcp_update_rcv_ann_wnd+0x98>)
 800af84:	f008 ff82 	bl	8013e8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800af90:	2300      	movs	r3, #0
  }
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	08016204 	.word	0x08016204
 800afa0:	0801631c 	.word	0x0801631c
 800afa4:	08016240 	.word	0x08016240

0800afa8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7d1b      	ldrb	r3, [r3, #20]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d106      	bne.n	800afca <tcp_recved+0x22>
 800afbc:	4b23      	ldr	r3, [pc, #140]	; (800b04c <tcp_recved+0xa4>)
 800afbe:	f44f 7248 	mov.w	r2, #800	; 0x320
 800afc2:	4923      	ldr	r1, [pc, #140]	; (800b050 <tcp_recved+0xa8>)
 800afc4:	4823      	ldr	r0, [pc, #140]	; (800b054 <tcp_recved+0xac>)
 800afc6:	f008 ff61 	bl	8013e8c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afce:	887b      	ldrh	r3, [r7, #2]
 800afd0:	4413      	add	r3, r2
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afdc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800afe0:	d904      	bls.n	800afec <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800afe8:	851a      	strh	r2, [r3, #40]	; 0x28
 800afea:	e017      	b.n	800b01c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d113      	bne.n	800b01c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	7d1b      	ldrb	r3, [r3, #20]
 800aff8:	2b07      	cmp	r3, #7
 800affa:	d003      	beq.n	800b004 <tcp_recved+0x5c>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7d1b      	ldrb	r3, [r3, #20]
 800b000:	2b09      	cmp	r3, #9
 800b002:	d104      	bne.n	800b00e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b00a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b00c:	e006      	b.n	800b01c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b00e:	4b0f      	ldr	r3, [pc, #60]	; (800b04c <tcp_recved+0xa4>)
 800b010:	f240 322d 	movw	r2, #813	; 0x32d
 800b014:	4910      	ldr	r1, [pc, #64]	; (800b058 <tcp_recved+0xb0>)
 800b016:	480f      	ldr	r0, [pc, #60]	; (800b054 <tcp_recved+0xac>)
 800b018:	f008 ff38 	bl	8013e8c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ff75 	bl	800af0c <tcp_update_rcv_ann_wnd>
 800b022:	4603      	mov	r3, r0
 800b024:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b02c:	db09      	blt.n	800b042 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7e9b      	ldrb	r3, [r3, #26]
 800b032:	f043 0302 	orr.w	r3, r3, #2
 800b036:	b2da      	uxtb	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f004 f889 	bl	800f154 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b042:	bf00      	nop
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	08016204 	.word	0x08016204
 800b050:	08016338 	.word	0x08016338
 800b054:	08016240 	.word	0x08016240
 800b058:	08016360 	.word	0x08016360

0800b05c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b066:	4b1d      	ldr	r3, [pc, #116]	; (800b0dc <tcp_new_port+0x80>)
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	b291      	uxth	r1, r2
 800b06e:	4a1b      	ldr	r2, [pc, #108]	; (800b0dc <tcp_new_port+0x80>)
 800b070:	8011      	strh	r1, [r2, #0]
 800b072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b076:	4293      	cmp	r3, r2
 800b078:	d103      	bne.n	800b082 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b07a:	4b18      	ldr	r3, [pc, #96]	; (800b0dc <tcp_new_port+0x80>)
 800b07c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b080:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b082:	2300      	movs	r3, #0
 800b084:	71fb      	strb	r3, [r7, #7]
 800b086:	e01e      	b.n	800b0c6 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b088:	79fb      	ldrb	r3, [r7, #7]
 800b08a:	4a15      	ldr	r2, [pc, #84]	; (800b0e0 <tcp_new_port+0x84>)
 800b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	e011      	b.n	800b0ba <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	8ada      	ldrh	r2, [r3, #22]
 800b09a:	4b10      	ldr	r3, [pc, #64]	; (800b0dc <tcp_new_port+0x80>)
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d108      	bne.n	800b0b4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b0a2:	88bb      	ldrh	r3, [r7, #4]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	80bb      	strh	r3, [r7, #4]
 800b0a8:	88bb      	ldrh	r3, [r7, #4]
 800b0aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0ae:	d3da      	bcc.n	800b066 <tcp_new_port+0xa>
          return 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e00d      	b.n	800b0d0 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	603b      	str	r3, [r7, #0]
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1ea      	bne.n	800b096 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	71fb      	strb	r3, [r7, #7]
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d9dd      	bls.n	800b088 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b0cc:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <tcp_new_port+0x80>)
 800b0ce:	881b      	ldrh	r3, [r3, #0]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20000008 	.word	0x20000008
 800b0e0:	08017764 	.word	0x08017764

0800b0e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b0e4:	b5b0      	push	{r4, r5, r7, lr}
 800b0e6:	b08c      	sub	sp, #48	; 0x30
 800b0e8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800b0ee:	4b97      	ldr	r3, [pc, #604]	; (800b34c <tcp_slowtmr+0x268>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a95      	ldr	r2, [pc, #596]	; (800b34c <tcp_slowtmr+0x268>)
 800b0f6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b0f8:	4b95      	ldr	r3, [pc, #596]	; (800b350 <tcp_slowtmr+0x26c>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	4b93      	ldr	r3, [pc, #588]	; (800b350 <tcp_slowtmr+0x26c>)
 800b102:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b104:	2300      	movs	r3, #0
 800b106:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800b108:	4b92      	ldr	r3, [pc, #584]	; (800b354 <tcp_slowtmr+0x270>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b10e:	e227      	b.n	800b560 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	7d1b      	ldrb	r3, [r3, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <tcp_slowtmr+0x42>
 800b118:	4b8f      	ldr	r3, [pc, #572]	; (800b358 <tcp_slowtmr+0x274>)
 800b11a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b11e:	498f      	ldr	r1, [pc, #572]	; (800b35c <tcp_slowtmr+0x278>)
 800b120:	488f      	ldr	r0, [pc, #572]	; (800b360 <tcp_slowtmr+0x27c>)
 800b122:	f008 feb3 	bl	8013e8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	7d1b      	ldrb	r3, [r3, #20]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d106      	bne.n	800b13c <tcp_slowtmr+0x58>
 800b12e:	4b8a      	ldr	r3, [pc, #552]	; (800b358 <tcp_slowtmr+0x274>)
 800b130:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b134:	498b      	ldr	r1, [pc, #556]	; (800b364 <tcp_slowtmr+0x280>)
 800b136:	488a      	ldr	r0, [pc, #552]	; (800b360 <tcp_slowtmr+0x27c>)
 800b138:	f008 fea8 	bl	8013e8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	7d1b      	ldrb	r3, [r3, #20]
 800b140:	2b0a      	cmp	r3, #10
 800b142:	d106      	bne.n	800b152 <tcp_slowtmr+0x6e>
 800b144:	4b84      	ldr	r3, [pc, #528]	; (800b358 <tcp_slowtmr+0x274>)
 800b146:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800b14a:	4987      	ldr	r1, [pc, #540]	; (800b368 <tcp_slowtmr+0x284>)
 800b14c:	4884      	ldr	r0, [pc, #528]	; (800b360 <tcp_slowtmr+0x27c>)
 800b14e:	f008 fe9d 	bl	8013e8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	7f5a      	ldrb	r2, [r3, #29]
 800b156:	4b7e      	ldr	r3, [pc, #504]	; (800b350 <tcp_slowtmr+0x26c>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d103      	bne.n	800b166 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800b164:	e1fc      	b.n	800b560 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b166:	4b7a      	ldr	r3, [pc, #488]	; (800b350 <tcp_slowtmr+0x26c>)
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d108      	bne.n	800b190 <tcp_slowtmr+0xac>
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b184:	2b05      	cmp	r3, #5
 800b186:	d903      	bls.n	800b190 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800b188:	7ffb      	ldrb	r3, [r7, #31]
 800b18a:	3301      	adds	r3, #1
 800b18c:	77fb      	strb	r3, [r7, #31]
 800b18e:	e0a2      	b.n	800b2d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b196:	2b0b      	cmp	r3, #11
 800b198:	d903      	bls.n	800b1a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b19a:	7ffb      	ldrb	r3, [r7, #31]
 800b19c:	3301      	adds	r3, #1
 800b19e:	77fb      	strb	r3, [r7, #31]
 800b1a0:	e099      	b.n	800b2d6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d032      	beq.n	800b212 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	4a6d      	ldr	r2, [pc, #436]	; (800b36c <tcp_slowtmr+0x288>)
 800b1b6:	5cd3      	ldrb	r3, [r2, r3]
 800b1b8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b1c0:	7cfa      	ldrb	r2, [r7, #19]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d907      	bls.n	800b1d6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b1dc:	7cfa      	ldrb	r2, [r7, #19]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d879      	bhi.n	800b2d6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b1e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1e4:	f004 fbd0 	bl	800f988 <tcp_zero_window_probe>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d173      	bne.n	800b2d6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b1fc:	2b06      	cmp	r3, #6
 800b1fe:	d86a      	bhi.n	800b2d6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b206:	3301      	adds	r3, #1
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b210:	e061      	b.n	800b2d6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b218:	2b00      	cmp	r3, #0
 800b21a:	db08      	blt.n	800b22e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b222:	b29b      	uxth	r3, r3
 800b224:	3301      	adds	r3, #1
 800b226:	b29b      	uxth	r3, r3
 800b228:	b21a      	sxth	r2, r3
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d04f      	beq.n	800b2d6 <tcp_slowtmr+0x1f2>
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b242:	429a      	cmp	r2, r3
 800b244:	db47      	blt.n	800b2d6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	7d1b      	ldrb	r3, [r3, #20]
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d018      	beq.n	800b280 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b254:	2b0c      	cmp	r3, #12
 800b256:	bf28      	it	cs
 800b258:	230c      	movcs	r3, #12
 800b25a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b262:	10db      	asrs	r3, r3, #3
 800b264:	b21b      	sxth	r3, r3
 800b266:	461a      	mov	r2, r3
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b26e:	4413      	add	r3, r2
 800b270:	7dfa      	ldrb	r2, [r7, #23]
 800b272:	493f      	ldr	r1, [pc, #252]	; (800b370 <tcp_slowtmr+0x28c>)
 800b274:	5c8a      	ldrb	r2, [r1, r2]
 800b276:	4093      	lsls	r3, r2
 800b278:	b21a      	sxth	r2, r3
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	2200      	movs	r2, #0
 800b284:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b292:	4293      	cmp	r3, r2
 800b294:	bf28      	it	cs
 800b296:	4613      	movcs	r3, r2
 800b298:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800b29a:	8abb      	ldrh	r3, [r7, #20]
 800b29c:	085b      	lsrs	r3, r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d206      	bcs.n	800b2c6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2d2:	f004 fa3f 	bl	800f754 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	7d1b      	ldrb	r3, [r3, #20]
 800b2da:	2b06      	cmp	r3, #6
 800b2dc:	d10f      	bne.n	800b2fe <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	7e9b      	ldrb	r3, [r3, #26]
 800b2e2:	f003 0310 	and.w	r3, r3, #16
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d009      	beq.n	800b2fe <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2ea:	4b18      	ldr	r3, [pc, #96]	; (800b34c <tcp_slowtmr+0x268>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	2b28      	cmp	r3, #40	; 0x28
 800b2f6:	d902      	bls.n	800b2fe <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b2f8:	7ffb      	ldrb	r3, [r7, #31]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	7a1b      	ldrb	r3, [r3, #8]
 800b302:	f003 0308 	and.w	r3, r3, #8
 800b306:	2b00      	cmp	r3, #0
 800b308:	d05d      	beq.n	800b3c6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d003      	beq.n	800b31a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800b316:	2b07      	cmp	r3, #7
 800b318:	d155      	bne.n	800b3c6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b31a:	4b0c      	ldr	r3, [pc, #48]	; (800b34c <tcp_slowtmr+0x268>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b32a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b32e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b332:	4910      	ldr	r1, [pc, #64]	; (800b374 <tcp_slowtmr+0x290>)
 800b334:	fba1 1303 	umull	r1, r3, r1, r3
 800b338:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d91c      	bls.n	800b378 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
 800b340:	3301      	adds	r3, #1
 800b342:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800b344:	7fbb      	ldrb	r3, [r7, #30]
 800b346:	3301      	adds	r3, #1
 800b348:	77bb      	strb	r3, [r7, #30]
 800b34a:	e03c      	b.n	800b3c6 <tcp_slowtmr+0x2e2>
 800b34c:	20010550 	.word	0x20010550
 800b350:	2000c5de 	.word	0x2000c5de
 800b354:	2001054c 	.word	0x2001054c
 800b358:	08016204 	.word	0x08016204
 800b35c:	080163b4 	.word	0x080163b4
 800b360:	08016240 	.word	0x08016240
 800b364:	080163e0 	.word	0x080163e0
 800b368:	0801640c 	.word	0x0801640c
 800b36c:	0801775c 	.word	0x0801775c
 800b370:	0801774c 	.word	0x0801774c
 800b374:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b378:	4b97      	ldr	r3, [pc, #604]	; (800b5d8 <tcp_slowtmr+0x4f4>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b38e:	4618      	mov	r0, r3
 800b390:	4b92      	ldr	r3, [pc, #584]	; (800b5dc <tcp_slowtmr+0x4f8>)
 800b392:	fb03 f300 	mul.w	r3, r3, r0
 800b396:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800b398:	4991      	ldr	r1, [pc, #580]	; (800b5e0 <tcp_slowtmr+0x4fc>)
 800b39a:	fba1 1303 	umull	r1, r3, r1, r3
 800b39e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d910      	bls.n	800b3c6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800b3a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3a6:	f004 fab2 	bl	800f90e <tcp_keepalive>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800b3ae:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d107      	bne.n	800b3c6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b3bc:	3301      	adds	r3, #1
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d016      	beq.n	800b3fc <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800b3ce:	4b82      	ldr	r3, [pc, #520]	; (800b5d8 <tcp_slowtmr+0x4f4>)
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	1ad2      	subs	r2, r2, r3
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b3de:	4619      	mov	r1, r3
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	440b      	add	r3, r1
 800b3e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d307      	bcc.n	800b3fc <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fa04 	bl	800b7fe <tcp_segs_free>
      pcb->ooseq = NULL;
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	7d1b      	ldrb	r3, [r3, #20]
 800b400:	2b03      	cmp	r3, #3
 800b402:	d109      	bne.n	800b418 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b404:	4b74      	ldr	r3, [pc, #464]	; (800b5d8 <tcp_slowtmr+0x4f4>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b28      	cmp	r3, #40	; 0x28
 800b410:	d902      	bls.n	800b418 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b412:	7ffb      	ldrb	r3, [r7, #31]
 800b414:	3301      	adds	r3, #1
 800b416:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	7d1b      	ldrb	r3, [r3, #20]
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d109      	bne.n	800b434 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b420:	4b6d      	ldr	r3, [pc, #436]	; (800b5d8 <tcp_slowtmr+0x4f4>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	2bf0      	cmp	r3, #240	; 0xf0
 800b42c:	d902      	bls.n	800b434 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800b42e:	7ffb      	ldrb	r3, [r7, #31]
 800b430:	3301      	adds	r3, #1
 800b432:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b434:	7ffb      	ldrb	r3, [r7, #31]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d05d      	beq.n	800b4f6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b440:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b444:	f000 fc44 	bl	800bcd0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d010      	beq.n	800b470 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b44e:	4b65      	ldr	r3, [pc, #404]	; (800b5e4 <tcp_slowtmr+0x500>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b454:	429a      	cmp	r2, r3
 800b456:	d106      	bne.n	800b466 <tcp_slowtmr+0x382>
 800b458:	4b63      	ldr	r3, [pc, #396]	; (800b5e8 <tcp_slowtmr+0x504>)
 800b45a:	f240 4289 	movw	r2, #1161	; 0x489
 800b45e:	4963      	ldr	r1, [pc, #396]	; (800b5ec <tcp_slowtmr+0x508>)
 800b460:	4863      	ldr	r0, [pc, #396]	; (800b5f0 <tcp_slowtmr+0x50c>)
 800b462:	f008 fd13 	bl	8013e8c <iprintf>
        prev->next = pcb->next;
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	60da      	str	r2, [r3, #12]
 800b46e:	e00f      	b.n	800b490 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b470:	4b5c      	ldr	r3, [pc, #368]	; (800b5e4 <tcp_slowtmr+0x500>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b476:	429a      	cmp	r2, r3
 800b478:	d006      	beq.n	800b488 <tcp_slowtmr+0x3a4>
 800b47a:	4b5b      	ldr	r3, [pc, #364]	; (800b5e8 <tcp_slowtmr+0x504>)
 800b47c:	f240 428d 	movw	r2, #1165	; 0x48d
 800b480:	495c      	ldr	r1, [pc, #368]	; (800b5f4 <tcp_slowtmr+0x510>)
 800b482:	485b      	ldr	r0, [pc, #364]	; (800b5f0 <tcp_slowtmr+0x50c>)
 800b484:	f008 fd02 	bl	8013e8c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	4a55      	ldr	r2, [pc, #340]	; (800b5e4 <tcp_slowtmr+0x500>)
 800b48e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b490:	7fbb      	ldrb	r3, [r7, #30]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d010      	beq.n	800b4b8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b49e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	1d1d      	adds	r5, r3, #4
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	8adb      	ldrh	r3, [r3, #22]
 800b4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4aa:	8b12      	ldrh	r2, [r2, #24]
 800b4ac:	9201      	str	r2, [sp, #4]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	f004 f8d8 	bl	800f668 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	7d1b      	ldrb	r3, [r3, #20]
 800b4c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	f7fe f925 	bl	8009720 <memp_free>

      tcp_active_pcbs_changed = 0;
 800b4d6:	4b48      	ldr	r3, [pc, #288]	; (800b5f8 <tcp_slowtmr+0x514>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <tcp_slowtmr+0x408>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f06f 010c 	mvn.w	r1, #12
 800b4e8:	68b8      	ldr	r0, [r7, #8]
 800b4ea:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b4ec:	4b42      	ldr	r3, [pc, #264]	; (800b5f8 <tcp_slowtmr+0x514>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d035      	beq.n	800b560 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800b4f4:	e606      	b.n	800b104 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	7edb      	ldrb	r3, [r3, #27]
 800b504:	3301      	adds	r3, #1
 800b506:	b2da      	uxtb	r2, r3
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	7eda      	ldrb	r2, [r3, #27]
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	7f1b      	ldrb	r3, [r3, #28]
 800b514:	429a      	cmp	r2, r3
 800b516:	d323      	bcc.n	800b560 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	2200      	movs	r2, #0
 800b51c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b51e:	4b36      	ldr	r3, [pc, #216]	; (800b5f8 <tcp_slowtmr+0x514>)
 800b520:	2200      	movs	r2, #0
 800b522:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <tcp_slowtmr+0x460>
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b534:	6a3a      	ldr	r2, [r7, #32]
 800b536:	6912      	ldr	r2, [r2, #16]
 800b538:	6a39      	ldr	r1, [r7, #32]
 800b53a:	4610      	mov	r0, r2
 800b53c:	4798      	blx	r3
 800b53e:	4603      	mov	r3, r0
 800b540:	777b      	strb	r3, [r7, #29]
 800b542:	e001      	b.n	800b548 <tcp_slowtmr+0x464>
 800b544:	2300      	movs	r3, #0
 800b546:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800b548:	4b2b      	ldr	r3, [pc, #172]	; (800b5f8 <tcp_slowtmr+0x514>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d000      	beq.n	800b552 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800b550:	e5d8      	b.n	800b104 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b552:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800b55a:	6a38      	ldr	r0, [r7, #32]
 800b55c:	f003 fdfa 	bl	800f154 <tcp_output>
  while (pcb != NULL) {
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	2b00      	cmp	r3, #0
 800b564:	f47f add4 	bne.w	800b110 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800b56c:	4b23      	ldr	r3, [pc, #140]	; (800b5fc <tcp_slowtmr+0x518>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b572:	e068      	b.n	800b646 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	7d1b      	ldrb	r3, [r3, #20]
 800b578:	2b0a      	cmp	r3, #10
 800b57a:	d006      	beq.n	800b58a <tcp_slowtmr+0x4a6>
 800b57c:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <tcp_slowtmr+0x504>)
 800b57e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800b582:	491f      	ldr	r1, [pc, #124]	; (800b600 <tcp_slowtmr+0x51c>)
 800b584:	481a      	ldr	r0, [pc, #104]	; (800b5f0 <tcp_slowtmr+0x50c>)
 800b586:	f008 fc81 	bl	8013e8c <iprintf>
    pcb_remove = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b58e:	4b12      	ldr	r3, [pc, #72]	; (800b5d8 <tcp_slowtmr+0x4f4>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2bf0      	cmp	r3, #240	; 0xf0
 800b59a:	d902      	bls.n	800b5a2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800b59c:	7ffb      	ldrb	r3, [r7, #31]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b5a2:	7ffb      	ldrb	r3, [r7, #31]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d049      	beq.n	800b63c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5aa:	f000 fb91 	bl	800bcd0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d029      	beq.n	800b608 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b5b4:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <tcp_slowtmr+0x518>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d106      	bne.n	800b5cc <tcp_slowtmr+0x4e8>
 800b5be:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <tcp_slowtmr+0x504>)
 800b5c0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b5c4:	490f      	ldr	r1, [pc, #60]	; (800b604 <tcp_slowtmr+0x520>)
 800b5c6:	480a      	ldr	r0, [pc, #40]	; (800b5f0 <tcp_slowtmr+0x50c>)
 800b5c8:	f008 fc60 	bl	8013e8c <iprintf>
        prev->next = pcb->next;
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	68da      	ldr	r2, [r3, #12]
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	60da      	str	r2, [r3, #12]
 800b5d4:	e028      	b.n	800b628 <tcp_slowtmr+0x544>
 800b5d6:	bf00      	nop
 800b5d8:	20010550 	.word	0x20010550
 800b5dc:	000124f8 	.word	0x000124f8
 800b5e0:	10624dd3 	.word	0x10624dd3
 800b5e4:	2001054c 	.word	0x2001054c
 800b5e8:	08016204 	.word	0x08016204
 800b5ec:	0801643c 	.word	0x0801643c
 800b5f0:	08016240 	.word	0x08016240
 800b5f4:	08016468 	.word	0x08016468
 800b5f8:	20010548 	.word	0x20010548
 800b5fc:	2001055c 	.word	0x2001055c
 800b600:	08016494 	.word	0x08016494
 800b604:	080164c4 	.word	0x080164c4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b608:	4b12      	ldr	r3, [pc, #72]	; (800b654 <tcp_slowtmr+0x570>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60e:	429a      	cmp	r2, r3
 800b610:	d006      	beq.n	800b620 <tcp_slowtmr+0x53c>
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <tcp_slowtmr+0x574>)
 800b614:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800b618:	4910      	ldr	r1, [pc, #64]	; (800b65c <tcp_slowtmr+0x578>)
 800b61a:	4811      	ldr	r0, [pc, #68]	; (800b660 <tcp_slowtmr+0x57c>)
 800b61c:	f008 fc36 	bl	8013e8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	4a0b      	ldr	r2, [pc, #44]	; (800b654 <tcp_slowtmr+0x570>)
 800b626:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b632:	69b9      	ldr	r1, [r7, #24]
 800b634:	2001      	movs	r0, #1
 800b636:	f7fe f873 	bl	8009720 <memp_free>
 800b63a:	e004      	b.n	800b646 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d193      	bne.n	800b574 <tcp_slowtmr+0x490>
    }
  }
}
 800b64c:	bf00      	nop
 800b64e:	3728      	adds	r7, #40	; 0x28
 800b650:	46bd      	mov	sp, r7
 800b652:	bdb0      	pop	{r4, r5, r7, pc}
 800b654:	2001055c 	.word	0x2001055c
 800b658:	08016204 	.word	0x08016204
 800b65c:	080164ec 	.word	0x080164ec
 800b660:	08016240 	.word	0x08016240

0800b664 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b66a:	4b2d      	ldr	r3, [pc, #180]	; (800b720 <tcp_fasttmr+0xbc>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	3301      	adds	r3, #1
 800b670:	b2da      	uxtb	r2, r3
 800b672:	4b2b      	ldr	r3, [pc, #172]	; (800b720 <tcp_fasttmr+0xbc>)
 800b674:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b676:	4b2b      	ldr	r3, [pc, #172]	; (800b724 <tcp_fasttmr+0xc0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b67c:	e048      	b.n	800b710 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7f5a      	ldrb	r2, [r3, #29]
 800b682:	4b27      	ldr	r3, [pc, #156]	; (800b720 <tcp_fasttmr+0xbc>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d03f      	beq.n	800b70a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b68a:	4b25      	ldr	r3, [pc, #148]	; (800b720 <tcp_fasttmr+0xbc>)
 800b68c:	781a      	ldrb	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7e9b      	ldrb	r3, [r3, #26]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d010      	beq.n	800b6c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7e9b      	ldrb	r3, [r3, #26]
 800b6a2:	f043 0302 	orr.w	r3, r3, #2
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f003 fd51 	bl	800f154 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7e9b      	ldrb	r3, [r3, #26]
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	7e9b      	ldrb	r3, [r3, #26]
 800b6c4:	f003 0308 	and.w	r3, r3, #8
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d009      	beq.n	800b6e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7e9b      	ldrb	r3, [r3, #26]
 800b6d0:	f023 0308 	bic.w	r3, r3, #8
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff f958 	bl	800a990 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <tcp_fasttmr+0xc4>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f819 	bl	800b72c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	; (800b728 <tcp_fasttmr+0xc4>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d000      	beq.n	800b704 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b702:	e7b8      	b.n	800b676 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	607b      	str	r3, [r7, #4]
 800b708:	e002      	b.n	800b710 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1b3      	bne.n	800b67e <tcp_fasttmr+0x1a>
    }
  }
}
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2000c5de 	.word	0x2000c5de
 800b724:	2001054c 	.word	0x2001054c
 800b728:	20010548 	.word	0x20010548

0800b72c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b72c:	b590      	push	{r4, r7, lr}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b738:	7b5b      	ldrb	r3, [r3, #13]
 800b73a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b740:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00b      	beq.n	800b76a <tcp_process_refused_data+0x3e>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6918      	ldr	r0, [r3, #16]
 800b75c:	2300      	movs	r3, #0
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	47a0      	blx	r4
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
 800b768:	e007      	b.n	800b77a <tcp_process_refused_data+0x4e>
 800b76a:	2300      	movs	r3, #0
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	2000      	movs	r0, #0
 800b772:	f000 f88c 	bl	800b88e <tcp_recv_null>
 800b776:	4603      	mov	r3, r0
 800b778:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d12a      	bne.n	800b7d8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	f003 0320 	and.w	r3, r3, #32
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d033      	beq.n	800b7f4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b790:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b794:	d005      	beq.n	800b7a2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79a:	3301      	adds	r3, #1
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00b      	beq.n	800b7c4 <tcp_process_refused_data+0x98>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6918      	ldr	r0, [r3, #16]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	47a0      	blx	r4
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]
 800b7c2:	e001      	b.n	800b7c8 <tcp_process_refused_data+0x9c>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b7c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7cc:	f113 0f0d 	cmn.w	r3, #13
 800b7d0:	d110      	bne.n	800b7f4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800b7d2:	f06f 030c 	mvn.w	r3, #12
 800b7d6:	e00e      	b.n	800b7f6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800b7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7dc:	f113 0f0d 	cmn.w	r3, #13
 800b7e0:	d102      	bne.n	800b7e8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b7e2:	f06f 030c 	mvn.w	r3, #12
 800b7e6:	e006      	b.n	800b7f6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800b7ee:	f06f 0304 	mvn.w	r3, #4
 800b7f2:	e000      	b.n	800b7f6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd90      	pop	{r4, r7, pc}

0800b7fe <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b806:	e007      	b.n	800b818 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f809 	bl	800b826 <tcp_seg_free>
    seg = next;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1f4      	bne.n	800b808 <tcp_segs_free+0xa>
  }
}
 800b81e:	bf00      	nop
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00c      	beq.n	800b84e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fcc7 	bl	800a1d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	2003      	movs	r0, #3
 800b84a:	f7fd ff69 	bl	8009720 <memp_free>
  }
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b85e:	2003      	movs	r0, #3
 800b860:	f7fd ff0c 	bl	800967c <memp_malloc>
 800b864:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <tcp_seg_copy+0x1a>
    return NULL;
 800b86c:	2300      	movs	r3, #0
 800b86e:	e00a      	b.n	800b886 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b870:	2210      	movs	r2, #16
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f008 faf6 	bl	8013e66 <memcpy>
  pbuf_ref(cseg->p);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fd5a 	bl	800a338 <pbuf_ref>
  return cseg;
 800b884:	68fb      	ldr	r3, [r7, #12]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	60f8      	str	r0, [r7, #12]
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d009      	beq.n	800b8b6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	891b      	ldrh	r3, [r3, #8]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68b8      	ldr	r0, [r7, #8]
 800b8aa:	f7ff fb7d 	bl	800afa8 <tcp_recved>
    pbuf_free(p);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7fe fc90 	bl	800a1d4 <pbuf_free>
 800b8b4:	e008      	b.n	800b8c8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800b8b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d104      	bne.n	800b8c8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800b8be:	68b8      	ldr	r0, [r7, #8]
 800b8c0:	f7ff f8cc 	bl	800aa5c <tcp_close>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	e000      	b.n	800b8ca <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b8de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	db01      	blt.n	800b8ea <tcp_kill_prio+0x16>
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	e000      	b.n	800b8ec <tcp_kill_prio+0x18>
 800b8ea:	237f      	movs	r3, #127	; 0x7f
 800b8ec:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8f6:	4b16      	ldr	r3, [pc, #88]	; (800b950 <tcp_kill_prio+0x7c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	e01a      	b.n	800b934 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	7d5b      	ldrb	r3, [r3, #21]
 800b902:	7afa      	ldrb	r2, [r7, #11]
 800b904:	429a      	cmp	r2, r3
 800b906:	d312      	bcc.n	800b92e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b908:	4b12      	ldr	r3, [pc, #72]	; (800b954 <tcp_kill_prio+0x80>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	429a      	cmp	r2, r3
 800b916:	d80a      	bhi.n	800b92e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800b918:	4b0e      	ldr	r3, [pc, #56]	; (800b954 <tcp_kill_prio+0x80>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	7d5b      	ldrb	r3, [r3, #21]
 800b92c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1e1      	bne.n	800b8fe <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b940:	6938      	ldr	r0, [r7, #16]
 800b942:	f7ff f99d 	bl	800ac80 <tcp_abort>
  }
}
 800b946:	bf00      	nop
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	2001054c 	.word	0x2001054c
 800b954:	20010550 	.word	0x20010550

0800b958 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	2b08      	cmp	r3, #8
 800b966:	d009      	beq.n	800b97c <tcp_kill_state+0x24>
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	2b09      	cmp	r3, #9
 800b96c:	d006      	beq.n	800b97c <tcp_kill_state+0x24>
 800b96e:	4b1a      	ldr	r3, [pc, #104]	; (800b9d8 <tcp_kill_state+0x80>)
 800b970:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b974:	4919      	ldr	r1, [pc, #100]	; (800b9dc <tcp_kill_state+0x84>)
 800b976:	481a      	ldr	r0, [pc, #104]	; (800b9e0 <tcp_kill_state+0x88>)
 800b978:	f008 fa88 	bl	8013e8c <iprintf>

  inactivity = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b984:	4b17      	ldr	r3, [pc, #92]	; (800b9e4 <tcp_kill_state+0x8c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	e017      	b.n	800b9bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	7d1b      	ldrb	r3, [r3, #20]
 800b990:	79fa      	ldrb	r2, [r7, #7]
 800b992:	429a      	cmp	r2, r3
 800b994:	d10f      	bne.n	800b9b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b996:	4b14      	ldr	r3, [pc, #80]	; (800b9e8 <tcp_kill_state+0x90>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d807      	bhi.n	800b9b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b9a6:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <tcp_kill_state+0x90>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e4      	bne.n	800b98c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f7ff f8a6 	bl	800ab1c <tcp_abandon>
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	08016204 	.word	0x08016204
 800b9dc:	08016514 	.word	0x08016514
 800b9e0:	08016240 	.word	0x08016240
 800b9e4:	2001054c 	.word	0x2001054c
 800b9e8:	20010550 	.word	0x20010550

0800b9ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9fa:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <tcp_kill_timewait+0x58>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e012      	b.n	800ba28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba02:	4b11      	ldr	r3, [pc, #68]	; (800ba48 <tcp_kill_timewait+0x5c>)
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d807      	bhi.n	800ba22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ba12:	4b0d      	ldr	r3, [pc, #52]	; (800ba48 <tcp_kill_timewait+0x5c>)
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1e9      	bne.n	800ba02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba34:	68b8      	ldr	r0, [r7, #8]
 800ba36:	f7ff f923 	bl	800ac80 <tcp_abort>
  }
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	2001055c 	.word	0x2001055c
 800ba48:	20010550 	.word	0x20010550

0800ba4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7fd fe10 	bl	800967c <memp_malloc>
 800ba5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d124      	bne.n	800baae <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ba64:	f7ff ffc2 	bl	800b9ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba68:	2001      	movs	r0, #1
 800ba6a:	f7fd fe07 	bl	800967c <memp_malloc>
 800ba6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d11b      	bne.n	800baae <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ba76:	2009      	movs	r0, #9
 800ba78:	f7ff ff6e 	bl	800b958 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	f7fd fdfd 	bl	800967c <memp_malloc>
 800ba82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d111      	bne.n	800baae <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ba8a:	2008      	movs	r0, #8
 800ba8c:	f7ff ff64 	bl	800b958 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba90:	2001      	movs	r0, #1
 800ba92:	f7fd fdf3 	bl	800967c <memp_malloc>
 800ba96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d107      	bne.n	800baae <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff ff17 	bl	800b8d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800baa6:	2001      	movs	r0, #1
 800baa8:	f7fd fde8 	bl	800967c <memp_malloc>
 800baac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d03f      	beq.n	800bb34 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bab4:	2298      	movs	r2, #152	; 0x98
 800bab6:	2100      	movs	r1, #0
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f008 f9df 	bl	8013e7c <memset>
    pcb->prio = prio;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	79fa      	ldrb	r2, [r7, #7]
 800bac2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800baca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	22ff      	movs	r2, #255	; 0xff
 800bae2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800baea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2206      	movs	r2, #6
 800baf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2206      	movs	r2, #6
 800baf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bb0a:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <tcp_alloc+0xf4>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bb12:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <tcp_alloc+0xf8>)
 800bb14:	781a      	ldrb	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bb20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4a08      	ldr	r2, [pc, #32]	; (800bb48 <tcp_alloc+0xfc>)
 800bb28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4a07      	ldr	r2, [pc, #28]	; (800bb4c <tcp_alloc+0x100>)
 800bb30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bb34:	68fb      	ldr	r3, [r7, #12]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20010550 	.word	0x20010550
 800bb44:	2000c5de 	.word	0x2000c5de
 800bb48:	0800b88f 	.word	0x0800b88f
 800bb4c:	006ddd00 	.word	0x006ddd00

0800bb50 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bb5a:	2040      	movs	r0, #64	; 0x40
 800bb5c:	f7ff ff76 	bl	800ba4c <tcp_alloc>
 800bb60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800bb62:	68fb      	ldr	r3, [r7, #12]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	611a      	str	r2, [r3, #16]
  }
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
	...

0800bb90 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00e      	beq.n	800bbbe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7d1b      	ldrb	r3, [r3, #20]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d106      	bne.n	800bbb6 <tcp_recv+0x26>
 800bba8:	4b07      	ldr	r3, [pc, #28]	; (800bbc8 <tcp_recv+0x38>)
 800bbaa:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800bbae:	4907      	ldr	r1, [pc, #28]	; (800bbcc <tcp_recv+0x3c>)
 800bbb0:	4807      	ldr	r0, [pc, #28]	; (800bbd0 <tcp_recv+0x40>)
 800bbb2:	f008 f96b 	bl	8013e8c <iprintf>
    pcb->recv = recv;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	08016204 	.word	0x08016204
 800bbcc:	08016524 	.word	0x08016524
 800bbd0:	08016240 	.word	0x08016240

0800bbd4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00d      	beq.n	800bc00 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d106      	bne.n	800bbfa <tcp_sent+0x26>
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <tcp_sent+0x34>)
 800bbee:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800bbf2:	4906      	ldr	r1, [pc, #24]	; (800bc0c <tcp_sent+0x38>)
 800bbf4:	4806      	ldr	r0, [pc, #24]	; (800bc10 <tcp_sent+0x3c>)
 800bbf6:	f008 f949 	bl	8013e8c <iprintf>
    pcb->sent = sent;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	08016204 	.word	0x08016204
 800bc0c:	0801654c 	.word	0x0801654c
 800bc10:	08016240 	.word	0x08016240

0800bc14 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00e      	beq.n	800bc42 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	7d1b      	ldrb	r3, [r3, #20]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d106      	bne.n	800bc3a <tcp_err+0x26>
 800bc2c:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <tcp_err+0x38>)
 800bc2e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800bc32:	4907      	ldr	r1, [pc, #28]	; (800bc50 <tcp_err+0x3c>)
 800bc34:	4807      	ldr	r0, [pc, #28]	; (800bc54 <tcp_err+0x40>)
 800bc36:	f008 f929 	bl	8013e8c <iprintf>
    pcb->errf = err;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	08016204 	.word	0x08016204
 800bc50:	08016574 	.word	0x08016574
 800bc54:	08016240 	.word	0x08016240

0800bc58 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d008      	beq.n	800bc7a <tcp_accept+0x22>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7d1b      	ldrb	r3, [r3, #20]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d104      	bne.n	800bc7a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	619a      	str	r2, [r3, #24]
  }
}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	7d1b      	ldrb	r3, [r3, #20]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d106      	bne.n	800bcac <tcp_poll+0x24>
 800bc9e:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <tcp_poll+0x3c>)
 800bca0:	f240 7203 	movw	r2, #1795	; 0x703
 800bca4:	4908      	ldr	r1, [pc, #32]	; (800bcc8 <tcp_poll+0x40>)
 800bca6:	4809      	ldr	r0, [pc, #36]	; (800bccc <tcp_poll+0x44>)
 800bca8:	f008 f8f0 	bl	8013e8c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	79fa      	ldrb	r2, [r7, #7]
 800bcb8:	771a      	strb	r2, [r3, #28]
}
 800bcba:	bf00      	nop
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	08016204 	.word	0x08016204
 800bcc8:	0801659c 	.word	0x0801659c
 800bccc:	08016240 	.word	0x08016240

0800bcd0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	7d1b      	ldrb	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d034      	beq.n	800bd4a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bce4:	2b0a      	cmp	r3, #10
 800bce6:	d030      	beq.n	800bd4a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d02c      	beq.n	800bd4a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d007      	beq.n	800bd08 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fa69 	bl	800a1d4 <pbuf_free>
      pcb->refused_data = NULL;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff fd76 	bl	800b7fe <tcp_segs_free>
    pcb->ooseq = NULL;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd1e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fd6a 	bl	800b7fe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fd65 	bl	800b7fe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	669a      	str	r2, [r3, #104]	; 0x68
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d105      	bne.n	800bd74 <tcp_pcb_remove+0x20>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68da      	ldr	r2, [r3, #12]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e013      	b.n	800bd9c <tcp_pcb_remove+0x48>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	e00c      	b.n	800bd96 <tcp_pcb_remove+0x42>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d104      	bne.n	800bd90 <tcp_pcb_remove+0x3c>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	60da      	str	r2, [r3, #12]
 800bd8e:	e005      	b.n	800bd9c <tcp_pcb_remove+0x48>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1ef      	bne.n	800bd7c <tcp_pcb_remove+0x28>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bda2:	6838      	ldr	r0, [r7, #0]
 800bda4:	f7ff ff94 	bl	800bcd0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
 800bdac:	2b0a      	cmp	r3, #10
 800bdae:	d013      	beq.n	800bdd8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d00f      	beq.n	800bdd8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	7e9b      	ldrb	r3, [r3, #26]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	7e9b      	ldrb	r3, [r3, #26]
 800bdc8:	f043 0302 	orr.w	r3, r3, #2
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800bdd2:	6838      	ldr	r0, [r7, #0]
 800bdd4:	f003 f9be 	bl	800f154 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d020      	beq.n	800be22 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d006      	beq.n	800bdf6 <tcp_pcb_remove+0xa2>
 800bde8:	4b13      	ldr	r3, [pc, #76]	; (800be38 <tcp_pcb_remove+0xe4>)
 800bdea:	f240 7253 	movw	r2, #1875	; 0x753
 800bdee:	4913      	ldr	r1, [pc, #76]	; (800be3c <tcp_pcb_remove+0xe8>)
 800bdf0:	4813      	ldr	r0, [pc, #76]	; (800be40 <tcp_pcb_remove+0xec>)
 800bdf2:	f008 f84b 	bl	8013e8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <tcp_pcb_remove+0xb8>
 800bdfe:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <tcp_pcb_remove+0xe4>)
 800be00:	f240 7254 	movw	r2, #1876	; 0x754
 800be04:	490f      	ldr	r1, [pc, #60]	; (800be44 <tcp_pcb_remove+0xf0>)
 800be06:	480e      	ldr	r0, [pc, #56]	; (800be40 <tcp_pcb_remove+0xec>)
 800be08:	f008 f840 	bl	8013e8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be10:	2b00      	cmp	r3, #0
 800be12:	d006      	beq.n	800be22 <tcp_pcb_remove+0xce>
 800be14:	4b08      	ldr	r3, [pc, #32]	; (800be38 <tcp_pcb_remove+0xe4>)
 800be16:	f240 7256 	movw	r2, #1878	; 0x756
 800be1a:	490b      	ldr	r1, [pc, #44]	; (800be48 <tcp_pcb_remove+0xf4>)
 800be1c:	4808      	ldr	r0, [pc, #32]	; (800be40 <tcp_pcb_remove+0xec>)
 800be1e:	f008 f835 	bl	8013e8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2200      	movs	r2, #0
 800be26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2200      	movs	r2, #0
 800be2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	08016204 	.word	0x08016204
 800be3c:	080165bc 	.word	0x080165bc
 800be40:	08016240 	.word	0x08016240
 800be44:	080165d4 	.word	0x080165d4
 800be48:	080165f0 	.word	0x080165f0

0800be4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800be54:	4b07      	ldr	r3, [pc, #28]	; (800be74 <tcp_next_iss+0x28>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	4b07      	ldr	r3, [pc, #28]	; (800be78 <tcp_next_iss+0x2c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4413      	add	r3, r2
 800be5e:	4a05      	ldr	r2, [pc, #20]	; (800be74 <tcp_next_iss+0x28>)
 800be60:	6013      	str	r3, [r2, #0]
  return iss;
 800be62:	4b04      	ldr	r3, [pc, #16]	; (800be74 <tcp_next_iss+0x28>)
 800be64:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800be66:	4618      	mov	r0, r3
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	2000000c 	.word	0x2000000c
 800be78:	20010550 	.word	0x20010550

0800be7c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	6039      	str	r1, [r7, #0]
 800be86:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800be88:	6838      	ldr	r0, [r7, #0]
 800be8a:	f005 fc05 	bl	8011698 <ip4_route>
 800be8e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d101      	bne.n	800be9a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800be96:	88fb      	ldrh	r3, [r7, #6]
 800be98:	e010      	b.n	800bebc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800be9e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bea0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d008      	beq.n	800beba <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800bea8:	897b      	ldrh	r3, [r7, #10]
 800beaa:	3b28      	subs	r3, #40	; 0x28
 800beac:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800beae:	893a      	ldrh	r2, [r7, #8]
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	4293      	cmp	r3, r2
 800beb4:	bf28      	it	cs
 800beb6:	4613      	movcs	r3, r2
 800beb8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800beba:	88fb      	ldrh	r3, [r7, #6]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bed2:	e011      	b.n	800bef8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d108      	bne.n	800bef2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7fe feca 	bl	800ac80 <tcp_abort>
      pcb = next;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	e002      	b.n	800bef8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1ea      	bne.n	800bed4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d02c      	beq.n	800bf72 <tcp_netif_ip_addr_changed+0x6a>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d028      	beq.n	800bf72 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bf20:	4b16      	ldr	r3, [pc, #88]	; (800bf7c <tcp_netif_ip_addr_changed+0x74>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff ffcc 	bl	800bec4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bf2c:	4b14      	ldr	r3, [pc, #80]	; (800bf80 <tcp_netif_ip_addr_changed+0x78>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff ffc6 	bl	800bec4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d019      	beq.n	800bf72 <tcp_netif_ip_addr_changed+0x6a>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d015      	beq.n	800bf72 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <tcp_netif_ip_addr_changed+0x7c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	e00e      	b.n	800bf6c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d103      	bne.n	800bf68 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1ed      	bne.n	800bf4e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2001054c 	.word	0x2001054c
 800bf80:	20010558 	.word	0x20010558
 800bf84:	20010554 	.word	0x20010554

0800bf88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bf88:	b590      	push	{r4, r7, lr}
 800bf8a:	b08b      	sub	sp, #44	; 0x2c
 800bf8c:	af02      	add	r7, sp, #8
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4a82      	ldr	r2, [pc, #520]	; (800c1a0 <tcp_input+0x218>)
 800bf98:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	2b13      	cmp	r3, #19
 800bfa0:	f240 838a 	bls.w	800c6b8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bfa4:	4b7f      	ldr	r3, [pc, #508]	; (800c1a4 <tcp_input+0x21c>)
 800bfa6:	695a      	ldr	r2, [r3, #20]
 800bfa8:	4b7e      	ldr	r3, [pc, #504]	; (800c1a4 <tcp_input+0x21c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f005 fdec 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f040 8380 	bne.w	800c6bc <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bfbc:	4b79      	ldr	r3, [pc, #484]	; (800c1a4 <tcp_input+0x21c>)
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bfc4:	2be0      	cmp	r3, #224	; 0xe0
 800bfc6:	f000 8379 	beq.w	800c6bc <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800bfca:	4b75      	ldr	r3, [pc, #468]	; (800c1a0 <tcp_input+0x218>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	899b      	ldrh	r3, [r3, #12]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fc ff64 	bl	8008ea0 <lwip_htons>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	0b1b      	lsrs	r3, r3, #12
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bfe4:	7cbb      	ldrb	r3, [r7, #18]
 800bfe6:	2b13      	cmp	r3, #19
 800bfe8:	f240 8368 	bls.w	800c6bc <tcp_input+0x734>
 800bfec:	7cbb      	ldrb	r3, [r7, #18]
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	891b      	ldrh	r3, [r3, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	f200 8361 	bhi.w	800c6bc <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bffa:	7cbb      	ldrb	r3, [r7, #18]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	3b14      	subs	r3, #20
 800c000:	b29a      	uxth	r2, r3
 800c002:	4b69      	ldr	r3, [pc, #420]	; (800c1a8 <tcp_input+0x220>)
 800c004:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c006:	4b69      	ldr	r3, [pc, #420]	; (800c1ac <tcp_input+0x224>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	895a      	ldrh	r2, [r3, #10]
 800c010:	7cbb      	ldrb	r3, [r7, #18]
 800c012:	b29b      	uxth	r3, r3
 800c014:	429a      	cmp	r2, r3
 800c016:	d30d      	bcc.n	800c034 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c018:	4b63      	ldr	r3, [pc, #396]	; (800c1a8 <tcp_input+0x220>)
 800c01a:	881a      	ldrh	r2, [r3, #0]
 800c01c:	4b64      	ldr	r3, [pc, #400]	; (800c1b0 <tcp_input+0x228>)
 800c01e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800c020:	7cbb      	ldrb	r3, [r7, #18]
 800c022:	b29b      	uxth	r3, r3
 800c024:	425b      	negs	r3, r3
 800c026:	b29b      	uxth	r3, r3
 800c028:	b21b      	sxth	r3, r3
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7fe f8ad 	bl	800a18c <pbuf_header>
 800c032:	e055      	b.n	800c0e0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d105      	bne.n	800c048 <tcp_input+0xc0>
 800c03c:	4b5d      	ldr	r3, [pc, #372]	; (800c1b4 <tcp_input+0x22c>)
 800c03e:	22b2      	movs	r2, #178	; 0xb2
 800c040:	495d      	ldr	r1, [pc, #372]	; (800c1b8 <tcp_input+0x230>)
 800c042:	485e      	ldr	r0, [pc, #376]	; (800c1bc <tcp_input+0x234>)
 800c044:	f007 ff22 	bl	8013e8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800c048:	f06f 0113 	mvn.w	r1, #19
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7fe f89d 	bl	800a18c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	895a      	ldrh	r2, [r3, #10]
 800c056:	4b56      	ldr	r3, [pc, #344]	; (800c1b0 <tcp_input+0x228>)
 800c058:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800c05a:	4b53      	ldr	r3, [pc, #332]	; (800c1a8 <tcp_input+0x220>)
 800c05c:	881a      	ldrh	r2, [r3, #0]
 800c05e:	4b54      	ldr	r3, [pc, #336]	; (800c1b0 <tcp_input+0x228>)
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c066:	4b52      	ldr	r3, [pc, #328]	; (800c1b0 <tcp_input+0x228>)
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	425b      	negs	r3, r3
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	b21b      	sxth	r3, r3
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7fe f88a 	bl	800a18c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	895b      	ldrh	r3, [r3, #10]
 800c07e:	8a3a      	ldrh	r2, [r7, #16]
 800c080:	429a      	cmp	r2, r3
 800c082:	f200 831d 	bhi.w	800c6c0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	4a47      	ldr	r2, [pc, #284]	; (800c1ac <tcp_input+0x224>)
 800c08e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	8a3b      	ldrh	r3, [r7, #16]
 800c096:	425b      	negs	r3, r3
 800c098:	b29b      	uxth	r3, r3
 800c09a:	b21b      	sxth	r3, r3
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fe f874 	bl	800a18c <pbuf_header>
    p->tot_len -= opt2len;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	891a      	ldrh	r2, [r3, #8]
 800c0a8:	8a3b      	ldrh	r3, [r7, #16]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	895b      	ldrh	r3, [r3, #10]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d005      	beq.n	800c0c6 <tcp_input+0x13e>
 800c0ba:	4b3e      	ldr	r3, [pc, #248]	; (800c1b4 <tcp_input+0x22c>)
 800c0bc:	22cf      	movs	r2, #207	; 0xcf
 800c0be:	4940      	ldr	r1, [pc, #256]	; (800c1c0 <tcp_input+0x238>)
 800c0c0:	483e      	ldr	r0, [pc, #248]	; (800c1bc <tcp_input+0x234>)
 800c0c2:	f007 fee3 	bl	8013e8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	891a      	ldrh	r2, [r3, #8]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	891b      	ldrh	r3, [r3, #8]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d005      	beq.n	800c0e0 <tcp_input+0x158>
 800c0d4:	4b37      	ldr	r3, [pc, #220]	; (800c1b4 <tcp_input+0x22c>)
 800c0d6:	22d0      	movs	r2, #208	; 0xd0
 800c0d8:	493a      	ldr	r1, [pc, #232]	; (800c1c4 <tcp_input+0x23c>)
 800c0da:	4838      	ldr	r0, [pc, #224]	; (800c1bc <tcp_input+0x234>)
 800c0dc:	f007 fed6 	bl	8013e8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c0e0:	4b2f      	ldr	r3, [pc, #188]	; (800c1a0 <tcp_input+0x218>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	4b2d      	ldr	r3, [pc, #180]	; (800c1a0 <tcp_input+0x218>)
 800c0ea:	681c      	ldr	r4, [r3, #0]
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	f7fc fed7 	bl	8008ea0 <lwip_htons>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c0f6:	4b2a      	ldr	r3, [pc, #168]	; (800c1a0 <tcp_input+0x218>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	4b28      	ldr	r3, [pc, #160]	; (800c1a0 <tcp_input+0x218>)
 800c100:	681c      	ldr	r4, [r3, #0]
 800c102:	4610      	mov	r0, r2
 800c104:	f7fc fecc 	bl	8008ea0 <lwip_htons>
 800c108:	4603      	mov	r3, r0
 800c10a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c10c:	4b24      	ldr	r3, [pc, #144]	; (800c1a0 <tcp_input+0x218>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	4b23      	ldr	r3, [pc, #140]	; (800c1a0 <tcp_input+0x218>)
 800c114:	681c      	ldr	r4, [r3, #0]
 800c116:	4610      	mov	r0, r2
 800c118:	f7fc fed0 	bl	8008ebc <lwip_htonl>
 800c11c:	4603      	mov	r3, r0
 800c11e:	6063      	str	r3, [r4, #4]
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	4a29      	ldr	r2, [pc, #164]	; (800c1c8 <tcp_input+0x240>)
 800c124:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c126:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <tcp_input+0x218>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	4b1c      	ldr	r3, [pc, #112]	; (800c1a0 <tcp_input+0x218>)
 800c12e:	681c      	ldr	r4, [r3, #0]
 800c130:	4610      	mov	r0, r2
 800c132:	f7fc fec3 	bl	8008ebc <lwip_htonl>
 800c136:	4603      	mov	r3, r0
 800c138:	60a3      	str	r3, [r4, #8]
 800c13a:	68a3      	ldr	r3, [r4, #8]
 800c13c:	4a23      	ldr	r2, [pc, #140]	; (800c1cc <tcp_input+0x244>)
 800c13e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c140:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <tcp_input+0x218>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	89db      	ldrh	r3, [r3, #14]
 800c146:	b29a      	uxth	r2, r3
 800c148:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <tcp_input+0x218>)
 800c14a:	681c      	ldr	r4, [r3, #0]
 800c14c:	4610      	mov	r0, r2
 800c14e:	f7fc fea7 	bl	8008ea0 <lwip_htons>
 800c152:	4603      	mov	r3, r0
 800c154:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c156:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <tcp_input+0x218>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	899b      	ldrh	r3, [r3, #12]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fc fe9e 	bl	8008ea0 <lwip_htons>
 800c164:	4603      	mov	r3, r0
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	4b18      	ldr	r3, [pc, #96]	; (800c1d0 <tcp_input+0x248>)
 800c170:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	891a      	ldrh	r2, [r3, #8]
 800c176:	4b16      	ldr	r3, [pc, #88]	; (800c1d0 <tcp_input+0x248>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bf14      	ite	ne
 800c182:	2301      	movne	r3, #1
 800c184:	2300      	moveq	r3, #0
 800c186:	b2db      	uxtb	r3, r3
 800c188:	b29b      	uxth	r3, r3
 800c18a:	4413      	add	r3, r2
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	4b11      	ldr	r3, [pc, #68]	; (800c1d4 <tcp_input+0x24c>)
 800c190:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c196:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <tcp_input+0x250>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	61fb      	str	r3, [r7, #28]
 800c19c:	e082      	b.n	800c2a4 <tcp_input+0x31c>
 800c19e:	bf00      	nop
 800c1a0:	2000c5f0 	.word	0x2000c5f0
 800c1a4:	2000ce3c 	.word	0x2000ce3c
 800c1a8:	2000c5f4 	.word	0x2000c5f4
 800c1ac:	2000c5f8 	.word	0x2000c5f8
 800c1b0:	2000c5f6 	.word	0x2000c5f6
 800c1b4:	08016608 	.word	0x08016608
 800c1b8:	0801663c 	.word	0x0801663c
 800c1bc:	0801664c 	.word	0x0801664c
 800c1c0:	08016674 	.word	0x08016674
 800c1c4:	08016680 	.word	0x08016680
 800c1c8:	2000c600 	.word	0x2000c600
 800c1cc:	2000c604 	.word	0x2000c604
 800c1d0:	2000c60c 	.word	0x2000c60c
 800c1d4:	2000c60a 	.word	0x2000c60a
 800c1d8:	2001054c 	.word	0x2001054c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <tcp_input+0x268>
 800c1e4:	4b8f      	ldr	r3, [pc, #572]	; (800c424 <tcp_input+0x49c>)
 800c1e6:	22e2      	movs	r2, #226	; 0xe2
 800c1e8:	498f      	ldr	r1, [pc, #572]	; (800c428 <tcp_input+0x4a0>)
 800c1ea:	4890      	ldr	r0, [pc, #576]	; (800c42c <tcp_input+0x4a4>)
 800c1ec:	f007 fe4e 	bl	8013e8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	7d1b      	ldrb	r3, [r3, #20]
 800c1f4:	2b0a      	cmp	r3, #10
 800c1f6:	d105      	bne.n	800c204 <tcp_input+0x27c>
 800c1f8:	4b8a      	ldr	r3, [pc, #552]	; (800c424 <tcp_input+0x49c>)
 800c1fa:	22e3      	movs	r2, #227	; 0xe3
 800c1fc:	498c      	ldr	r1, [pc, #560]	; (800c430 <tcp_input+0x4a8>)
 800c1fe:	488b      	ldr	r0, [pc, #556]	; (800c42c <tcp_input+0x4a4>)
 800c200:	f007 fe44 	bl	8013e8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d105      	bne.n	800c218 <tcp_input+0x290>
 800c20c:	4b85      	ldr	r3, [pc, #532]	; (800c424 <tcp_input+0x49c>)
 800c20e:	22e4      	movs	r2, #228	; 0xe4
 800c210:	4988      	ldr	r1, [pc, #544]	; (800c434 <tcp_input+0x4ac>)
 800c212:	4886      	ldr	r0, [pc, #536]	; (800c42c <tcp_input+0x4a4>)
 800c214:	f007 fe3a 	bl	8013e8c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	8b1a      	ldrh	r2, [r3, #24]
 800c21c:	4b86      	ldr	r3, [pc, #536]	; (800c438 <tcp_input+0x4b0>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	b29b      	uxth	r3, r3
 800c224:	429a      	cmp	r2, r3
 800c226:	d138      	bne.n	800c29a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	8ada      	ldrh	r2, [r3, #22]
 800c22c:	4b82      	ldr	r3, [pc, #520]	; (800c438 <tcp_input+0x4b0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	885b      	ldrh	r3, [r3, #2]
 800c232:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c234:	429a      	cmp	r2, r3
 800c236:	d130      	bne.n	800c29a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b7f      	ldr	r3, [pc, #508]	; (800c43c <tcp_input+0x4b4>)
 800c23e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c240:	429a      	cmp	r2, r3
 800c242:	d12a      	bne.n	800c29a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	4b7c      	ldr	r3, [pc, #496]	; (800c43c <tcp_input+0x4b4>)
 800c24a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d124      	bne.n	800c29a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	69fa      	ldr	r2, [r7, #28]
 800c256:	429a      	cmp	r2, r3
 800c258:	d105      	bne.n	800c266 <tcp_input+0x2de>
 800c25a:	4b72      	ldr	r3, [pc, #456]	; (800c424 <tcp_input+0x49c>)
 800c25c:	22ec      	movs	r2, #236	; 0xec
 800c25e:	4978      	ldr	r1, [pc, #480]	; (800c440 <tcp_input+0x4b8>)
 800c260:	4872      	ldr	r0, [pc, #456]	; (800c42c <tcp_input+0x4a4>)
 800c262:	f007 fe13 	bl	8013e8c <iprintf>
      if (prev != NULL) {
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	68da      	ldr	r2, [r3, #12]
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c274:	4b73      	ldr	r3, [pc, #460]	; (800c444 <tcp_input+0x4bc>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c27c:	4a71      	ldr	r2, [pc, #452]	; (800c444 <tcp_input+0x4bc>)
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d10f      	bne.n	800c2ac <tcp_input+0x324>
 800c28c:	4b65      	ldr	r3, [pc, #404]	; (800c424 <tcp_input+0x49c>)
 800c28e:	22f4      	movs	r2, #244	; 0xf4
 800c290:	496d      	ldr	r1, [pc, #436]	; (800c448 <tcp_input+0x4c0>)
 800c292:	4866      	ldr	r0, [pc, #408]	; (800c42c <tcp_input+0x4a4>)
 800c294:	f007 fdfa 	bl	8013e8c <iprintf>
      break;
 800c298:	e008      	b.n	800c2ac <tcp_input+0x324>
    }
    prev = pcb;
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	61fb      	str	r3, [r7, #28]
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d198      	bne.n	800c1dc <tcp_input+0x254>
 800c2aa:	e000      	b.n	800c2ae <tcp_input+0x326>
      break;
 800c2ac:	bf00      	nop
  }

  if (pcb == NULL) {
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d173      	bne.n	800c39c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2b4:	4b65      	ldr	r3, [pc, #404]	; (800c44c <tcp_input+0x4c4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	e02f      	b.n	800c31c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	7d1b      	ldrb	r3, [r3, #20]
 800c2c0:	2b0a      	cmp	r3, #10
 800c2c2:	d005      	beq.n	800c2d0 <tcp_input+0x348>
 800c2c4:	4b57      	ldr	r3, [pc, #348]	; (800c424 <tcp_input+0x49c>)
 800c2c6:	22fe      	movs	r2, #254	; 0xfe
 800c2c8:	4961      	ldr	r1, [pc, #388]	; (800c450 <tcp_input+0x4c8>)
 800c2ca:	4858      	ldr	r0, [pc, #352]	; (800c42c <tcp_input+0x4a4>)
 800c2cc:	f007 fdde 	bl	8013e8c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	8b1a      	ldrh	r2, [r3, #24]
 800c2d4:	4b58      	ldr	r3, [pc, #352]	; (800c438 <tcp_input+0x4b0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d11a      	bne.n	800c316 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	8ada      	ldrh	r2, [r3, #22]
 800c2e4:	4b54      	ldr	r3, [pc, #336]	; (800c438 <tcp_input+0x4b0>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	885b      	ldrh	r3, [r3, #2]
 800c2ea:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d112      	bne.n	800c316 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	4b51      	ldr	r3, [pc, #324]	; (800c43c <tcp_input+0x4b4>)
 800c2f6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d10c      	bne.n	800c316 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	4b4e      	ldr	r3, [pc, #312]	; (800c43c <tcp_input+0x4b4>)
 800c302:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c304:	429a      	cmp	r2, r3
 800c306:	d106      	bne.n	800c316 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800c308:	69f8      	ldr	r0, [r7, #28]
 800c30a:	f000 fb15 	bl	800c938 <tcp_timewait_input>
        pbuf_free(p);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7fd ff60 	bl	800a1d4 <pbuf_free>
        return;
 800c314:	e1da      	b.n	800c6cc <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	61fb      	str	r3, [r7, #28]
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1cc      	bne.n	800c2bc <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c322:	2300      	movs	r3, #0
 800c324:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c326:	4b4b      	ldr	r3, [pc, #300]	; (800c454 <tcp_input+0x4cc>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	e019      	b.n	800c362 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	8ada      	ldrh	r2, [r3, #22]
 800c332:	4b41      	ldr	r3, [pc, #260]	; (800c438 <tcp_input+0x4b0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d10c      	bne.n	800c358 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b3e      	ldr	r3, [pc, #248]	; (800c43c <tcp_input+0x4b4>)
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	429a      	cmp	r2, r3
 800c348:	d00f      	beq.n	800c36a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00d      	beq.n	800c36c <tcp_input+0x3e4>
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d009      	beq.n	800c36c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1e2      	bne.n	800c32e <tcp_input+0x3a6>
 800c368:	e000      	b.n	800c36c <tcp_input+0x3e4>
            break;
 800c36a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d014      	beq.n	800c39c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	68da      	ldr	r2, [r3, #12]
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c380:	4b34      	ldr	r3, [pc, #208]	; (800c454 <tcp_input+0x4cc>)
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c388:	4a32      	ldr	r2, [pc, #200]	; (800c454 <tcp_input+0x4cc>)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800c38e:	6978      	ldr	r0, [r7, #20]
 800c390:	f000 f9f0 	bl	800c774 <tcp_listen_input>
      pbuf_free(p);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7fd ff1d 	bl	800a1d4 <pbuf_free>
      return;
 800c39a:	e197      	b.n	800c6cc <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 8164 	beq.w	800c66c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c3a4:	4b2c      	ldr	r3, [pc, #176]	; (800c458 <tcp_input+0x4d0>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	891a      	ldrh	r2, [r3, #8]
 800c3ae:	4b2a      	ldr	r3, [pc, #168]	; (800c458 <tcp_input+0x4d0>)
 800c3b0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c3b2:	4a29      	ldr	r2, [pc, #164]	; (800c458 <tcp_input+0x4d0>)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c3b8:	4b1f      	ldr	r3, [pc, #124]	; (800c438 <tcp_input+0x4b0>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a26      	ldr	r2, [pc, #152]	; (800c458 <tcp_input+0x4d0>)
 800c3be:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c3c0:	4b26      	ldr	r3, [pc, #152]	; (800c45c <tcp_input+0x4d4>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c3c6:	4b26      	ldr	r3, [pc, #152]	; (800c460 <tcp_input+0x4d8>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c3cc:	4b25      	ldr	r3, [pc, #148]	; (800c464 <tcp_input+0x4dc>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c3d2:	4b25      	ldr	r3, [pc, #148]	; (800c468 <tcp_input+0x4e0>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	f003 0308 	and.w	r3, r3, #8
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d006      	beq.n	800c3ec <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7b5b      	ldrb	r3, [r3, #13]
 800c3e2:	f043 0301 	orr.w	r3, r3, #1
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d03d      	beq.n	800c470 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c3f4:	69f8      	ldr	r0, [r7, #28]
 800c3f6:	f7ff f999 	bl	800b72c <tcp_process_refused_data>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f113 0f0d 	cmn.w	r3, #13
 800c400:	d007      	beq.n	800c412 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c406:	2b00      	cmp	r3, #0
 800c408:	d032      	beq.n	800c470 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c40a:	4b18      	ldr	r3, [pc, #96]	; (800c46c <tcp_input+0x4e4>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02e      	beq.n	800c470 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c416:	2b00      	cmp	r3, #0
 800c418:	f040 8108 	bne.w	800c62c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c41c:	69f8      	ldr	r0, [r7, #28]
 800c41e:	f002 fe3d 	bl	800f09c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c422:	e103      	b.n	800c62c <tcp_input+0x6a4>
 800c424:	08016608 	.word	0x08016608
 800c428:	080166a0 	.word	0x080166a0
 800c42c:	0801664c 	.word	0x0801664c
 800c430:	080166c8 	.word	0x080166c8
 800c434:	080166f4 	.word	0x080166f4
 800c438:	2000c5f0 	.word	0x2000c5f0
 800c43c:	2000ce3c 	.word	0x2000ce3c
 800c440:	0801671c 	.word	0x0801671c
 800c444:	2001054c 	.word	0x2001054c
 800c448:	08016748 	.word	0x08016748
 800c44c:	2001055c 	.word	0x2001055c
 800c450:	08016774 	.word	0x08016774
 800c454:	20010554 	.word	0x20010554
 800c458:	2000c5e0 	.word	0x2000c5e0
 800c45c:	2000c610 	.word	0x2000c610
 800c460:	2000c60d 	.word	0x2000c60d
 800c464:	2000c608 	.word	0x2000c608
 800c468:	2000c60c 	.word	0x2000c60c
 800c46c:	2000c60a 	.word	0x2000c60a
      }
    }
    tcp_input_pcb = pcb;
 800c470:	4a98      	ldr	r2, [pc, #608]	; (800c6d4 <tcp_input+0x74c>)
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c476:	69f8      	ldr	r0, [r7, #28]
 800c478:	f000 fac6 	bl	800ca08 <tcp_process>
 800c47c:	4603      	mov	r3, r0
 800c47e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c484:	f113 0f0d 	cmn.w	r3, #13
 800c488:	f000 80d2 	beq.w	800c630 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800c48c:	4b92      	ldr	r3, [pc, #584]	; (800c6d8 <tcp_input+0x750>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f003 0308 	and.w	r3, r3, #8
 800c494:	2b00      	cmp	r3, #0
 800c496:	d016      	beq.n	800c4c6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d008      	beq.n	800c4b4 <tcp_input+0x52c>
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a8:	69fa      	ldr	r2, [r7, #28]
 800c4aa:	6912      	ldr	r2, [r2, #16]
 800c4ac:	f06f 010d 	mvn.w	r1, #13
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c4b4:	69f9      	ldr	r1, [r7, #28]
 800c4b6:	4889      	ldr	r0, [pc, #548]	; (800c6dc <tcp_input+0x754>)
 800c4b8:	f7ff fc4c 	bl	800bd54 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800c4bc:	69f9      	ldr	r1, [r7, #28]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	f7fd f92e 	bl	8009720 <memp_free>
 800c4c4:	e0bf      	b.n	800c646 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c4ca:	4b85      	ldr	r3, [pc, #532]	; (800c6e0 <tcp_input+0x758>)
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01b      	beq.n	800c50a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c4d2:	4b83      	ldr	r3, [pc, #524]	; (800c6e0 <tcp_input+0x758>)
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d009      	beq.n	800c4f4 <tcp_input+0x56c>
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	6910      	ldr	r0, [r2, #16]
 800c4e8:	89fa      	ldrh	r2, [r7, #14]
 800c4ea:	69f9      	ldr	r1, [r7, #28]
 800c4ec:	4798      	blx	r3
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	74fb      	strb	r3, [r7, #19]
 800c4f2:	e001      	b.n	800c4f8 <tcp_input+0x570>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c4f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4fc:	f113 0f0d 	cmn.w	r3, #13
 800c500:	f000 8098 	beq.w	800c634 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c504:	4b76      	ldr	r3, [pc, #472]	; (800c6e0 <tcp_input+0x758>)
 800c506:	2200      	movs	r2, #0
 800c508:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c50a:	69f8      	ldr	r0, [r7, #28]
 800c50c:	f000 f900 	bl	800c710 <tcp_input_delayed_close>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	f040 8090 	bne.w	800c638 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c518:	4b72      	ldr	r3, [pc, #456]	; (800c6e4 <tcp_input+0x75c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d041      	beq.n	800c5a4 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <tcp_input+0x5ae>
 800c528:	4b6f      	ldr	r3, [pc, #444]	; (800c6e8 <tcp_input+0x760>)
 800c52a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c52e:	496f      	ldr	r1, [pc, #444]	; (800c6ec <tcp_input+0x764>)
 800c530:	486f      	ldr	r0, [pc, #444]	; (800c6f0 <tcp_input+0x768>)
 800c532:	f007 fcab 	bl	8013e8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	7e9b      	ldrb	r3, [r3, #26]
 800c53a:	f003 0310 	and.w	r3, r3, #16
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d008      	beq.n	800c554 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c542:	4b68      	ldr	r3, [pc, #416]	; (800c6e4 <tcp_input+0x75c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f7fd fe44 	bl	800a1d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c54c:	69f8      	ldr	r0, [r7, #28]
 800c54e:	f7fe fb97 	bl	800ac80 <tcp_abort>
            goto aborted;
 800c552:	e078      	b.n	800c646 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <tcp_input+0x5f0>
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	6918      	ldr	r0, [r3, #16]
 800c568:	4b5e      	ldr	r3, [pc, #376]	; (800c6e4 <tcp_input+0x75c>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	2300      	movs	r3, #0
 800c56e:	69f9      	ldr	r1, [r7, #28]
 800c570:	47a0      	blx	r4
 800c572:	4603      	mov	r3, r0
 800c574:	74fb      	strb	r3, [r7, #19]
 800c576:	e008      	b.n	800c58a <tcp_input+0x602>
 800c578:	4b5a      	ldr	r3, [pc, #360]	; (800c6e4 <tcp_input+0x75c>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	2300      	movs	r3, #0
 800c57e:	69f9      	ldr	r1, [r7, #28]
 800c580:	2000      	movs	r0, #0
 800c582:	f7ff f984 	bl	800b88e <tcp_recv_null>
 800c586:	4603      	mov	r3, r0
 800c588:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c58a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c58e:	f113 0f0d 	cmn.w	r3, #13
 800c592:	d053      	beq.n	800c63c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c59c:	4b51      	ldr	r3, [pc, #324]	; (800c6e4 <tcp_input+0x75c>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c5a4:	4b4c      	ldr	r3, [pc, #304]	; (800c6d8 <tcp_input+0x750>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d030      	beq.n	800c612 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d009      	beq.n	800c5cc <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5bc:	7b5a      	ldrb	r2, [r3, #13]
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5c2:	f042 0220 	orr.w	r2, r2, #32
 800c5c6:	b2d2      	uxtb	r2, r2
 800c5c8:	735a      	strb	r2, [r3, #13]
 800c5ca:	e022      	b.n	800c612 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c5d4:	d005      	beq.n	800c5e2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00b      	beq.n	800c604 <tcp_input+0x67c>
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	6918      	ldr	r0, [r3, #16]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	69f9      	ldr	r1, [r7, #28]
 800c5fc:	47a0      	blx	r4
 800c5fe:	4603      	mov	r3, r0
 800c600:	74fb      	strb	r3, [r7, #19]
 800c602:	e001      	b.n	800c608 <tcp_input+0x680>
 800c604:	2300      	movs	r3, #0
 800c606:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c60c:	f113 0f0d 	cmn.w	r3, #13
 800c610:	d016      	beq.n	800c640 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c612:	4b30      	ldr	r3, [pc, #192]	; (800c6d4 <tcp_input+0x74c>)
 800c614:	2200      	movs	r2, #0
 800c616:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c618:	69f8      	ldr	r0, [r7, #28]
 800c61a:	f000 f879 	bl	800c710 <tcp_input_delayed_close>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10f      	bne.n	800c644 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c624:	69f8      	ldr	r0, [r7, #28]
 800c626:	f002 fd95 	bl	800f154 <tcp_output>
 800c62a:	e00c      	b.n	800c646 <tcp_input+0x6be>
        goto aborted;
 800c62c:	bf00      	nop
 800c62e:	e00a      	b.n	800c646 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c630:	bf00      	nop
 800c632:	e008      	b.n	800c646 <tcp_input+0x6be>
              goto aborted;
 800c634:	bf00      	nop
 800c636:	e006      	b.n	800c646 <tcp_input+0x6be>
          goto aborted;
 800c638:	bf00      	nop
 800c63a:	e004      	b.n	800c646 <tcp_input+0x6be>
            goto aborted;
 800c63c:	bf00      	nop
 800c63e:	e002      	b.n	800c646 <tcp_input+0x6be>
              goto aborted;
 800c640:	bf00      	nop
 800c642:	e000      	b.n	800c646 <tcp_input+0x6be>
          goto aborted;
 800c644:	bf00      	nop
    tcp_input_pcb = NULL;
 800c646:	4b23      	ldr	r3, [pc, #140]	; (800c6d4 <tcp_input+0x74c>)
 800c648:	2200      	movs	r2, #0
 800c64a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c64c:	4b25      	ldr	r3, [pc, #148]	; (800c6e4 <tcp_input+0x75c>)
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800c652:	4b28      	ldr	r3, [pc, #160]	; (800c6f4 <tcp_input+0x76c>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d037      	beq.n	800c6ca <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800c65a:	4b26      	ldr	r3, [pc, #152]	; (800c6f4 <tcp_input+0x76c>)
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd fdb8 	bl	800a1d4 <pbuf_free>
      inseg.p = NULL;
 800c664:	4b23      	ldr	r3, [pc, #140]	; (800c6f4 <tcp_input+0x76c>)
 800c666:	2200      	movs	r2, #0
 800c668:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c66a:	e02e      	b.n	800c6ca <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c66c:	4b22      	ldr	r3, [pc, #136]	; (800c6f8 <tcp_input+0x770>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	899b      	ldrh	r3, [r3, #12]
 800c672:	b29b      	uxth	r3, r3
 800c674:	4618      	mov	r0, r3
 800c676:	f7fc fc13 	bl	8008ea0 <lwip_htons>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d115      	bne.n	800c6b0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c684:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <tcp_input+0x774>)
 800c686:	6818      	ldr	r0, [r3, #0]
 800c688:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <tcp_input+0x778>)
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	461a      	mov	r2, r3
 800c68e:	4b1d      	ldr	r3, [pc, #116]	; (800c704 <tcp_input+0x77c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c694:	4b18      	ldr	r3, [pc, #96]	; (800c6f8 <tcp_input+0x770>)
 800c696:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c698:	885b      	ldrh	r3, [r3, #2]
 800c69a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c69c:	4a16      	ldr	r2, [pc, #88]	; (800c6f8 <tcp_input+0x770>)
 800c69e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6a0:	8812      	ldrh	r2, [r2, #0]
 800c6a2:	b292      	uxth	r2, r2
 800c6a4:	9201      	str	r2, [sp, #4]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	4b17      	ldr	r3, [pc, #92]	; (800c708 <tcp_input+0x780>)
 800c6aa:	4a18      	ldr	r2, [pc, #96]	; (800c70c <tcp_input+0x784>)
 800c6ac:	f002 ffdc 	bl	800f668 <tcp_rst>
    pbuf_free(p);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7fd fd8f 	bl	800a1d4 <pbuf_free>
  return;
 800c6b6:	e008      	b.n	800c6ca <tcp_input+0x742>
    goto dropped;
 800c6b8:	bf00      	nop
 800c6ba:	e002      	b.n	800c6c2 <tcp_input+0x73a>
dropped:
 800c6bc:	bf00      	nop
 800c6be:	e000      	b.n	800c6c2 <tcp_input+0x73a>
      goto dropped;
 800c6c0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fd fd86 	bl	800a1d4 <pbuf_free>
 800c6c8:	e000      	b.n	800c6cc <tcp_input+0x744>
  return;
 800c6ca:	bf00      	nop
}
 800c6cc:	3724      	adds	r7, #36	; 0x24
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd90      	pop	{r4, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20010560 	.word	0x20010560
 800c6d8:	2000c60d 	.word	0x2000c60d
 800c6dc:	2001054c 	.word	0x2001054c
 800c6e0:	2000c608 	.word	0x2000c608
 800c6e4:	2000c610 	.word	0x2000c610
 800c6e8:	08016608 	.word	0x08016608
 800c6ec:	080167a4 	.word	0x080167a4
 800c6f0:	0801664c 	.word	0x0801664c
 800c6f4:	2000c5e0 	.word	0x2000c5e0
 800c6f8:	2000c5f0 	.word	0x2000c5f0
 800c6fc:	2000c604 	.word	0x2000c604
 800c700:	2000c60a 	.word	0x2000c60a
 800c704:	2000c600 	.word	0x2000c600
 800c708:	2000ce4c 	.word	0x2000ce4c
 800c70c:	2000ce50 	.word	0x2000ce50

0800c710 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800c718:	4b14      	ldr	r3, [pc, #80]	; (800c76c <tcp_input_delayed_close+0x5c>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01d      	beq.n	800c760 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7e9b      	ldrb	r3, [r3, #26]
 800c728:	f003 0310 	and.w	r3, r3, #16
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10d      	bne.n	800c74c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c736:	2b00      	cmp	r3, #0
 800c738:	d008      	beq.n	800c74c <tcp_input_delayed_close+0x3c>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	6912      	ldr	r2, [r2, #16]
 800c744:	f06f 010e 	mvn.w	r1, #14
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	4808      	ldr	r0, [pc, #32]	; (800c770 <tcp_input_delayed_close+0x60>)
 800c750:	f7ff fb00 	bl	800bd54 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	2001      	movs	r0, #1
 800c758:	f7fc ffe2 	bl	8009720 <memp_free>
    return 1;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	2000c60d 	.word	0x2000c60d
 800c770:	2001054c 	.word	0x2001054c

0800c774 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af02      	add	r7, sp, #8
 800c77a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c77c:	4b64      	ldr	r3, [pc, #400]	; (800c910 <tcp_listen_input+0x19c>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 0304 	and.w	r3, r3, #4
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 80bc 	bne.w	800c902 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c78a:	4b61      	ldr	r3, [pc, #388]	; (800c910 <tcp_listen_input+0x19c>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	f003 0310 	and.w	r3, r3, #16
 800c792:	2b00      	cmp	r3, #0
 800c794:	d016      	beq.n	800c7c4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c796:	4b5f      	ldr	r3, [pc, #380]	; (800c914 <tcp_listen_input+0x1a0>)
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	4b5f      	ldr	r3, [pc, #380]	; (800c918 <tcp_listen_input+0x1a4>)
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4b5e      	ldr	r3, [pc, #376]	; (800c91c <tcp_listen_input+0x1a8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7a6:	4b5e      	ldr	r3, [pc, #376]	; (800c920 <tcp_listen_input+0x1ac>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7aa:	885b      	ldrh	r3, [r3, #2]
 800c7ac:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7ae:	4a5c      	ldr	r2, [pc, #368]	; (800c920 <tcp_listen_input+0x1ac>)
 800c7b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7b2:	8812      	ldrh	r2, [r2, #0]
 800c7b4:	b292      	uxth	r2, r2
 800c7b6:	9201      	str	r2, [sp, #4]
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	4b5a      	ldr	r3, [pc, #360]	; (800c924 <tcp_listen_input+0x1b0>)
 800c7bc:	4a5a      	ldr	r2, [pc, #360]	; (800c928 <tcp_listen_input+0x1b4>)
 800c7be:	f002 ff53 	bl	800f668 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c7c2:	e0a0      	b.n	800c906 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800c7c4:	4b52      	ldr	r3, [pc, #328]	; (800c910 <tcp_listen_input+0x19c>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 809a 	beq.w	800c906 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7d5b      	ldrb	r3, [r3, #21]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff f938 	bl	800ba4c <tcp_alloc>
 800c7dc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d111      	bne.n	800c808 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <tcp_listen_input+0x8e>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	6910      	ldr	r0, [r2, #16]
 800c7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	4798      	blx	r3
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73bb      	strb	r3, [r7, #14]
      return;
 800c800:	e082      	b.n	800c908 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c802:	23f0      	movs	r3, #240	; 0xf0
 800c804:	73bb      	strb	r3, [r7, #14]
      return;
 800c806:	e07f      	b.n	800c908 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c808:	4b48      	ldr	r3, [pc, #288]	; (800c92c <tcp_listen_input+0x1b8>)
 800c80a:	695a      	ldr	r2, [r3, #20]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c810:	4b46      	ldr	r3, [pc, #280]	; (800c92c <tcp_listen_input+0x1b8>)
 800c812:	691a      	ldr	r2, [r3, #16]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	8ada      	ldrh	r2, [r3, #22]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c820:	4b3f      	ldr	r3, [pc, #252]	; (800c920 <tcp_listen_input+0x1ac>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	b29a      	uxth	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2203      	movs	r2, #3
 800c830:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c832:	4b3a      	ldr	r3, [pc, #232]	; (800c91c <tcp_listen_input+0x1a8>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c844:	6978      	ldr	r0, [r7, #20]
 800c846:	f7ff fb01 	bl	800be4c <tcp_next_iss>
 800c84a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c864:	4b2d      	ldr	r3, [pc, #180]	; (800c91c <tcp_listen_input+0x1a8>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	1e5a      	subs	r2, r3, #1
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7a1b      	ldrb	r3, [r3, #8]
 800c880:	f003 030c 	and.w	r3, r3, #12
 800c884:	b2da      	uxtb	r2, r3
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c88a:	4b29      	ldr	r3, [pc, #164]	; (800c930 <tcp_listen_input+0x1bc>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	60da      	str	r2, [r3, #12]
 800c892:	4a27      	ldr	r2, [pc, #156]	; (800c930 <tcp_listen_input+0x1bc>)
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	f003 f936 	bl	800fb08 <tcp_timer_needed>
 800c89c:	4b25      	ldr	r3, [pc, #148]	; (800c934 <tcp_listen_input+0x1c0>)
 800c89e:	2201      	movs	r2, #1
 800c8a0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c8a2:	6978      	ldr	r0, [r7, #20]
 800c8a4:	f001 fd14 	bl	800e2d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <tcp_listen_input+0x1ac>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	89db      	ldrh	r3, [r3, #14]
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f7ff fad5 	bl	800be7c <tcp_eff_send_mss_impl>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c8da:	2112      	movs	r1, #18
 800c8dc:	6978      	ldr	r0, [r7, #20]
 800c8de:	f002 fae1 	bl	800eea4 <tcp_enqueue_flags>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d004      	beq.n	800c8f8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	6978      	ldr	r0, [r7, #20]
 800c8f2:	f7fe f913 	bl	800ab1c <tcp_abandon>
      return;
 800c8f6:	e007      	b.n	800c908 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800c8f8:	6978      	ldr	r0, [r7, #20]
 800c8fa:	f002 fc2b 	bl	800f154 <tcp_output>
  return;
 800c8fe:	bf00      	nop
 800c900:	e001      	b.n	800c906 <tcp_listen_input+0x192>
    return;
 800c902:	bf00      	nop
 800c904:	e000      	b.n	800c908 <tcp_listen_input+0x194>
  return;
 800c906:	bf00      	nop
}
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	2000c60c 	.word	0x2000c60c
 800c914:	2000c604 	.word	0x2000c604
 800c918:	2000c60a 	.word	0x2000c60a
 800c91c:	2000c600 	.word	0x2000c600
 800c920:	2000c5f0 	.word	0x2000c5f0
 800c924:	2000ce4c 	.word	0x2000ce4c
 800c928:	2000ce50 	.word	0x2000ce50
 800c92c:	2000ce3c 	.word	0x2000ce3c
 800c930:	2001054c 	.word	0x2001054c
 800c934:	20010548 	.word	0x20010548

0800c938 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af02      	add	r7, sp, #8
 800c93e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c940:	4b29      	ldr	r3, [pc, #164]	; (800c9e8 <tcp_timewait_input+0xb0>)
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d147      	bne.n	800c9dc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c94c:	4b26      	ldr	r3, [pc, #152]	; (800c9e8 <tcp_timewait_input+0xb0>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	f003 0302 	and.w	r3, r3, #2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d027      	beq.n	800c9a8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c958:	4b24      	ldr	r3, [pc, #144]	; (800c9ec <tcp_timewait_input+0xb4>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	db2a      	blt.n	800c9bc <tcp_timewait_input+0x84>
 800c966:	4b21      	ldr	r3, [pc, #132]	; (800c9ec <tcp_timewait_input+0xb4>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	6879      	ldr	r1, [r7, #4]
 800c970:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c972:	440b      	add	r3, r1
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	dc20      	bgt.n	800c9bc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c97a:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <tcp_timewait_input+0xb8>)
 800c97c:	6818      	ldr	r0, [r3, #0]
 800c97e:	4b1d      	ldr	r3, [pc, #116]	; (800c9f4 <tcp_timewait_input+0xbc>)
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	4b19      	ldr	r3, [pc, #100]	; (800c9ec <tcp_timewait_input+0xb4>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c98a:	4b1b      	ldr	r3, [pc, #108]	; (800c9f8 <tcp_timewait_input+0xc0>)
 800c98c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c98e:	885b      	ldrh	r3, [r3, #2]
 800c990:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c992:	4a19      	ldr	r2, [pc, #100]	; (800c9f8 <tcp_timewait_input+0xc0>)
 800c994:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c996:	8812      	ldrh	r2, [r2, #0]
 800c998:	b292      	uxth	r2, r2
 800c99a:	9201      	str	r2, [sp, #4]
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <tcp_timewait_input+0xc4>)
 800c9a0:	4a17      	ldr	r2, [pc, #92]	; (800ca00 <tcp_timewait_input+0xc8>)
 800c9a2:	f002 fe61 	bl	800f668 <tcp_rst>
      return;
 800c9a6:	e01c      	b.n	800c9e2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800c9a8:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <tcp_timewait_input+0xb0>)
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c9b4:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <tcp_timewait_input+0xcc>)
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c9bc:	4b0d      	ldr	r3, [pc, #52]	; (800c9f4 <tcp_timewait_input+0xbc>)
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00d      	beq.n	800c9e0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	7e9b      	ldrb	r3, [r3, #26]
 800c9c8:	f043 0302 	orr.w	r3, r3, #2
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f002 fbbe 	bl	800f154 <tcp_output>
  }
  return;
 800c9d8:	bf00      	nop
 800c9da:	e001      	b.n	800c9e0 <tcp_timewait_input+0xa8>
    return;
 800c9dc:	bf00      	nop
 800c9de:	e000      	b.n	800c9e2 <tcp_timewait_input+0xaa>
  return;
 800c9e0:	bf00      	nop
}
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	2000c60c 	.word	0x2000c60c
 800c9ec:	2000c600 	.word	0x2000c600
 800c9f0:	2000c604 	.word	0x2000c604
 800c9f4:	2000c60a 	.word	0x2000c60a
 800c9f8:	2000c5f0 	.word	0x2000c5f0
 800c9fc:	2000ce4c 	.word	0x2000ce4c
 800ca00:	2000ce50 	.word	0x2000ce50
 800ca04:	20010550 	.word	0x20010550

0800ca08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	; 0x28
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ca18:	4ba4      	ldr	r3, [pc, #656]	; (800ccac <tcp_process+0x2a4>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	f003 0304 	and.w	r3, r3, #4
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d04e      	beq.n	800cac2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7d1b      	ldrb	r3, [r3, #20]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d108      	bne.n	800ca3e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca30:	4b9f      	ldr	r3, [pc, #636]	; (800ccb0 <tcp_process+0x2a8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d123      	bne.n	800ca80 <tcp_process+0x78>
        acceptable = 1;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	76fb      	strb	r3, [r7, #27]
 800ca3c:	e020      	b.n	800ca80 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca42:	4b9c      	ldr	r3, [pc, #624]	; (800ccb4 <tcp_process+0x2ac>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d102      	bne.n	800ca50 <tcp_process+0x48>
        acceptable = 1;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	76fb      	strb	r3, [r7, #27]
 800ca4e:	e017      	b.n	800ca80 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca50:	4b98      	ldr	r3, [pc, #608]	; (800ccb4 <tcp_process+0x2ac>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db10      	blt.n	800ca80 <tcp_process+0x78>
 800ca5e:	4b95      	ldr	r3, [pc, #596]	; (800ccb4 <tcp_process+0x2ac>)
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ca6a:	440b      	add	r3, r1
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dc06      	bgt.n	800ca80 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	7e9b      	ldrb	r3, [r3, #26]
 800ca76:	f043 0302 	orr.w	r3, r3, #2
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ca80:	7efb      	ldrb	r3, [r7, #27]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d01b      	beq.n	800cabe <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7d1b      	ldrb	r3, [r3, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <tcp_process+0x94>
 800ca8e:	4b8a      	ldr	r3, [pc, #552]	; (800ccb8 <tcp_process+0x2b0>)
 800ca90:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ca94:	4989      	ldr	r1, [pc, #548]	; (800ccbc <tcp_process+0x2b4>)
 800ca96:	488a      	ldr	r0, [pc, #552]	; (800ccc0 <tcp_process+0x2b8>)
 800ca98:	f007 f9f8 	bl	8013e8c <iprintf>
      recv_flags |= TF_RESET;
 800ca9c:	4b89      	ldr	r3, [pc, #548]	; (800ccc4 <tcp_process+0x2bc>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	f043 0308 	orr.w	r3, r3, #8
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	4b87      	ldr	r3, [pc, #540]	; (800ccc4 <tcp_process+0x2bc>)
 800caa8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	7e9b      	ldrb	r3, [r3, #26]
 800caae:	f023 0301 	bic.w	r3, r3, #1
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800cab8:	f06f 030d 	mvn.w	r3, #13
 800cabc:	e34d      	b.n	800d15a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	e34b      	b.n	800d15a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cac2:	4b7a      	ldr	r3, [pc, #488]	; (800ccac <tcp_process+0x2a4>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d010      	beq.n	800caf0 <tcp_process+0xe8>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	7d1b      	ldrb	r3, [r3, #20]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d00c      	beq.n	800caf0 <tcp_process+0xe8>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d1b      	ldrb	r3, [r3, #20]
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d008      	beq.n	800caf0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	7e9b      	ldrb	r3, [r3, #26]
 800cae2:	f043 0302 	orr.w	r3, r3, #2
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	e334      	b.n	800d15a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7e9b      	ldrb	r3, [r3, #26]
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d103      	bne.n	800cb04 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cafc:	4b72      	ldr	r3, [pc, #456]	; (800ccc8 <tcp_process+0x2c0>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 fbdf 	bl	800e2d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	7d1b      	ldrb	r3, [r3, #20]
 800cb16:	3b02      	subs	r3, #2
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	f200 830e 	bhi.w	800d13a <tcp_process+0x732>
 800cb1e:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <tcp_process+0x11c>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cd3d 	.word	0x0800cd3d
 800cb2c:	0800ce95 	.word	0x0800ce95
 800cb30:	0800cebf 	.word	0x0800cebf
 800cb34:	0800cfe9 	.word	0x0800cfe9
 800cb38:	0800ce95 	.word	0x0800ce95
 800cb3c:	0800d075 	.word	0x0800d075
 800cb40:	0800d105 	.word	0x0800d105
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cb44:	4b59      	ldr	r3, [pc, #356]	; (800ccac <tcp_process+0x2a4>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f003 0310 	and.w	r3, r3, #16
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 80cb 	beq.w	800cce8 <tcp_process+0x2e0>
 800cb52:	4b56      	ldr	r3, [pc, #344]	; (800ccac <tcp_process+0x2a4>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	f003 0302 	and.w	r3, r3, #2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 80c4 	beq.w	800cce8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	4b52      	ldr	r3, [pc, #328]	; (800ccb0 <tcp_process+0x2a8>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	f040 80bc 	bne.w	800cce8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800cb70:	4b50      	ldr	r3, [pc, #320]	; (800ccb4 <tcp_process+0x2ac>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800cb82:	4b4b      	ldr	r3, [pc, #300]	; (800ccb0 <tcp_process+0x2a8>)
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800cb8a:	4b50      	ldr	r3, [pc, #320]	; (800cccc <tcp_process+0x2c4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	89db      	ldrh	r3, [r3, #14]
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cba4:	4b43      	ldr	r3, [pc, #268]	; (800ccb4 <tcp_process+0x2ac>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	1e5a      	subs	r2, r3, #1
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2204      	movs	r2, #4
 800cbb2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7ff f95c 	bl	800be7c <tcp_eff_send_mss_impl>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	f241 121c 	movw	r2, #4380	; 0x111c
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	bf38      	it	cc
 800cbda:	461a      	movcc	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	bf28      	it	cs
 800cbe6:	4613      	movcs	r3, r2
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <tcp_process+0x200>
 800cbfa:	4b2f      	ldr	r3, [pc, #188]	; (800ccb8 <tcp_process+0x2b0>)
 800cbfc:	f240 321a 	movw	r2, #794	; 0x31a
 800cc00:	4933      	ldr	r1, [pc, #204]	; (800ccd0 <tcp_process+0x2c8>)
 800cc02:	482f      	ldr	r0, [pc, #188]	; (800ccc0 <tcp_process+0x2b8>)
 800cc04:	f007 f942 	bl	8013e8c <iprintf>
      --pcb->snd_queuelen;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc1c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d111      	bne.n	800cc48 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc28:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <tcp_process+0x236>
 800cc30:	4b21      	ldr	r3, [pc, #132]	; (800ccb8 <tcp_process+0x2b0>)
 800cc32:	f240 3222 	movw	r2, #802	; 0x322
 800cc36:	4927      	ldr	r1, [pc, #156]	; (800ccd4 <tcp_process+0x2cc>)
 800cc38:	4821      	ldr	r0, [pc, #132]	; (800ccc0 <tcp_process+0x2b8>)
 800cc3a:	f007 f927 	bl	8013e8c <iprintf>
        pcb->unsent = rseg->next;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	669a      	str	r2, [r3, #104]	; 0x68
 800cc46:	e003      	b.n	800cc50 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800cc50:	69f8      	ldr	r0, [r7, #28]
 800cc52:	f7fe fde8 	bl	800b826 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d104      	bne.n	800cc68 <tcp_process+0x260>
        pcb->rtime = -1;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc64:	861a      	strh	r2, [r3, #48]	; 0x30
 800cc66:	e006      	b.n	800cc76 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00a      	beq.n	800cc96 <tcp_process+0x28e>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	6910      	ldr	r0, [r2, #16]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	4798      	blx	r3
 800cc90:	4603      	mov	r3, r0
 800cc92:	76bb      	strb	r3, [r7, #26]
 800cc94:	e001      	b.n	800cc9a <tcp_process+0x292>
 800cc96:	2300      	movs	r3, #0
 800cc98:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800cc9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cc9e:	f113 0f0d 	cmn.w	r3, #13
 800cca2:	d119      	bne.n	800ccd8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800cca4:	f06f 030c 	mvn.w	r3, #12
 800cca8:	e257      	b.n	800d15a <tcp_process+0x752>
 800ccaa:	bf00      	nop
 800ccac:	2000c60c 	.word	0x2000c60c
 800ccb0:	2000c604 	.word	0x2000c604
 800ccb4:	2000c600 	.word	0x2000c600
 800ccb8:	08016608 	.word	0x08016608
 800ccbc:	080167c0 	.word	0x080167c0
 800ccc0:	0801664c 	.word	0x0801664c
 800ccc4:	2000c60d 	.word	0x2000c60d
 800ccc8:	20010550 	.word	0x20010550
 800cccc:	2000c5f0 	.word	0x2000c5f0
 800ccd0:	080167e0 	.word	0x080167e0
 800ccd4:	080167f8 	.word	0x080167f8
      }
      tcp_ack_now(pcb);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7e9b      	ldrb	r3, [r3, #26]
 800ccdc:	f043 0302 	orr.w	r3, r3, #2
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800cce6:	e22a      	b.n	800d13e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800cce8:	4b9f      	ldr	r3, [pc, #636]	; (800cf68 <tcp_process+0x560>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f000 8224 	beq.w	800d13e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccf6:	4b9d      	ldr	r3, [pc, #628]	; (800cf6c <tcp_process+0x564>)
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	4b9d      	ldr	r3, [pc, #628]	; (800cf70 <tcp_process+0x568>)
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	4b9c      	ldr	r3, [pc, #624]	; (800cf74 <tcp_process+0x56c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd06:	4b9c      	ldr	r3, [pc, #624]	; (800cf78 <tcp_process+0x570>)
 800cd08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd0a:	885b      	ldrh	r3, [r3, #2]
 800cd0c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd0e:	4a9a      	ldr	r2, [pc, #616]	; (800cf78 <tcp_process+0x570>)
 800cd10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd12:	8812      	ldrh	r2, [r2, #0]
 800cd14:	b292      	uxth	r2, r2
 800cd16:	9201      	str	r2, [sp, #4]
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	4b98      	ldr	r3, [pc, #608]	; (800cf7c <tcp_process+0x574>)
 800cd1c:	4a98      	ldr	r2, [pc, #608]	; (800cf80 <tcp_process+0x578>)
 800cd1e:	f002 fca3 	bl	800f668 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd28:	2b05      	cmp	r3, #5
 800cd2a:	f200 8208 	bhi.w	800d13e <tcp_process+0x736>
        pcb->rtime = 0;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f002 fd0d 	bl	800f754 <tcp_rexmit_rto>
    break;
 800cd3a:	e200      	b.n	800d13e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800cd3c:	4b8a      	ldr	r3, [pc, #552]	; (800cf68 <tcp_process+0x560>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	f003 0310 	and.w	r3, r3, #16
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 8091 	beq.w	800ce6c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800cd4a:	4b88      	ldr	r3, [pc, #544]	; (800cf6c <tcp_process+0x564>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	db71      	blt.n	800ce3e <tcp_process+0x436>
 800cd5a:	4b84      	ldr	r3, [pc, #528]	; (800cf6c <tcp_process+0x564>)
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	dc6a      	bgt.n	800ce3e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2204      	movs	r2, #4
 800cd6c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00b      	beq.n	800cd8e <tcp_process+0x386>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d106      	bne.n	800cd8e <tcp_process+0x386>
 800cd80:	4b80      	ldr	r3, [pc, #512]	; (800cf84 <tcp_process+0x57c>)
 800cd82:	f240 3251 	movw	r2, #849	; 0x351
 800cd86:	4980      	ldr	r1, [pc, #512]	; (800cf88 <tcp_process+0x580>)
 800cd88:	4880      	ldr	r0, [pc, #512]	; (800cf8c <tcp_process+0x584>)
 800cd8a:	f007 f87f 	bl	8013e8c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800cd96:	23fa      	movs	r3, #250	; 0xfa
 800cd98:	76bb      	strb	r3, [r7, #26]
 800cd9a:	e011      	b.n	800cdc0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <tcp_process+0x3b4>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	6910      	ldr	r0, [r2, #16]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	4798      	blx	r3
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	76bb      	strb	r3, [r7, #26]
 800cdba:	e001      	b.n	800cdc0 <tcp_process+0x3b8>
 800cdbc:	23f0      	movs	r3, #240	; 0xf0
 800cdbe:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800cdc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00a      	beq.n	800cdde <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800cdc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cdcc:	f113 0f0d 	cmn.w	r3, #13
 800cdd0:	d002      	beq.n	800cdd8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7fd ff54 	bl	800ac80 <tcp_abort>
          }
          return ERR_ABRT;
 800cdd8:	f06f 030c 	mvn.w	r3, #12
 800cddc:	e1bd      	b.n	800d15a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fa42 	bl	800d268 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800cde4:	4b6a      	ldr	r3, [pc, #424]	; (800cf90 <tcp_process+0x588>)
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d005      	beq.n	800cdf8 <tcp_process+0x3f0>
          recv_acked--;
 800cdec:	4b68      	ldr	r3, [pc, #416]	; (800cf90 <tcp_process+0x588>)
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	4b66      	ldr	r3, [pc, #408]	; (800cf90 <tcp_process+0x588>)
 800cdf6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	f241 121c 	movw	r2, #4380	; 0x111c
 800ce02:	429a      	cmp	r2, r3
 800ce04:	bf38      	it	cc
 800ce06:	461a      	movcc	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	bf28      	it	cs
 800ce12:	4613      	movcs	r3, r2
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ce1c:	4b5d      	ldr	r3, [pc, #372]	; (800cf94 <tcp_process+0x58c>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	f003 0320 	and.w	r3, r3, #32
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d034      	beq.n	800ce92 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7e9b      	ldrb	r3, [r3, #26]
 800ce2c:	f043 0302 	orr.w	r3, r3, #2
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2207      	movs	r2, #7
 800ce3a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ce3c:	e029      	b.n	800ce92 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce3e:	4b4b      	ldr	r3, [pc, #300]	; (800cf6c <tcp_process+0x564>)
 800ce40:	6818      	ldr	r0, [r3, #0]
 800ce42:	4b4b      	ldr	r3, [pc, #300]	; (800cf70 <tcp_process+0x568>)
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	4b4a      	ldr	r3, [pc, #296]	; (800cf74 <tcp_process+0x56c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce4e:	4b4a      	ldr	r3, [pc, #296]	; (800cf78 <tcp_process+0x570>)
 800ce50:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce52:	885b      	ldrh	r3, [r3, #2]
 800ce54:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce56:	4a48      	ldr	r2, [pc, #288]	; (800cf78 <tcp_process+0x570>)
 800ce58:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce5a:	8812      	ldrh	r2, [r2, #0]
 800ce5c:	b292      	uxth	r2, r2
 800ce5e:	9201      	str	r2, [sp, #4]
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	4b46      	ldr	r3, [pc, #280]	; (800cf7c <tcp_process+0x574>)
 800ce64:	4a46      	ldr	r2, [pc, #280]	; (800cf80 <tcp_process+0x578>)
 800ce66:	f002 fbff 	bl	800f668 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ce6a:	e16a      	b.n	800d142 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ce6c:	4b3e      	ldr	r3, [pc, #248]	; (800cf68 <tcp_process+0x560>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 0302 	and.w	r3, r3, #2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 8164 	beq.w	800d142 <tcp_process+0x73a>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	1e5a      	subs	r2, r3, #1
 800ce80:	4b3c      	ldr	r3, [pc, #240]	; (800cf74 <tcp_process+0x56c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	f040 815c 	bne.w	800d142 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f002 fc98 	bl	800f7c0 <tcp_rexmit>
    break;
 800ce90:	e157      	b.n	800d142 <tcp_process+0x73a>
 800ce92:	e156      	b.n	800d142 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f9e7 	bl	800d268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ce9a:	4b3e      	ldr	r3, [pc, #248]	; (800cf94 <tcp_process+0x58c>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	f003 0320 	and.w	r3, r3, #32
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 814f 	beq.w	800d146 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7e9b      	ldrb	r3, [r3, #26]
 800ceac:	f043 0302 	orr.w	r3, r3, #2
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2207      	movs	r2, #7
 800ceba:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cebc:	e143      	b.n	800d146 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f9d2 	bl	800d268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800cec4:	4b33      	ldr	r3, [pc, #204]	; (800cf94 <tcp_process+0x58c>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	f003 0320 	and.w	r3, r3, #32
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d074      	beq.n	800cfba <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ced0:	4b25      	ldr	r3, [pc, #148]	; (800cf68 <tcp_process+0x560>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	f003 0310 	and.w	r3, r3, #16
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d063      	beq.n	800cfa4 <tcp_process+0x59c>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cee0:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <tcp_process+0x564>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d15d      	bne.n	800cfa4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d159      	bne.n	800cfa4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7e9b      	ldrb	r3, [r3, #26]
 800cef4:	f043 0302 	orr.w	r3, r3, #2
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7fe fee6 	bl	800bcd0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cf04:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <tcp_process+0x590>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d105      	bne.n	800cf1a <tcp_process+0x512>
 800cf0e:	4b22      	ldr	r3, [pc, #136]	; (800cf98 <tcp_process+0x590>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	4a20      	ldr	r2, [pc, #128]	; (800cf98 <tcp_process+0x590>)
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	e013      	b.n	800cf42 <tcp_process+0x53a>
 800cf1a:	4b1f      	ldr	r3, [pc, #124]	; (800cf98 <tcp_process+0x590>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	e00c      	b.n	800cf3c <tcp_process+0x534>
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d104      	bne.n	800cf36 <tcp_process+0x52e>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	60da      	str	r2, [r3, #12]
 800cf34:	e005      	b.n	800cf42 <tcp_process+0x53a>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	617b      	str	r3, [r7, #20]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1ef      	bne.n	800cf22 <tcp_process+0x51a>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	60da      	str	r2, [r3, #12]
 800cf48:	4b14      	ldr	r3, [pc, #80]	; (800cf9c <tcp_process+0x594>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	220a      	movs	r2, #10
 800cf52:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf54:	4b12      	ldr	r3, [pc, #72]	; (800cfa0 <tcp_process+0x598>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	60da      	str	r2, [r3, #12]
 800cf5c:	4a10      	ldr	r2, [pc, #64]	; (800cfa0 <tcp_process+0x598>)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6013      	str	r3, [r2, #0]
 800cf62:	f002 fdd1 	bl	800fb08 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800cf66:	e0f0      	b.n	800d14a <tcp_process+0x742>
 800cf68:	2000c60c 	.word	0x2000c60c
 800cf6c:	2000c604 	.word	0x2000c604
 800cf70:	2000c60a 	.word	0x2000c60a
 800cf74:	2000c600 	.word	0x2000c600
 800cf78:	2000c5f0 	.word	0x2000c5f0
 800cf7c:	2000ce4c 	.word	0x2000ce4c
 800cf80:	2000ce50 	.word	0x2000ce50
 800cf84:	08016608 	.word	0x08016608
 800cf88:	0801680c 	.word	0x0801680c
 800cf8c:	0801664c 	.word	0x0801664c
 800cf90:	2000c608 	.word	0x2000c608
 800cf94:	2000c60d 	.word	0x2000c60d
 800cf98:	2001054c 	.word	0x2001054c
 800cf9c:	20010548 	.word	0x20010548
 800cfa0:	2001055c 	.word	0x2001055c
        tcp_ack_now(pcb);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7e9b      	ldrb	r3, [r3, #26]
 800cfa8:	f043 0302 	orr.w	r3, r3, #2
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2208      	movs	r2, #8
 800cfb6:	751a      	strb	r2, [r3, #20]
    break;
 800cfb8:	e0c7      	b.n	800d14a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cfba:	4b6a      	ldr	r3, [pc, #424]	; (800d164 <tcp_process+0x75c>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	f003 0310 	and.w	r3, r3, #16
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 80c1 	beq.w	800d14a <tcp_process+0x742>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfcc:	4b66      	ldr	r3, [pc, #408]	; (800d168 <tcp_process+0x760>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	f040 80ba 	bne.w	800d14a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f040 80b5 	bne.w	800d14a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2206      	movs	r2, #6
 800cfe4:	751a      	strb	r2, [r3, #20]
    break;
 800cfe6:	e0b0      	b.n	800d14a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f93d 	bl	800d268 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800cfee:	4b5f      	ldr	r3, [pc, #380]	; (800d16c <tcp_process+0x764>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 80a9 	beq.w	800d14e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	7e9b      	ldrb	r3, [r3, #26]
 800d000:	f043 0302 	orr.w	r3, r3, #2
 800d004:	b2da      	uxtb	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7fe fe60 	bl	800bcd0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d010:	4b57      	ldr	r3, [pc, #348]	; (800d170 <tcp_process+0x768>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	429a      	cmp	r2, r3
 800d018:	d105      	bne.n	800d026 <tcp_process+0x61e>
 800d01a:	4b55      	ldr	r3, [pc, #340]	; (800d170 <tcp_process+0x768>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	4a53      	ldr	r2, [pc, #332]	; (800d170 <tcp_process+0x768>)
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	e013      	b.n	800d04e <tcp_process+0x646>
 800d026:	4b52      	ldr	r3, [pc, #328]	; (800d170 <tcp_process+0x768>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	613b      	str	r3, [r7, #16]
 800d02c:	e00c      	b.n	800d048 <tcp_process+0x640>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	429a      	cmp	r2, r3
 800d036:	d104      	bne.n	800d042 <tcp_process+0x63a>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	60da      	str	r2, [r3, #12]
 800d040:	e005      	b.n	800d04e <tcp_process+0x646>
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1ef      	bne.n	800d02e <tcp_process+0x626>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	60da      	str	r2, [r3, #12]
 800d054:	4b47      	ldr	r3, [pc, #284]	; (800d174 <tcp_process+0x76c>)
 800d056:	2201      	movs	r2, #1
 800d058:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	220a      	movs	r2, #10
 800d05e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d060:	4b45      	ldr	r3, [pc, #276]	; (800d178 <tcp_process+0x770>)
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	60da      	str	r2, [r3, #12]
 800d068:	4a43      	ldr	r2, [pc, #268]	; (800d178 <tcp_process+0x770>)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	f002 fd4b 	bl	800fb08 <tcp_timer_needed>
    }
    break;
 800d072:	e06c      	b.n	800d14e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f8f7 	bl	800d268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d07a:	4b3a      	ldr	r3, [pc, #232]	; (800d164 <tcp_process+0x75c>)
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	f003 0310 	and.w	r3, r3, #16
 800d082:	2b00      	cmp	r3, #0
 800d084:	d065      	beq.n	800d152 <tcp_process+0x74a>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d08a:	4b37      	ldr	r3, [pc, #220]	; (800d168 <tcp_process+0x760>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d15f      	bne.n	800d152 <tcp_process+0x74a>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d096:	2b00      	cmp	r3, #0
 800d098:	d15b      	bne.n	800d152 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7fe fe18 	bl	800bcd0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d0a0:	4b33      	ldr	r3, [pc, #204]	; (800d170 <tcp_process+0x768>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d105      	bne.n	800d0b6 <tcp_process+0x6ae>
 800d0aa:	4b31      	ldr	r3, [pc, #196]	; (800d170 <tcp_process+0x768>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	4a2f      	ldr	r2, [pc, #188]	; (800d170 <tcp_process+0x768>)
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	e013      	b.n	800d0de <tcp_process+0x6d6>
 800d0b6:	4b2e      	ldr	r3, [pc, #184]	; (800d170 <tcp_process+0x768>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	e00c      	b.n	800d0d8 <tcp_process+0x6d0>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d104      	bne.n	800d0d2 <tcp_process+0x6ca>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68da      	ldr	r2, [r3, #12]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	60da      	str	r2, [r3, #12]
 800d0d0:	e005      	b.n	800d0de <tcp_process+0x6d6>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1ef      	bne.n	800d0be <tcp_process+0x6b6>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	60da      	str	r2, [r3, #12]
 800d0e4:	4b23      	ldr	r3, [pc, #140]	; (800d174 <tcp_process+0x76c>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	220a      	movs	r2, #10
 800d0ee:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d0f0:	4b21      	ldr	r3, [pc, #132]	; (800d178 <tcp_process+0x770>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	60da      	str	r2, [r3, #12]
 800d0f8:	4a1f      	ldr	r2, [pc, #124]	; (800d178 <tcp_process+0x770>)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6013      	str	r3, [r2, #0]
 800d0fe:	f002 fd03 	bl	800fb08 <tcp_timer_needed>
    }
    break;
 800d102:	e026      	b.n	800d152 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f8af 	bl	800d268 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d10a:	4b16      	ldr	r3, [pc, #88]	; (800d164 <tcp_process+0x75c>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	f003 0310 	and.w	r3, r3, #16
 800d112:	2b00      	cmp	r3, #0
 800d114:	d01f      	beq.n	800d156 <tcp_process+0x74e>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d11a:	4b13      	ldr	r3, [pc, #76]	; (800d168 <tcp_process+0x760>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d119      	bne.n	800d156 <tcp_process+0x74e>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d126:	2b00      	cmp	r3, #0
 800d128:	d115      	bne.n	800d156 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <tcp_process+0x764>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	f043 0310 	orr.w	r3, r3, #16
 800d132:	b2da      	uxtb	r2, r3
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <tcp_process+0x764>)
 800d136:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d138:	e00d      	b.n	800d156 <tcp_process+0x74e>
  default:
    break;
 800d13a:	bf00      	nop
 800d13c:	e00c      	b.n	800d158 <tcp_process+0x750>
    break;
 800d13e:	bf00      	nop
 800d140:	e00a      	b.n	800d158 <tcp_process+0x750>
    break;
 800d142:	bf00      	nop
 800d144:	e008      	b.n	800d158 <tcp_process+0x750>
    break;
 800d146:	bf00      	nop
 800d148:	e006      	b.n	800d158 <tcp_process+0x750>
    break;
 800d14a:	bf00      	nop
 800d14c:	e004      	b.n	800d158 <tcp_process+0x750>
    break;
 800d14e:	bf00      	nop
 800d150:	e002      	b.n	800d158 <tcp_process+0x750>
    break;
 800d152:	bf00      	nop
 800d154:	e000      	b.n	800d158 <tcp_process+0x750>
    break;
 800d156:	bf00      	nop
  }
  return ERR_OK;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3720      	adds	r7, #32
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	2000c60c 	.word	0x2000c60c
 800d168:	2000c604 	.word	0x2000c604
 800d16c:	2000c60d 	.word	0x2000c60d
 800d170:	2001054c 	.word	0x2001054c
 800d174:	20010548 	.word	0x20010548
 800d178:	2001055c 	.word	0x2001055c

0800d17c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	899b      	ldrh	r3, [r3, #12]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fb fe86 	bl	8008ea0 <lwip_htons>
 800d194:	4603      	mov	r3, r0
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d027      	beq.n	800d1ee <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d19e:	6838      	ldr	r0, [r7, #0]
 800d1a0:	f7fe fb2d 	bl	800b7fe <tcp_segs_free>
    next = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	603b      	str	r3, [r7, #0]
 800d1a8:	e055      	b.n	800d256 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	899b      	ldrh	r3, [r3, #12]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fb fe74 	bl	8008ea0 <lwip_htons>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00d      	beq.n	800d1de <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	899b      	ldrh	r3, [r3, #12]
 800d1c8:	b29c      	uxth	r4, r3
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f7fb fe68 	bl	8008ea0 <lwip_htons>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	4322      	orrs	r2, r4
 800d1da:	b292      	uxth	r2, r2
 800d1dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7fe fb1c 	bl	800b826 <tcp_seg_free>
    while (next &&
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00e      	beq.n	800d212 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	891b      	ldrh	r3, [r3, #8]
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <tcp_oos_insert_segment+0xe8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	441a      	add	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	8909      	ldrh	r1, [r1, #8]
 800d20a:	440b      	add	r3, r1
 800d20c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d20e:	2b00      	cmp	r3, #0
 800d210:	dacb      	bge.n	800d1aa <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01e      	beq.n	800d256 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	891b      	ldrh	r3, [r3, #8]
 800d21c:	461a      	mov	r2, r3
 800d21e:	4b11      	ldr	r3, [pc, #68]	; (800d264 <tcp_oos_insert_segment+0xe8>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	441a      	add	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dd12      	ble.n	800d256 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	b29a      	uxth	r2, r3
 800d238:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <tcp_oos_insert_segment+0xe8>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	b29a      	uxth	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685a      	ldr	r2, [r3, #4]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	891b      	ldrh	r3, [r3, #8]
 800d24e:	4619      	mov	r1, r3
 800d250:	4610      	mov	r0, r2
 800d252:	f7fc fe4b 	bl	8009eec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	601a      	str	r2, [r3, #0]
}
 800d25c:	bf00      	nop
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	bd90      	pop	{r4, r7, pc}
 800d264:	2000c600 	.word	0x2000c600

0800d268 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26a:	b08d      	sub	sp, #52	; 0x34
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d806      	bhi.n	800d28a <tcp_receive+0x22>
 800d27c:	4ba6      	ldr	r3, [pc, #664]	; (800d518 <tcp_receive+0x2b0>)
 800d27e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d282:	49a6      	ldr	r1, [pc, #664]	; (800d51c <tcp_receive+0x2b4>)
 800d284:	48a6      	ldr	r0, [pc, #664]	; (800d520 <tcp_receive+0x2b8>)
 800d286:	f006 fe01 	bl	8013e8c <iprintf>

  if (flags & TCP_ACK) {
 800d28a:	4ba6      	ldr	r3, [pc, #664]	; (800d524 <tcp_receive+0x2bc>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	f003 0310 	and.w	r3, r3, #16
 800d292:	2b00      	cmp	r3, #0
 800d294:	f000 82bf 	beq.w	800d816 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d29e:	461a      	mov	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a4:	4413      	add	r3, r2
 800d2a6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ac:	4b9e      	ldr	r3, [pc, #632]	; (800d528 <tcp_receive+0x2c0>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	db1b      	blt.n	800d2ee <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ba:	4b9b      	ldr	r3, [pc, #620]	; (800d528 <tcp_receive+0x2c0>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d106      	bne.n	800d2d0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2c6:	4b99      	ldr	r3, [pc, #612]	; (800d52c <tcp_receive+0x2c4>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	db0e      	blt.n	800d2ee <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2d4:	4b95      	ldr	r3, [pc, #596]	; (800d52c <tcp_receive+0x2c4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d141      	bne.n	800d360 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d2dc:	4b94      	ldr	r3, [pc, #592]	; (800d530 <tcp_receive+0x2c8>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	89db      	ldrh	r3, [r3, #14]
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d938      	bls.n	800d360 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d2ee:	4b90      	ldr	r3, [pc, #576]	; (800d530 <tcp_receive+0x2c8>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	89db      	ldrh	r3, [r3, #14]
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d308:	429a      	cmp	r2, r3
 800d30a:	d205      	bcs.n	800d318 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800d318:	4b83      	ldr	r3, [pc, #524]	; (800d528 <tcp_receive+0x2c0>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800d320:	4b82      	ldr	r3, [pc, #520]	; (800d52c <tcp_receive+0x2c4>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10d      	bne.n	800d34e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d111      	bne.n	800d360 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d34c:	e008      	b.n	800d360 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d354:	2b00      	cmp	r3, #0
 800d356:	d003      	beq.n	800d360 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d360:	4b72      	ldr	r3, [pc, #456]	; (800d52c <tcp_receive+0x2c4>)
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d368:	1ad3      	subs	r3, r2, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	dc53      	bgt.n	800d416 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800d36e:	4b71      	ldr	r3, [pc, #452]	; (800d534 <tcp_receive+0x2cc>)
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d146      	bne.n	800d404 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d380:	4413      	add	r3, r2
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	429a      	cmp	r2, r3
 800d386:	d13d      	bne.n	800d404 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d38e:	2b00      	cmp	r3, #0
 800d390:	db38      	blt.n	800d404 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d396:	4b65      	ldr	r3, [pc, #404]	; (800d52c <tcp_receive+0x2c4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d132      	bne.n	800d404 <tcp_receive+0x19c>
              found_dupack = 1;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3a8:	2bff      	cmp	r3, #255	; 0xff
 800d3aa:	d007      	beq.n	800d3bc <tcp_receive+0x154>
                ++pcb->dupacks;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3c2:	2b03      	cmp	r3, #3
 800d3c4:	d916      	bls.n	800d3f4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d0:	4413      	add	r3, r2
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d912      	bls.n	800d404 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e8:	4413      	add	r3, r2
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d3f2:	e007      	b.n	800d404 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d102      	bne.n	800d404 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f002 fa2e 	bl	800f860 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f040 8169 	bne.w	800d6de <tcp_receive+0x476>
        pcb->dupacks = 0;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d414:	e163      	b.n	800d6de <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d416:	4b45      	ldr	r3, [pc, #276]	; (800d52c <tcp_receive+0x2c4>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	3b01      	subs	r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	f2c0 8107 	blt.w	800d636 <tcp_receive+0x3ce>
 800d428:	4b40      	ldr	r3, [pc, #256]	; (800d52c <tcp_receive+0x2c4>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	f300 80ff 	bgt.w	800d636 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7e9b      	ldrb	r3, [r3, #26]
 800d43c:	f003 0304 	and.w	r3, r3, #4
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00c      	beq.n	800d45e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7e9b      	ldrb	r3, [r3, #26]
 800d448:	f023 0304 	bic.w	r3, r3, #4
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d46c:	10db      	asrs	r3, r3, #3
 800d46e:	b21b      	sxth	r3, r3
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d478:	b29b      	uxth	r3, r3
 800d47a:	4413      	add	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	b21a      	sxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d48e:	4b27      	ldr	r3, [pc, #156]	; (800d52c <tcp_receive+0x2c4>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7d1b      	ldrb	r3, [r3, #20]
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	f240 8094 	bls.w	800d5c8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d216      	bcs.n	800d4de <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4ba:	4413      	add	r3, r2
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d97f      	bls.n	800d5c8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4d2:	4413      	add	r3, r2
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d4dc:	e074      	b.n	800d5c8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4ee:	fb03 f301 	mul.w	r3, r3, r1
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800d4f8:	fb93 f3f1 	sdiv	r3, r3, r1
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	4413      	add	r3, r2
 800d500:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d508:	8a7a      	ldrh	r2, [r7, #18]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d95c      	bls.n	800d5c8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8a7a      	ldrh	r2, [r7, #18]
 800d512:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800d516:	e057      	b.n	800d5c8 <tcp_receive+0x360>
 800d518:	08016608 	.word	0x08016608
 800d51c:	0801682c 	.word	0x0801682c
 800d520:	0801664c 	.word	0x0801664c
 800d524:	2000c60c 	.word	0x2000c60c
 800d528:	2000c600 	.word	0x2000c600
 800d52c:	2000c604 	.word	0x2000c604
 800d530:	2000c5f0 	.word	0x2000c5f0
 800d534:	2000c60a 	.word	0x2000c60a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	f7fc fed8 	bl	800a308 <pbuf_clen>
 800d558:	4603      	mov	r3, r0
 800d55a:	429c      	cmp	r4, r3
 800d55c:	d206      	bcs.n	800d56c <tcp_receive+0x304>
 800d55e:	4b70      	ldr	r3, [pc, #448]	; (800d720 <tcp_receive+0x4b8>)
 800d560:	f240 429e 	movw	r2, #1182	; 0x49e
 800d564:	496f      	ldr	r1, [pc, #444]	; (800d724 <tcp_receive+0x4bc>)
 800d566:	4870      	ldr	r0, [pc, #448]	; (800d728 <tcp_receive+0x4c0>)
 800d568:	f006 fc90 	bl	8013e8c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	4618      	mov	r0, r3
 800d572:	f7fc fec9 	bl	800a308 <pbuf_clen>
 800d576:	4603      	mov	r3, r0
 800d578:	461a      	mov	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d580:	1a9b      	subs	r3, r3, r2
 800d582:	b29a      	uxth	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	891a      	ldrh	r2, [r3, #8]
 800d58e:	4b67      	ldr	r3, [pc, #412]	; (800d72c <tcp_receive+0x4c4>)
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	4413      	add	r3, r2
 800d594:	b29a      	uxth	r2, r3
 800d596:	4b65      	ldr	r3, [pc, #404]	; (800d72c <tcp_receive+0x4c4>)
 800d598:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800d59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d59c:	f7fe f943 	bl	800b826 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00e      	beq.n	800d5c8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10a      	bne.n	800d5c8 <tcp_receive+0x360>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d106      	bne.n	800d5c8 <tcp_receive+0x360>
 800d5ba:	4b59      	ldr	r3, [pc, #356]	; (800d720 <tcp_receive+0x4b8>)
 800d5bc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800d5c0:	495b      	ldr	r1, [pc, #364]	; (800d730 <tcp_receive+0x4c8>)
 800d5c2:	4859      	ldr	r0, [pc, #356]	; (800d728 <tcp_receive+0x4c0>)
 800d5c4:	f006 fc62 	bl	8013e8c <iprintf>
      while (pcb->unacked != NULL &&
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d022      	beq.n	800d616 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fb fc6f 	bl	8008ebc <lwip_htonl>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e4:	891b      	ldrh	r3, [r3, #8]
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	899b      	ldrh	r3, [r3, #12]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fb fc54 	bl	8008ea0 <lwip_htons>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f003 0303 	and.w	r3, r3, #3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <tcp_receive+0x39e>
 800d602:	2301      	movs	r3, #1
 800d604:	e000      	b.n	800d608 <tcp_receive+0x3a0>
 800d606:	2300      	movs	r3, #0
 800d608:	442b      	add	r3, r5
 800d60a:	18e2      	adds	r2, r4, r3
 800d60c:	4b49      	ldr	r3, [pc, #292]	; (800d734 <tcp_receive+0x4cc>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800d612:	2b00      	cmp	r3, #0
 800d614:	dd90      	ble.n	800d538 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d104      	bne.n	800d628 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d624:	861a      	strh	r2, [r3, #48]	; 0x30
 800d626:	e002      	b.n	800d62e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	76da      	strb	r2, [r3, #27]
 800d634:	e002      	b.n	800d63c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f001 fd30 	bl	800f09c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800d63c:	e04f      	b.n	800d6de <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d642:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d652:	2b00      	cmp	r3, #0
 800d654:	d103      	bne.n	800d65e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fc fe4d 	bl	800a308 <pbuf_clen>
 800d66e:	4603      	mov	r3, r0
 800d670:	429c      	cmp	r4, r3
 800d672:	d206      	bcs.n	800d682 <tcp_receive+0x41a>
 800d674:	4b2a      	ldr	r3, [pc, #168]	; (800d720 <tcp_receive+0x4b8>)
 800d676:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d67a:	492a      	ldr	r1, [pc, #168]	; (800d724 <tcp_receive+0x4bc>)
 800d67c:	482a      	ldr	r0, [pc, #168]	; (800d728 <tcp_receive+0x4c0>)
 800d67e:	f006 fc05 	bl	8013e8c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	f7fc fe3e 	bl	800a308 <pbuf_clen>
 800d68c:	4603      	mov	r3, r0
 800d68e:	461a      	mov	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	b29a      	uxth	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	891a      	ldrh	r2, [r3, #8]
 800d6a4:	4b21      	ldr	r3, [pc, #132]	; (800d72c <tcp_receive+0x4c4>)
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <tcp_receive+0x4c4>)
 800d6ae:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800d6b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6b2:	f7fe f8b8 	bl	800b826 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d00e      	beq.n	800d6de <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10a      	bne.n	800d6de <tcp_receive+0x476>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d106      	bne.n	800d6de <tcp_receive+0x476>
 800d6d0:	4b13      	ldr	r3, [pc, #76]	; (800d720 <tcp_receive+0x4b8>)
 800d6d2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800d6d6:	4916      	ldr	r1, [pc, #88]	; (800d730 <tcp_receive+0x4c8>)
 800d6d8:	4813      	ldr	r0, [pc, #76]	; (800d728 <tcp_receive+0x4c0>)
 800d6da:	f006 fbd7 	bl	8013e8c <iprintf>
    while (pcb->unsent != NULL &&
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d036      	beq.n	800d754 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d6e6:	4b13      	ldr	r3, [pc, #76]	; (800d734 <tcp_receive+0x4cc>)
 800d6e8:	681c      	ldr	r4, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fb fbe2 	bl	8008ebc <lwip_htonl>
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6fe:	891b      	ldrh	r3, [r3, #8]
 800d700:	461e      	mov	r6, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	899b      	ldrh	r3, [r3, #12]
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fb fbc7 	bl	8008ea0 <lwip_htons>
 800d712:	4603      	mov	r3, r0
 800d714:	f003 0303 	and.w	r3, r3, #3
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00d      	beq.n	800d738 <tcp_receive+0x4d0>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e00c      	b.n	800d73a <tcp_receive+0x4d2>
 800d720:	08016608 	.word	0x08016608
 800d724:	08016848 	.word	0x08016848
 800d728:	0801664c 	.word	0x0801664c
 800d72c:	2000c608 	.word	0x2000c608
 800d730:	08016870 	.word	0x08016870
 800d734:	2000c604 	.word	0x2000c604
 800d738:	2300      	movs	r3, #0
 800d73a:	4433      	add	r3, r6
 800d73c:	442b      	add	r3, r5
 800d73e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800d740:	2b00      	cmp	r3, #0
 800d742:	db07      	blt.n	800d754 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d744:	4b8d      	ldr	r3, [pc, #564]	; (800d97c <tcp_receive+0x714>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f77f af75 	ble.w	800d63e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d75a:	4b89      	ldr	r3, [pc, #548]	; (800d980 <tcp_receive+0x718>)
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	4413      	add	r3, r2
 800d760:	b29a      	uxth	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d052      	beq.n	800d816 <tcp_receive+0x5ae>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d774:	4b81      	ldr	r3, [pc, #516]	; (800d97c <tcp_receive+0x714>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	da4b      	bge.n	800d816 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d77e:	4b81      	ldr	r3, [pc, #516]	; (800d984 <tcp_receive+0x71c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	b29a      	uxth	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d788:	b29b      	uxth	r3, r3
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800d790:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d798:	10db      	asrs	r3, r3, #3
 800d79a:	b21b      	sxth	r3, r3
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ae:	4413      	add	r3, r2
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	b21a      	sxth	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d7b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	da03      	bge.n	800d7c8 <tcp_receive+0x560>
        m = -m;
 800d7c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7c2:	425b      	negs	r3, r3
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800d7c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7d0:	109b      	asrs	r3, r3, #2
 800d7d2:	b21b      	sxth	r3, r3
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7e6:	4413      	add	r3, r2
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	b21a      	sxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d7f6:	10db      	asrs	r3, r3, #3
 800d7f8:	b21b      	sxth	r3, r3
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d802:	b29b      	uxth	r3, r3
 800d804:	4413      	add	r3, r2
 800d806:	b29b      	uxth	r3, r3
 800d808:	b21a      	sxth	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d816:	4b5c      	ldr	r3, [pc, #368]	; (800d988 <tcp_receive+0x720>)
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 84f1 	beq.w	800e202 <tcp_receive+0xf9a>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	7d1b      	ldrb	r3, [r3, #20]
 800d824:	2b06      	cmp	r3, #6
 800d826:	f200 84ec 	bhi.w	800e202 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d82e:	4b57      	ldr	r3, [pc, #348]	; (800d98c <tcp_receive+0x724>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	3b01      	subs	r3, #1
 800d836:	2b00      	cmp	r3, #0
 800d838:	f2c0 80b8 	blt.w	800d9ac <tcp_receive+0x744>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d840:	4b51      	ldr	r3, [pc, #324]	; (800d988 <tcp_receive+0x720>)
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	4619      	mov	r1, r3
 800d846:	4b51      	ldr	r3, [pc, #324]	; (800d98c <tcp_receive+0x724>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	440b      	add	r3, r1
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	3301      	adds	r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	f300 80ab 	bgt.w	800d9ac <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d856:	4b4e      	ldr	r3, [pc, #312]	; (800d990 <tcp_receive+0x728>)
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d860:	4b4a      	ldr	r3, [pc, #296]	; (800d98c <tcp_receive+0x724>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d868:	4b49      	ldr	r3, [pc, #292]	; (800d990 <tcp_receive+0x728>)
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d106      	bne.n	800d87e <tcp_receive+0x616>
 800d870:	4b48      	ldr	r3, [pc, #288]	; (800d994 <tcp_receive+0x72c>)
 800d872:	f240 523c 	movw	r2, #1340	; 0x53c
 800d876:	4948      	ldr	r1, [pc, #288]	; (800d998 <tcp_receive+0x730>)
 800d878:	4848      	ldr	r0, [pc, #288]	; (800d99c <tcp_receive+0x734>)
 800d87a:	f006 fb07 	bl	8013e8c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d884:	4293      	cmp	r3, r2
 800d886:	dd06      	ble.n	800d896 <tcp_receive+0x62e>
 800d888:	4b42      	ldr	r3, [pc, #264]	; (800d994 <tcp_receive+0x72c>)
 800d88a:	f240 523d 	movw	r2, #1341	; 0x53d
 800d88e:	4944      	ldr	r1, [pc, #272]	; (800d9a0 <tcp_receive+0x738>)
 800d890:	4842      	ldr	r0, [pc, #264]	; (800d99c <tcp_receive+0x734>)
 800d892:	f006 fafb 	bl	8013e8c <iprintf>
      if (inseg.p->len < off) {
 800d896:	4b3e      	ldr	r3, [pc, #248]	; (800d990 <tcp_receive+0x728>)
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	895b      	ldrh	r3, [r3, #10]
 800d89c:	461a      	mov	r2, r3
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	dd3e      	ble.n	800d922 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d8a4:	4b3a      	ldr	r3, [pc, #232]	; (800d990 <tcp_receive+0x728>)
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	891b      	ldrh	r3, [r3, #8]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	dd06      	ble.n	800d8c0 <tcp_receive+0x658>
 800d8b2:	4b38      	ldr	r3, [pc, #224]	; (800d994 <tcp_receive+0x72c>)
 800d8b4:	f240 523f 	movw	r2, #1343	; 0x53f
 800d8b8:	493a      	ldr	r1, [pc, #232]	; (800d9a4 <tcp_receive+0x73c>)
 800d8ba:	4838      	ldr	r0, [pc, #224]	; (800d99c <tcp_receive+0x734>)
 800d8bc:	f006 fae6 	bl	8013e8c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d8c0:	4b33      	ldr	r3, [pc, #204]	; (800d990 <tcp_receive+0x728>)
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	891a      	ldrh	r2, [r3, #8]
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800d8ce:	e00e      	b.n	800d8ee <tcp_receive+0x686>
          off -= p->len;
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	895b      	ldrh	r3, [r3, #10]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	1a9b      	subs	r3, r3, r2
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	8a3a      	ldrh	r2, [r7, #16]
 800d8e0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	895b      	ldrh	r3, [r3, #10]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	dcea      	bgt.n	800d8d0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	425b      	negs	r3, r3
 800d900:	b29b      	uxth	r3, r3
 800d902:	b21b      	sxth	r3, r3
 800d904:	4619      	mov	r1, r3
 800d906:	69b8      	ldr	r0, [r7, #24]
 800d908:	f7fc fc40 	bl	800a18c <pbuf_header>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d01c      	beq.n	800d94c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d912:	4b20      	ldr	r3, [pc, #128]	; (800d994 <tcp_receive+0x72c>)
 800d914:	f240 524c 	movw	r2, #1356	; 0x54c
 800d918:	4923      	ldr	r1, [pc, #140]	; (800d9a8 <tcp_receive+0x740>)
 800d91a:	4820      	ldr	r0, [pc, #128]	; (800d99c <tcp_receive+0x734>)
 800d91c:	f006 fab6 	bl	8013e8c <iprintf>
 800d920:	e014      	b.n	800d94c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800d922:	4b1b      	ldr	r3, [pc, #108]	; (800d990 <tcp_receive+0x728>)
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d928:	b292      	uxth	r2, r2
 800d92a:	4252      	negs	r2, r2
 800d92c:	b292      	uxth	r2, r2
 800d92e:	b212      	sxth	r2, r2
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f7fc fc2a 	bl	800a18c <pbuf_header>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <tcp_receive+0x72c>)
 800d940:	f240 5251 	movw	r2, #1361	; 0x551
 800d944:	4918      	ldr	r1, [pc, #96]	; (800d9a8 <tcp_receive+0x740>)
 800d946:	4815      	ldr	r0, [pc, #84]	; (800d99c <tcp_receive+0x734>)
 800d948:	f006 faa0 	bl	8013e8c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800d94c:	4b10      	ldr	r3, [pc, #64]	; (800d990 <tcp_receive+0x728>)
 800d94e:	891a      	ldrh	r2, [r3, #8]
 800d950:	4b0e      	ldr	r3, [pc, #56]	; (800d98c <tcp_receive+0x724>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	b299      	uxth	r1, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	1acb      	subs	r3, r1, r3
 800d95e:	b29b      	uxth	r3, r3
 800d960:	4413      	add	r3, r2
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b0a      	ldr	r3, [pc, #40]	; (800d990 <tcp_receive+0x728>)
 800d966:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	4a07      	ldr	r2, [pc, #28]	; (800d98c <tcp_receive+0x724>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	4b07      	ldr	r3, [pc, #28]	; (800d990 <tcp_receive+0x728>)
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	4a05      	ldr	r2, [pc, #20]	; (800d98c <tcp_receive+0x724>)
 800d976:	6812      	ldr	r2, [r2, #0]
 800d978:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d97a:	e025      	b.n	800d9c8 <tcp_receive+0x760>
 800d97c:	2000c604 	.word	0x2000c604
 800d980:	2000c608 	.word	0x2000c608
 800d984:	20010550 	.word	0x20010550
 800d988:	2000c60a 	.word	0x2000c60a
 800d98c:	2000c600 	.word	0x2000c600
 800d990:	2000c5e0 	.word	0x2000c5e0
 800d994:	08016608 	.word	0x08016608
 800d998:	08016890 	.word	0x08016890
 800d99c:	0801664c 	.word	0x0801664c
 800d9a0:	080168a0 	.word	0x080168a0
 800d9a4:	080168b0 	.word	0x080168b0
 800d9a8:	080168c0 	.word	0x080168c0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d9ac:	4b87      	ldr	r3, [pc, #540]	; (800dbcc <tcp_receive+0x964>)
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	da06      	bge.n	800d9c8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7e9b      	ldrb	r3, [r3, #26]
 800d9be:	f043 0302 	orr.w	r3, r3, #2
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d9c8:	4b80      	ldr	r3, [pc, #512]	; (800dbcc <tcp_receive+0x964>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f2c0 8410 	blt.w	800e1f8 <tcp_receive+0xf90>
 800d9d8:	4b7c      	ldr	r3, [pc, #496]	; (800dbcc <tcp_receive+0x964>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9e4:	440b      	add	r3, r1
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f300 8404 	bgt.w	800e1f8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9f4:	4b75      	ldr	r3, [pc, #468]	; (800dbcc <tcp_receive+0x964>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	f040 8287 	bne.w	800df0c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d9fe:	4b74      	ldr	r3, [pc, #464]	; (800dbd0 <tcp_receive+0x968>)
 800da00:	891c      	ldrh	r4, [r3, #8]
 800da02:	4b73      	ldr	r3, [pc, #460]	; (800dbd0 <tcp_receive+0x968>)
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fb fa48 	bl	8008ea0 <lwip_htons>
 800da10:	4603      	mov	r3, r0
 800da12:	f003 0303 	and.w	r3, r3, #3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <tcp_receive+0x7b6>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e000      	b.n	800da20 <tcp_receive+0x7b8>
 800da1e:	2300      	movs	r3, #0
 800da20:	4423      	add	r3, r4
 800da22:	b29a      	uxth	r2, r3
 800da24:	4b6b      	ldr	r3, [pc, #428]	; (800dbd4 <tcp_receive+0x96c>)
 800da26:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da2c:	4b69      	ldr	r3, [pc, #420]	; (800dbd4 <tcp_receive+0x96c>)
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	429a      	cmp	r2, r3
 800da32:	d26e      	bcs.n	800db12 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da34:	4b66      	ldr	r3, [pc, #408]	; (800dbd0 <tcp_receive+0x968>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	899b      	ldrh	r3, [r3, #12]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fb fa2f 	bl	8008ea0 <lwip_htons>
 800da42:	4603      	mov	r3, r0
 800da44:	f003 0301 	and.w	r3, r3, #1
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d01b      	beq.n	800da84 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800da4c:	4b60      	ldr	r3, [pc, #384]	; (800dbd0 <tcp_receive+0x968>)
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	b29b      	uxth	r3, r3
 800da54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800da58:	b29c      	uxth	r4, r3
 800da5a:	4b5d      	ldr	r3, [pc, #372]	; (800dbd0 <tcp_receive+0x968>)
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	899b      	ldrh	r3, [r3, #12]
 800da60:	b29b      	uxth	r3, r3
 800da62:	4618      	mov	r0, r3
 800da64:	f7fb fa1c 	bl	8008ea0 <lwip_htons>
 800da68:	4603      	mov	r3, r0
 800da6a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800da6e:	b29b      	uxth	r3, r3
 800da70:	4618      	mov	r0, r3
 800da72:	f7fb fa15 	bl	8008ea0 <lwip_htons>
 800da76:	4603      	mov	r3, r0
 800da78:	461a      	mov	r2, r3
 800da7a:	4b55      	ldr	r3, [pc, #340]	; (800dbd0 <tcp_receive+0x968>)
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	4322      	orrs	r2, r4
 800da80:	b292      	uxth	r2, r2
 800da82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da88:	4b51      	ldr	r3, [pc, #324]	; (800dbd0 <tcp_receive+0x968>)
 800da8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800da8c:	4b50      	ldr	r3, [pc, #320]	; (800dbd0 <tcp_receive+0x968>)
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	899b      	ldrh	r3, [r3, #12]
 800da92:	b29b      	uxth	r3, r3
 800da94:	4618      	mov	r0, r3
 800da96:	f7fb fa03 	bl	8008ea0 <lwip_htons>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d005      	beq.n	800dab0 <tcp_receive+0x848>
            inseg.len -= 1;
 800daa4:	4b4a      	ldr	r3, [pc, #296]	; (800dbd0 <tcp_receive+0x968>)
 800daa6:	891b      	ldrh	r3, [r3, #8]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	b29a      	uxth	r2, r3
 800daac:	4b48      	ldr	r3, [pc, #288]	; (800dbd0 <tcp_receive+0x968>)
 800daae:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dab0:	4b47      	ldr	r3, [pc, #284]	; (800dbd0 <tcp_receive+0x968>)
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	4b46      	ldr	r3, [pc, #280]	; (800dbd0 <tcp_receive+0x968>)
 800dab6:	891b      	ldrh	r3, [r3, #8]
 800dab8:	4619      	mov	r1, r3
 800daba:	4610      	mov	r0, r2
 800dabc:	f7fc fa16 	bl	8009eec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dac0:	4b43      	ldr	r3, [pc, #268]	; (800dbd0 <tcp_receive+0x968>)
 800dac2:	891c      	ldrh	r4, [r3, #8]
 800dac4:	4b42      	ldr	r3, [pc, #264]	; (800dbd0 <tcp_receive+0x968>)
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fb f9e7 	bl	8008ea0 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <tcp_receive+0x878>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <tcp_receive+0x87a>
 800dae0:	2300      	movs	r3, #0
 800dae2:	4423      	add	r3, r4
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	4b3b      	ldr	r3, [pc, #236]	; (800dbd4 <tcp_receive+0x96c>)
 800dae8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800daea:	4b3a      	ldr	r3, [pc, #232]	; (800dbd4 <tcp_receive+0x96c>)
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	4b36      	ldr	r3, [pc, #216]	; (800dbcc <tcp_receive+0x964>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	441a      	add	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dafe:	440b      	add	r3, r1
 800db00:	429a      	cmp	r2, r3
 800db02:	d006      	beq.n	800db12 <tcp_receive+0x8aa>
 800db04:	4b34      	ldr	r3, [pc, #208]	; (800dbd8 <tcp_receive+0x970>)
 800db06:	f240 527f 	movw	r2, #1407	; 0x57f
 800db0a:	4934      	ldr	r1, [pc, #208]	; (800dbdc <tcp_receive+0x974>)
 800db0c:	4834      	ldr	r0, [pc, #208]	; (800dbe0 <tcp_receive+0x978>)
 800db0e:	f006 f9bd 	bl	8013e8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80e1 	beq.w	800dcde <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800db1c:	4b2c      	ldr	r3, [pc, #176]	; (800dbd0 <tcp_receive+0x968>)
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	899b      	ldrh	r3, [r3, #12]
 800db22:	b29b      	uxth	r3, r3
 800db24:	4618      	mov	r0, r3
 800db26:	f7fb f9bb 	bl	8008ea0 <lwip_htons>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	2b00      	cmp	r3, #0
 800db32:	d010      	beq.n	800db56 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800db34:	e00a      	b.n	800db4c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800db46:	68b8      	ldr	r0, [r7, #8]
 800db48:	f7fd fe6d 	bl	800b826 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1f0      	bne.n	800db36 <tcp_receive+0x8ce>
 800db54:	e0c3      	b.n	800dcde <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800db5c:	e04f      	b.n	800dbfe <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800db5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	899b      	ldrh	r3, [r3, #12]
 800db64:	b29b      	uxth	r3, r3
 800db66:	4618      	mov	r0, r3
 800db68:	f7fb f99a 	bl	8008ea0 <lwip_htons>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d03b      	beq.n	800dbee <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800db76:	4b16      	ldr	r3, [pc, #88]	; (800dbd0 <tcp_receive+0x968>)
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	899b      	ldrh	r3, [r3, #12]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fb f98e 	bl	8008ea0 <lwip_htons>
 800db84:	4603      	mov	r3, r0
 800db86:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d12f      	bne.n	800dbee <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800db8e:	4b10      	ldr	r3, [pc, #64]	; (800dbd0 <tcp_receive+0x968>)
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	899b      	ldrh	r3, [r3, #12]
 800db94:	b29c      	uxth	r4, r3
 800db96:	2001      	movs	r0, #1
 800db98:	f7fb f982 	bl	8008ea0 <lwip_htons>
 800db9c:	4603      	mov	r3, r0
 800db9e:	461a      	mov	r2, r3
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <tcp_receive+0x968>)
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	4322      	orrs	r2, r4
 800dba6:	b292      	uxth	r2, r2
 800dba8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dbaa:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <tcp_receive+0x968>)
 800dbac:	891c      	ldrh	r4, [r3, #8]
 800dbae:	4b08      	ldr	r3, [pc, #32]	; (800dbd0 <tcp_receive+0x968>)
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	899b      	ldrh	r3, [r3, #12]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fb f972 	bl	8008ea0 <lwip_htons>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	f003 0303 	and.w	r3, r3, #3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00e      	beq.n	800dbe4 <tcp_receive+0x97c>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e00d      	b.n	800dbe6 <tcp_receive+0x97e>
 800dbca:	bf00      	nop
 800dbcc:	2000c600 	.word	0x2000c600
 800dbd0:	2000c5e0 	.word	0x2000c5e0
 800dbd4:	2000c60a 	.word	0x2000c60a
 800dbd8:	08016608 	.word	0x08016608
 800dbdc:	080168d4 	.word	0x080168d4
 800dbe0:	0801664c 	.word	0x0801664c
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4423      	add	r3, r4
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	4b95      	ldr	r3, [pc, #596]	; (800de40 <tcp_receive+0xbd8>)
 800dbec:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800dbf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbfa:	f7fd fe14 	bl	800b826 <tcp_seg_free>
            while (next &&
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00e      	beq.n	800dc22 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dc04:	4b8e      	ldr	r3, [pc, #568]	; (800de40 <tcp_receive+0xbd8>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4b8e      	ldr	r3, [pc, #568]	; (800de44 <tcp_receive+0xbdc>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	441a      	add	r2, r3
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc18:	8909      	ldrh	r1, [r1, #8]
 800dc1a:	440b      	add	r3, r1
 800dc1c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	da9d      	bge.n	800db5e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d057      	beq.n	800dcd8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800dc28:	4b85      	ldr	r3, [pc, #532]	; (800de40 <tcp_receive+0xbd8>)
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	4b85      	ldr	r3, [pc, #532]	; (800de44 <tcp_receive+0xbdc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	441a      	add	r2, r3
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	dd4b      	ble.n	800dcd8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	4b7e      	ldr	r3, [pc, #504]	; (800de44 <tcp_receive+0xbdc>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	4b7d      	ldr	r3, [pc, #500]	; (800de48 <tcp_receive+0xbe0>)
 800dc54:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dc56:	4b7c      	ldr	r3, [pc, #496]	; (800de48 <tcp_receive+0xbe0>)
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	899b      	ldrh	r3, [r3, #12]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fb f91e 	bl	8008ea0 <lwip_htons>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <tcp_receive+0xa12>
                inseg.len -= 1;
 800dc6e:	4b76      	ldr	r3, [pc, #472]	; (800de48 <tcp_receive+0xbe0>)
 800dc70:	891b      	ldrh	r3, [r3, #8]
 800dc72:	3b01      	subs	r3, #1
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	4b74      	ldr	r3, [pc, #464]	; (800de48 <tcp_receive+0xbe0>)
 800dc78:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dc7a:	4b73      	ldr	r3, [pc, #460]	; (800de48 <tcp_receive+0xbe0>)
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	4b72      	ldr	r3, [pc, #456]	; (800de48 <tcp_receive+0xbe0>)
 800dc80:	891b      	ldrh	r3, [r3, #8]
 800dc82:	4619      	mov	r1, r3
 800dc84:	4610      	mov	r0, r2
 800dc86:	f7fc f931 	bl	8009eec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dc8a:	4b6f      	ldr	r3, [pc, #444]	; (800de48 <tcp_receive+0xbe0>)
 800dc8c:	891c      	ldrh	r4, [r3, #8]
 800dc8e:	4b6e      	ldr	r3, [pc, #440]	; (800de48 <tcp_receive+0xbe0>)
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	899b      	ldrh	r3, [r3, #12]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fb f902 	bl	8008ea0 <lwip_htons>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f003 0303 	and.w	r3, r3, #3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <tcp_receive+0xa42>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e000      	b.n	800dcac <tcp_receive+0xa44>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	4423      	add	r3, r4
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	4b63      	ldr	r3, [pc, #396]	; (800de40 <tcp_receive+0xbd8>)
 800dcb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dcb4:	4b62      	ldr	r3, [pc, #392]	; (800de40 <tcp_receive+0xbd8>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	4b62      	ldr	r3, [pc, #392]	; (800de44 <tcp_receive+0xbdc>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	441a      	add	r2, r3
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d006      	beq.n	800dcd8 <tcp_receive+0xa70>
 800dcca:	4b60      	ldr	r3, [pc, #384]	; (800de4c <tcp_receive+0xbe4>)
 800dccc:	f240 52af 	movw	r2, #1455	; 0x5af
 800dcd0:	495f      	ldr	r1, [pc, #380]	; (800de50 <tcp_receive+0xbe8>)
 800dcd2:	4860      	ldr	r0, [pc, #384]	; (800de54 <tcp_receive+0xbec>)
 800dcd4:	f006 f8da 	bl	8013e8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcdc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dcde:	4b58      	ldr	r3, [pc, #352]	; (800de40 <tcp_receive+0xbd8>)
 800dce0:	881b      	ldrh	r3, [r3, #0]
 800dce2:	461a      	mov	r2, r3
 800dce4:	4b57      	ldr	r3, [pc, #348]	; (800de44 <tcp_receive+0xbdc>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	441a      	add	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dcf2:	4b53      	ldr	r3, [pc, #332]	; (800de40 <tcp_receive+0xbd8>)
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d206      	bcs.n	800dd08 <tcp_receive+0xaa0>
 800dcfa:	4b54      	ldr	r3, [pc, #336]	; (800de4c <tcp_receive+0xbe4>)
 800dcfc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dd00:	4955      	ldr	r1, [pc, #340]	; (800de58 <tcp_receive+0xbf0>)
 800dd02:	4854      	ldr	r0, [pc, #336]	; (800de54 <tcp_receive+0xbec>)
 800dd04:	f006 f8c2 	bl	8013e8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd0c:	4b4c      	ldr	r3, [pc, #304]	; (800de40 <tcp_receive+0xbd8>)
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7fd f8f7 	bl	800af0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dd1e:	4b4a      	ldr	r3, [pc, #296]	; (800de48 <tcp_receive+0xbe0>)
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	891b      	ldrh	r3, [r3, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d006      	beq.n	800dd36 <tcp_receive+0xace>
          recv_data = inseg.p;
 800dd28:	4b47      	ldr	r3, [pc, #284]	; (800de48 <tcp_receive+0xbe0>)
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	4a4b      	ldr	r2, [pc, #300]	; (800de5c <tcp_receive+0xbf4>)
 800dd2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dd30:	4b45      	ldr	r3, [pc, #276]	; (800de48 <tcp_receive+0xbe0>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd36:	4b44      	ldr	r3, [pc, #272]	; (800de48 <tcp_receive+0xbe0>)
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	899b      	ldrh	r3, [r3, #12]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fb f8ae 	bl	8008ea0 <lwip_htons>
 800dd44:	4603      	mov	r3, r0
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 80b4 	beq.w	800deb8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dd50:	4b43      	ldr	r3, [pc, #268]	; (800de60 <tcp_receive+0xbf8>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	4b41      	ldr	r3, [pc, #260]	; (800de60 <tcp_receive+0xbf8>)
 800dd5c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dd5e:	e0ab      	b.n	800deb8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd64:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	4a35      	ldr	r2, [pc, #212]	; (800de44 <tcp_receive+0xbdc>)
 800dd70:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	891b      	ldrh	r3, [r3, #8]
 800dd76:	461c      	mov	r4, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	899b      	ldrh	r3, [r3, #12]
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fb f88d 	bl	8008ea0 <lwip_htons>
 800dd86:	4603      	mov	r3, r0
 800dd88:	f003 0303 	and.w	r3, r3, #3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <tcp_receive+0xb2c>
 800dd90:	2301      	movs	r3, #1
 800dd92:	e000      	b.n	800dd96 <tcp_receive+0xb2e>
 800dd94:	2300      	movs	r3, #0
 800dd96:	191a      	adds	r2, r3, r4
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	441a      	add	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda6:	461c      	mov	r4, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	891b      	ldrh	r3, [r3, #8]
 800ddac:	461d      	mov	r5, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	899b      	ldrh	r3, [r3, #12]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fb f872 	bl	8008ea0 <lwip_htons>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	f003 0303 	and.w	r3, r3, #3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d001      	beq.n	800ddca <tcp_receive+0xb62>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e000      	b.n	800ddcc <tcp_receive+0xb64>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	442b      	add	r3, r5
 800ddce:	429c      	cmp	r4, r3
 800ddd0:	d206      	bcs.n	800dde0 <tcp_receive+0xb78>
 800ddd2:	4b1e      	ldr	r3, [pc, #120]	; (800de4c <tcp_receive+0xbe4>)
 800ddd4:	f240 52de 	movw	r2, #1502	; 0x5de
 800ddd8:	4922      	ldr	r1, [pc, #136]	; (800de64 <tcp_receive+0xbfc>)
 800ddda:	481e      	ldr	r0, [pc, #120]	; (800de54 <tcp_receive+0xbec>)
 800dddc:	f006 f856 	bl	8013e8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	891b      	ldrh	r3, [r3, #8]
 800dde4:	461c      	mov	r4, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	899b      	ldrh	r3, [r3, #12]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fb f856 	bl	8008ea0 <lwip_htons>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	f003 0303 	and.w	r3, r3, #3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <tcp_receive+0xb9a>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e000      	b.n	800de04 <tcp_receive+0xb9c>
 800de02:	2300      	movs	r3, #0
 800de04:	1919      	adds	r1, r3, r4
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de0a:	b28b      	uxth	r3, r1
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7fd f879 	bl	800af0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	891b      	ldrh	r3, [r3, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d028      	beq.n	800de76 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800de24:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <tcp_receive+0xbf4>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01d      	beq.n	800de68 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800de2c:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <tcp_receive+0xbf4>)
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	4619      	mov	r1, r3
 800de36:	4610      	mov	r0, r2
 800de38:	f7fc faa6 	bl	800a388 <pbuf_cat>
 800de3c:	e018      	b.n	800de70 <tcp_receive+0xc08>
 800de3e:	bf00      	nop
 800de40:	2000c60a 	.word	0x2000c60a
 800de44:	2000c600 	.word	0x2000c600
 800de48:	2000c5e0 	.word	0x2000c5e0
 800de4c:	08016608 	.word	0x08016608
 800de50:	0801690c 	.word	0x0801690c
 800de54:	0801664c 	.word	0x0801664c
 800de58:	08016948 	.word	0x08016948
 800de5c:	2000c610 	.word	0x2000c610
 800de60:	2000c60d 	.word	0x2000c60d
 800de64:	08016968 	.word	0x08016968
            } else {
              recv_data = cseg->p;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	4a71      	ldr	r2, [pc, #452]	; (800e034 <tcp_receive+0xdcc>)
 800de6e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2200      	movs	r2, #0
 800de74:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	899b      	ldrh	r3, [r3, #12]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fb f80e 	bl	8008ea0 <lwip_htons>
 800de84:	4603      	mov	r3, r0
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00d      	beq.n	800deaa <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800de8e:	4b6a      	ldr	r3, [pc, #424]	; (800e038 <tcp_receive+0xdd0>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	f043 0320 	orr.w	r3, r3, #32
 800de96:	b2da      	uxtb	r2, r3
 800de98:	4b67      	ldr	r3, [pc, #412]	; (800e038 <tcp_receive+0xdd0>)
 800de9a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7d1b      	ldrb	r3, [r3, #20]
 800dea0:	2b04      	cmp	r3, #4
 800dea2:	d102      	bne.n	800deaa <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2207      	movs	r2, #7
 800dea8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7fd fcb7 	bl	800b826 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800debc:	2b00      	cmp	r3, #0
 800debe:	d008      	beq.n	800ded2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800decc:	429a      	cmp	r2, r3
 800dece:	f43f af47 	beq.w	800dd60 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	7e9b      	ldrb	r3, [r3, #26]
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00e      	beq.n	800defc <tcp_receive+0xc94>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	7e9b      	ldrb	r3, [r3, #26]
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	769a      	strb	r2, [r3, #26]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	7e9b      	ldrb	r3, [r3, #26]
 800def0:	f043 0302 	orr.w	r3, r3, #2
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800defa:	e181      	b.n	800e200 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	7e9b      	ldrb	r3, [r3, #26]
 800df00:	f043 0301 	orr.w	r3, r3, #1
 800df04:	b2da      	uxtb	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800df0a:	e179      	b.n	800e200 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 f8c5 	bl	800f09c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800df1a:	4848      	ldr	r0, [pc, #288]	; (800e03c <tcp_receive+0xdd4>)
 800df1c:	f7fd fc9b 	bl	800b856 <tcp_seg_copy>
 800df20:	4602      	mov	r2, r0
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800df26:	e16b      	b.n	800e200 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800df28:	2300      	movs	r3, #0
 800df2a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df32:	e150      	b.n	800e1d6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	4b41      	ldr	r3, [pc, #260]	; (800e040 <tcp_receive+0xdd8>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d11d      	bne.n	800df7e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800df42:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <tcp_receive+0xdd4>)
 800df44:	891a      	ldrh	r2, [r3, #8]
 800df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df48:	891b      	ldrh	r3, [r3, #8]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	f240 8148 	bls.w	800e1e0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800df50:	483a      	ldr	r0, [pc, #232]	; (800e03c <tcp_receive+0xdd4>)
 800df52:	f7fd fc80 	bl	800b856 <tcp_seg_copy>
 800df56:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 8142 	beq.w	800e1e4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d003      	beq.n	800df6e <tcp_receive+0xd06>
                    prev->next = cseg;
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	e002      	b.n	800df74 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	68fa      	ldr	r2, [r7, #12]
 800df72:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800df74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7ff f900 	bl	800d17c <tcp_oos_insert_segment>
                }
                break;
 800df7c:	e132      	b.n	800e1e4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800df7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df80:	2b00      	cmp	r3, #0
 800df82:	d117      	bne.n	800dfb4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800df84:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <tcp_receive+0xdd8>)
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	da57      	bge.n	800e044 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800df94:	4829      	ldr	r0, [pc, #164]	; (800e03c <tcp_receive+0xdd4>)
 800df96:	f7fd fc5e 	bl	800b856 <tcp_seg_copy>
 800df9a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 8122 	beq.w	800e1e8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800dfaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7ff f8e5 	bl	800d17c <tcp_oos_insert_segment>
                  }
                  break;
 800dfb2:	e119      	b.n	800e1e8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800dfb4:	4b22      	ldr	r3, [pc, #136]	; (800e040 <tcp_receive+0xdd8>)
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	db3e      	blt.n	800e044 <tcp_receive+0xddc>
 800dfc6:	4b1e      	ldr	r3, [pc, #120]	; (800e040 <tcp_receive+0xdd8>)
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	dc35      	bgt.n	800e044 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800dfd8:	4818      	ldr	r0, [pc, #96]	; (800e03c <tcp_receive+0xdd4>)
 800dfda:	f7fd fc3c 	bl	800b856 <tcp_seg_copy>
 800dfde:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f000 8102 	beq.w	800e1ec <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff0:	8912      	ldrh	r2, [r2, #8]
 800dff2:	441a      	add	r2, r3
 800dff4:	4b12      	ldr	r3, [pc, #72]	; (800e040 <tcp_receive+0xdd8>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	dd12      	ble.n	800e024 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dffe:	4b10      	ldr	r3, [pc, #64]	; (800e040 <tcp_receive+0xdd8>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	b29a      	uxth	r2, r3
 800e004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	b29a      	uxth	r2, r3
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	891b      	ldrh	r3, [r3, #8]
 800e01c:	4619      	mov	r1, r3
 800e01e:	4610      	mov	r0, r2
 800e020:	f7fb ff64 	bl	8009eec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff f8a5 	bl	800d17c <tcp_oos_insert_segment>
                  }
                  break;
 800e032:	e0db      	b.n	800e1ec <tcp_receive+0xf84>
 800e034:	2000c610 	.word	0x2000c610
 800e038:	2000c60d 	.word	0x2000c60d
 800e03c:	2000c5e0 	.word	0x2000c5e0
 800e040:	2000c600 	.word	0x2000c600
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f040 80bf 	bne.w	800e1cc <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e04e:	4b7c      	ldr	r3, [pc, #496]	; (800e240 <tcp_receive+0xfd8>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f340 80b6 	ble.w	800e1cc <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	899b      	ldrh	r3, [r3, #12]
 800e066:	b29b      	uxth	r3, r3
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fa ff19 	bl	8008ea0 <lwip_htons>
 800e06e:	4603      	mov	r3, r0
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	f040 80bb 	bne.w	800e1f0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e07a:	4872      	ldr	r0, [pc, #456]	; (800e244 <tcp_receive+0xfdc>)
 800e07c:	f7fd fbeb 	bl	800b856 <tcp_seg_copy>
 800e080:	4602      	mov	r2, r0
 800e082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e084:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 80b2 	beq.w	800e1f4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e098:	8912      	ldrh	r2, [r2, #8]
 800e09a:	441a      	add	r2, r3
 800e09c:	4b68      	ldr	r3, [pc, #416]	; (800e240 <tcp_receive+0xfd8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd12      	ble.n	800e0cc <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e0a6:	4b66      	ldr	r3, [pc, #408]	; (800e240 <tcp_receive+0xfd8>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	891b      	ldrh	r3, [r3, #8]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f7fb ff10 	bl	8009eec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e0cc:	4b5e      	ldr	r3, [pc, #376]	; (800e248 <tcp_receive+0xfe0>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b5b      	ldr	r3, [pc, #364]	; (800e240 <tcp_receive+0xfd8>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	441a      	add	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	6879      	ldr	r1, [r7, #4]
 800e0de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e0e0:	440b      	add	r3, r1
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f340 8085 	ble.w	800e1f4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	899b      	ldrh	r3, [r3, #12]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fa fed3 	bl	8008ea0 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01e      	beq.n	800e142 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	899b      	ldrh	r3, [r3, #12]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e112:	b29c      	uxth	r4, r3
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	899b      	ldrh	r3, [r3, #12]
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fa febe 	bl	8008ea0 <lwip_htons>
 800e124:	4603      	mov	r3, r0
 800e126:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fa feb7 	bl	8008ea0 <lwip_htons>
 800e132:	4603      	mov	r3, r0
 800e134:	461a      	mov	r2, r3
 800e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	4322      	orrs	r2, r4
 800e13e:	b292      	uxth	r2, r2
 800e140:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e146:	b29a      	uxth	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e14c:	4413      	add	r3, r2
 800e14e:	b299      	uxth	r1, r3
 800e150:	4b3b      	ldr	r3, [pc, #236]	; (800e240 <tcp_receive+0xfd8>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	b29a      	uxth	r2, r3
 800e156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	1a8a      	subs	r2, r1, r2
 800e15c:	b292      	uxth	r2, r2
 800e15e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	891b      	ldrh	r3, [r3, #8]
 800e16c:	4619      	mov	r1, r3
 800e16e:	4610      	mov	r0, r2
 800e170:	f7fb febc 	bl	8009eec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	891c      	ldrh	r4, [r3, #8]
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	899b      	ldrh	r3, [r3, #12]
 800e182:	b29b      	uxth	r3, r3
 800e184:	4618      	mov	r0, r3
 800e186:	f7fa fe8b 	bl	8008ea0 <lwip_htons>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f003 0303 	and.w	r3, r3, #3
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <tcp_receive+0xf30>
 800e194:	2301      	movs	r3, #1
 800e196:	e000      	b.n	800e19a <tcp_receive+0xf32>
 800e198:	2300      	movs	r3, #0
 800e19a:	4423      	add	r3, r4
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	4b2a      	ldr	r3, [pc, #168]	; (800e248 <tcp_receive+0xfe0>)
 800e1a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e1a2:	4b29      	ldr	r3, [pc, #164]	; (800e248 <tcp_receive+0xfe0>)
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	4b25      	ldr	r3, [pc, #148]	; (800e240 <tcp_receive+0xfd8>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	441a      	add	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1b6:	440b      	add	r3, r1
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d01b      	beq.n	800e1f4 <tcp_receive+0xf8c>
 800e1bc:	4b23      	ldr	r3, [pc, #140]	; (800e24c <tcp_receive+0xfe4>)
 800e1be:	f240 627b 	movw	r2, #1659	; 0x67b
 800e1c2:	4923      	ldr	r1, [pc, #140]	; (800e250 <tcp_receive+0xfe8>)
 800e1c4:	4823      	ldr	r0, [pc, #140]	; (800e254 <tcp_receive+0xfec>)
 800e1c6:	f005 fe61 	bl	8013e8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e1ca:	e013      	b.n	800e1f4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f47f aeab 	bne.w	800df34 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800e1de:	e00f      	b.n	800e200 <tcp_receive+0xf98>
                break;
 800e1e0:	bf00      	nop
 800e1e2:	e00d      	b.n	800e200 <tcp_receive+0xf98>
                break;
 800e1e4:	bf00      	nop
 800e1e6:	e00b      	b.n	800e200 <tcp_receive+0xf98>
                  break;
 800e1e8:	bf00      	nop
 800e1ea:	e009      	b.n	800e200 <tcp_receive+0xf98>
                  break;
 800e1ec:	bf00      	nop
 800e1ee:	e007      	b.n	800e200 <tcp_receive+0xf98>
                  break;
 800e1f0:	bf00      	nop
 800e1f2:	e005      	b.n	800e200 <tcp_receive+0xf98>
                break;
 800e1f4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800e1f6:	e003      	b.n	800e200 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 ff4f 	bl	800f09c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e1fe:	e01a      	b.n	800e236 <tcp_receive+0xfce>
 800e200:	e019      	b.n	800e236 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e202:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <tcp_receive+0xfd8>)
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	db0a      	blt.n	800e226 <tcp_receive+0xfbe>
 800e210:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <tcp_receive+0xfd8>)
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e218:	6879      	ldr	r1, [r7, #4]
 800e21a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e21c:	440b      	add	r3, r1
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	3301      	adds	r3, #1
 800e222:	2b00      	cmp	r3, #0
 800e224:	dd07      	ble.n	800e236 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	7e9b      	ldrb	r3, [r3, #26]
 800e22a:	f043 0302 	orr.w	r3, r3, #2
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800e234:	e7ff      	b.n	800e236 <tcp_receive+0xfce>
 800e236:	bf00      	nop
 800e238:	3734      	adds	r7, #52	; 0x34
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23e:	bf00      	nop
 800e240:	2000c600 	.word	0x2000c600
 800e244:	2000c5e0 	.word	0x2000c5e0
 800e248:	2000c60a 	.word	0x2000c60a
 800e24c:	08016608 	.word	0x08016608
 800e250:	080168d4 	.word	0x080168d4
 800e254:	0801664c 	.word	0x0801664c

0800e258 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800e25e:	4b18      	ldr	r3, [pc, #96]	; (800e2c0 <tcp_getoptbyte+0x68>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d005      	beq.n	800e272 <tcp_getoptbyte+0x1a>
 800e266:	4b17      	ldr	r3, [pc, #92]	; (800e2c4 <tcp_getoptbyte+0x6c>)
 800e268:	881a      	ldrh	r2, [r3, #0]
 800e26a:	4b17      	ldr	r3, [pc, #92]	; (800e2c8 <tcp_getoptbyte+0x70>)
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d20e      	bcs.n	800e290 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800e272:	4b16      	ldr	r3, [pc, #88]	; (800e2cc <tcp_getoptbyte+0x74>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3314      	adds	r3, #20
 800e278:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800e27a:	4b12      	ldr	r3, [pc, #72]	; (800e2c4 <tcp_getoptbyte+0x6c>)
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	1c5a      	adds	r2, r3, #1
 800e280:	b291      	uxth	r1, r2
 800e282:	4a10      	ldr	r2, [pc, #64]	; (800e2c4 <tcp_getoptbyte+0x6c>)
 800e284:	8011      	strh	r1, [r2, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	4413      	add	r3, r2
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	e010      	b.n	800e2b2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800e290:	4b0c      	ldr	r3, [pc, #48]	; (800e2c4 <tcp_getoptbyte+0x6c>)
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	1c5a      	adds	r2, r3, #1
 800e296:	b291      	uxth	r1, r2
 800e298:	4a0a      	ldr	r2, [pc, #40]	; (800e2c4 <tcp_getoptbyte+0x6c>)
 800e29a:	8011      	strh	r1, [r2, #0]
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <tcp_getoptbyte+0x70>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800e2a8:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <tcp_getoptbyte+0x68>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	2000c5f8 	.word	0x2000c5f8
 800e2c4:	2000c5fc 	.word	0x2000c5fc
 800e2c8:	2000c5f6 	.word	0x2000c5f6
 800e2cc:	2000c5f0 	.word	0x2000c5f0

0800e2d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e2d8:	4b2d      	ldr	r3, [pc, #180]	; (800e390 <tcp_parseopt+0xc0>)
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d053      	beq.n	800e388 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e2e0:	4b2c      	ldr	r3, [pc, #176]	; (800e394 <tcp_parseopt+0xc4>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	801a      	strh	r2, [r3, #0]
 800e2e6:	e043      	b.n	800e370 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800e2e8:	f7ff ffb6 	bl	800e258 <tcp_getoptbyte>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d03c      	beq.n	800e370 <tcp_parseopt+0xa0>
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d002      	beq.n	800e300 <tcp_parseopt+0x30>
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d03f      	beq.n	800e37e <tcp_parseopt+0xae>
 800e2fe:	e026      	b.n	800e34e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e300:	f7ff ffaa 	bl	800e258 <tcp_getoptbyte>
 800e304:	4603      	mov	r3, r0
 800e306:	2b04      	cmp	r3, #4
 800e308:	d13b      	bne.n	800e382 <tcp_parseopt+0xb2>
 800e30a:	4b22      	ldr	r3, [pc, #136]	; (800e394 <tcp_parseopt+0xc4>)
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	3302      	adds	r3, #2
 800e310:	4a1f      	ldr	r2, [pc, #124]	; (800e390 <tcp_parseopt+0xc0>)
 800e312:	8812      	ldrh	r2, [r2, #0]
 800e314:	4293      	cmp	r3, r2
 800e316:	dc34      	bgt.n	800e382 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800e318:	f7ff ff9e 	bl	800e258 <tcp_getoptbyte>
 800e31c:	4603      	mov	r3, r0
 800e31e:	b29b      	uxth	r3, r3
 800e320:	021b      	lsls	r3, r3, #8
 800e322:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800e324:	f7ff ff98 	bl	800e258 <tcp_getoptbyte>
 800e328:	4603      	mov	r3, r0
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	89bb      	ldrh	r3, [r7, #12]
 800e32e:	4313      	orrs	r3, r2
 800e330:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e332:	89bb      	ldrh	r3, [r7, #12]
 800e334:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e338:	d804      	bhi.n	800e344 <tcp_parseopt+0x74>
 800e33a:	89bb      	ldrh	r3, [r7, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <tcp_parseopt+0x74>
 800e340:	89ba      	ldrh	r2, [r7, #12]
 800e342:	e001      	b.n	800e348 <tcp_parseopt+0x78>
 800e344:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800e34c:	e010      	b.n	800e370 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800e34e:	f7ff ff83 	bl	800e258 <tcp_getoptbyte>
 800e352:	4603      	mov	r3, r0
 800e354:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800e356:	7afb      	ldrb	r3, [r7, #11]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d914      	bls.n	800e386 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800e35c:	7afb      	ldrb	r3, [r7, #11]
 800e35e:	b29a      	uxth	r2, r3
 800e360:	4b0c      	ldr	r3, [pc, #48]	; (800e394 <tcp_parseopt+0xc4>)
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	4413      	add	r3, r2
 800e366:	b29b      	uxth	r3, r3
 800e368:	3b02      	subs	r3, #2
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	4b09      	ldr	r3, [pc, #36]	; (800e394 <tcp_parseopt+0xc4>)
 800e36e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e370:	4b08      	ldr	r3, [pc, #32]	; (800e394 <tcp_parseopt+0xc4>)
 800e372:	881a      	ldrh	r2, [r3, #0]
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <tcp_parseopt+0xc0>)
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d3b5      	bcc.n	800e2e8 <tcp_parseopt+0x18>
 800e37c:	e004      	b.n	800e388 <tcp_parseopt+0xb8>
        return;
 800e37e:	bf00      	nop
 800e380:	e002      	b.n	800e388 <tcp_parseopt+0xb8>
          return;
 800e382:	bf00      	nop
 800e384:	e000      	b.n	800e388 <tcp_parseopt+0xb8>
          return;
 800e386:	bf00      	nop
      }
    }
  }
}
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	2000c5f4 	.word	0x2000c5f4
 800e394:	2000c5fc 	.word	0x2000c5fc

0800e398 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e398:	b480      	push	{r7}
 800e39a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e39c:	4b05      	ldr	r3, [pc, #20]	; (800e3b4 <tcp_trigger_input_pcb_close+0x1c>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	f043 0310 	orr.w	r3, r3, #16
 800e3a4:	b2da      	uxtb	r2, r3
 800e3a6:	4b03      	ldr	r3, [pc, #12]	; (800e3b4 <tcp_trigger_input_pcb_close+0x1c>)
 800e3a8:	701a      	strb	r2, [r3, #0]
}
 800e3aa:	bf00      	nop
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr
 800e3b4:	2000c60d 	.word	0x2000c60d

0800e3b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	607b      	str	r3, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	817b      	strh	r3, [r7, #10]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e3ca:	897a      	ldrh	r2, [r7, #10]
 800e3cc:	893b      	ldrh	r3, [r7, #8]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	3314      	adds	r3, #20
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	4619      	mov	r1, r3
 800e3da:	2001      	movs	r0, #1
 800e3dc:	f7fb fb88 	bl	8009af0 <pbuf_alloc>
 800e3e0:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d057      	beq.n	800e498 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	895b      	ldrh	r3, [r3, #10]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	897b      	ldrh	r3, [r7, #10]
 800e3f0:	3314      	adds	r3, #20
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	da05      	bge.n	800e402 <tcp_output_alloc_header+0x4a>
 800e3f6:	4b2b      	ldr	r3, [pc, #172]	; (800e4a4 <tcp_output_alloc_header+0xec>)
 800e3f8:	2273      	movs	r2, #115	; 0x73
 800e3fa:	492b      	ldr	r1, [pc, #172]	; (800e4a8 <tcp_output_alloc_header+0xf0>)
 800e3fc:	482b      	ldr	r0, [pc, #172]	; (800e4ac <tcp_output_alloc_header+0xf4>)
 800e3fe:	f005 fd45 	bl	8013e8c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	8adb      	ldrh	r3, [r3, #22]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fa fd47 	bl	8008ea0 <lwip_htons>
 800e412:	4603      	mov	r3, r0
 800e414:	461a      	mov	r2, r3
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	8b1b      	ldrh	r3, [r3, #24]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fa fd3e 	bl	8008ea0 <lwip_htons>
 800e424:	4603      	mov	r3, r0
 800e426:	461a      	mov	r2, r3
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e436:	4618      	mov	r0, r3
 800e438:	f7fa fd40 	bl	8008ebc <lwip_htonl>
 800e43c:	4602      	mov	r2, r0
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800e442:	897b      	ldrh	r3, [r7, #10]
 800e444:	089b      	lsrs	r3, r3, #2
 800e446:	b29b      	uxth	r3, r3
 800e448:	3305      	adds	r3, #5
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	031b      	lsls	r3, r3, #12
 800e44e:	b29b      	uxth	r3, r3
 800e450:	f043 0310 	orr.w	r3, r3, #16
 800e454:	b29b      	uxth	r3, r3
 800e456:	4618      	mov	r0, r3
 800e458:	f7fa fd22 	bl	8008ea0 <lwip_htons>
 800e45c:	4603      	mov	r3, r0
 800e45e:	461a      	mov	r2, r3
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fa fd19 	bl	8008ea0 <lwip_htons>
 800e46e:	4603      	mov	r3, r0
 800e470:	461a      	mov	r2, r3
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	2200      	movs	r2, #0
 800e47a:	741a      	strb	r2, [r3, #16]
 800e47c:	2200      	movs	r2, #0
 800e47e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	2200      	movs	r2, #0
 800e484:	749a      	strb	r2, [r3, #18]
 800e486:	2200      	movs	r2, #0
 800e488:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e492:	441a      	add	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e498:	697b      	ldr	r3, [r7, #20]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	08016990 	.word	0x08016990
 800e4a8:	080169c4 	.word	0x080169c4
 800e4ac:	080169f4 	.word	0x080169f4

0800e4b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d02d      	beq.n	800e51c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	e002      	b.n	800e4ce <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1f8      	bne.n	800e4c8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	899b      	ldrh	r3, [r3, #12]
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fa fcde 	bl	8008ea0 <lwip_htons>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d116      	bne.n	800e51c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	899b      	ldrh	r3, [r3, #12]
 800e4f4:	b29c      	uxth	r4, r3
 800e4f6:	2001      	movs	r0, #1
 800e4f8:	f7fa fcd2 	bl	8008ea0 <lwip_htons>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	461a      	mov	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	4322      	orrs	r2, r4
 800e506:	b292      	uxth	r2, r2
 800e508:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	7e9b      	ldrb	r3, [r3, #26]
 800e50e:	f043 0320 	orr.w	r3, r3, #32
 800e512:	b2da      	uxtb	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	e004      	b.n	800e526 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e51c:	2101      	movs	r1, #1
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fcc0 	bl	800eea4 <tcp_enqueue_flags>
 800e524:	4603      	mov	r3, r0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd90      	pop	{r4, r7, pc}
	...

0800e530 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800e530:	b590      	push	{r4, r7, lr}
 800e532:	b087      	sub	sp, #28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	4613      	mov	r3, r2
 800e53e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e540:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	b2db      	uxtb	r3, r3
 800e548:	f003 0304 	and.w	r3, r3, #4
 800e54c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e54e:	2003      	movs	r0, #3
 800e550:	f7fb f894 	bl	800967c <memp_malloc>
 800e554:	6138      	str	r0, [r7, #16]
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d104      	bne.n	800e566 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e55c:	68b8      	ldr	r0, [r7, #8]
 800e55e:	f7fb fe39 	bl	800a1d4 <pbuf_free>
    return NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	e061      	b.n	800e62a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e56c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	891a      	ldrh	r2, [r3, #8]
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	b29b      	uxth	r3, r3
 800e582:	429a      	cmp	r2, r3
 800e584:	d205      	bcs.n	800e592 <tcp_create_segment+0x62>
 800e586:	4b2b      	ldr	r3, [pc, #172]	; (800e634 <tcp_create_segment+0x104>)
 800e588:	22ba      	movs	r2, #186	; 0xba
 800e58a:	492b      	ldr	r1, [pc, #172]	; (800e638 <tcp_create_segment+0x108>)
 800e58c:	482b      	ldr	r0, [pc, #172]	; (800e63c <tcp_create_segment+0x10c>)
 800e58e:	f005 fc7d 	bl	8013e8c <iprintf>
  seg->len = p->tot_len - optlen;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	891a      	ldrh	r2, [r3, #8]
 800e596:	7dfb      	ldrb	r3, [r7, #23]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800e5a2:	2114      	movs	r1, #20
 800e5a4:	68b8      	ldr	r0, [r7, #8]
 800e5a6:	f7fb fdf1 	bl	800a18c <pbuf_header>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d004      	beq.n	800e5ba <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e5b0:	6938      	ldr	r0, [r7, #16]
 800e5b2:	f7fd f938 	bl	800b826 <tcp_seg_free>
    return NULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e037      	b.n	800e62a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	8ada      	ldrh	r2, [r3, #22]
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	68dc      	ldr	r4, [r3, #12]
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	f7fa fc67 	bl	8008ea0 <lwip_htons>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	8b1a      	ldrh	r2, [r3, #24]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	68dc      	ldr	r4, [r3, #12]
 800e5de:	4610      	mov	r0, r2
 800e5e0:	f7fa fc5e 	bl	8008ea0 <lwip_htons>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	68dc      	ldr	r4, [r3, #12]
 800e5ec:	6838      	ldr	r0, [r7, #0]
 800e5ee:	f7fa fc65 	bl	8008ebc <lwip_htonl>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	089b      	lsrs	r3, r3, #2
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	3305      	adds	r3, #5
 800e600:	b29b      	uxth	r3, r3
 800e602:	031b      	lsls	r3, r3, #12
 800e604:	b29a      	uxth	r2, r3
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	4313      	orrs	r3, r2
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	68dc      	ldr	r4, [r3, #12]
 800e612:	4610      	mov	r0, r2
 800e614:	f7fa fc44 	bl	8008ea0 <lwip_htons>
 800e618:	4603      	mov	r3, r0
 800e61a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	749a      	strb	r2, [r3, #18]
 800e624:	2200      	movs	r2, #0
 800e626:	74da      	strb	r2, [r3, #19]
  return seg;
 800e628:	693b      	ldr	r3, [r7, #16]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd90      	pop	{r4, r7, pc}
 800e632:	bf00      	nop
 800e634:	08016990 	.word	0x08016990
 800e638:	08016a1c 	.word	0x08016a1c
 800e63c:	080169f4 	.word	0x080169f4

0800e640 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	607b      	str	r3, [r7, #4]
 800e648:	4603      	mov	r3, r0
 800e64a:	73fb      	strb	r3, [r7, #15]
 800e64c:	460b      	mov	r3, r1
 800e64e:	81bb      	strh	r3, [r7, #12]
 800e650:	4613      	mov	r3, r2
 800e652:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e654:	89bb      	ldrh	r3, [r7, #12]
 800e656:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e658:	89ba      	ldrh	r2, [r7, #12]
 800e65a:	897b      	ldrh	r3, [r7, #10]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d221      	bcs.n	800e6a4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e664:	f003 0302 	and.w	r3, r3, #2
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d111      	bne.n	800e690 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	7e9b      	ldrb	r3, [r3, #26]
 800e670:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e674:	2b00      	cmp	r3, #0
 800e676:	d115      	bne.n	800e6a4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800e678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e680:	6a3b      	ldr	r3, [r7, #32]
 800e682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d009      	beq.n	800e6a4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e690:	89bb      	ldrh	r3, [r7, #12]
 800e692:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e696:	f023 0203 	bic.w	r2, r3, #3
 800e69a:	897b      	ldrh	r3, [r7, #10]
 800e69c:	4293      	cmp	r3, r2
 800e69e:	bf28      	it	cs
 800e6a0:	4613      	movcs	r3, r2
 800e6a2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e6a4:	8af9      	ldrh	r1, [r7, #22]
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fb fa20 	bl	8009af0 <pbuf_alloc>
 800e6b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e019      	b.n	800e6f0 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d006      	beq.n	800e6d2 <tcp_pbuf_prealloc+0x92>
 800e6c4:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <tcp_pbuf_prealloc+0xb8>)
 800e6c6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e6ca:	490c      	ldr	r1, [pc, #48]	; (800e6fc <tcp_pbuf_prealloc+0xbc>)
 800e6cc:	480c      	ldr	r0, [pc, #48]	; (800e700 <tcp_pbuf_prealloc+0xc0>)
 800e6ce:	f005 fbdd 	bl	8013e8c <iprintf>
  *oversize = p->len - length;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	895a      	ldrh	r2, [r3, #10]
 800e6d6:	89bb      	ldrh	r3, [r7, #12]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	89ba      	ldrh	r2, [r7, #12]
 800e6e4:	811a      	strh	r2, [r3, #8]
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	891a      	ldrh	r2, [r3, #8]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	815a      	strh	r2, [r3, #10]
  return p;
 800e6ee:	693b      	ldr	r3, [r7, #16]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	08016990 	.word	0x08016990
 800e6fc:	08016a34 	.word	0x08016a34
 800e700:	080169f4 	.word	0x080169f4

0800e704 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	7d1b      	ldrb	r3, [r3, #20]
 800e714:	2b04      	cmp	r3, #4
 800e716:	d00e      	beq.n	800e736 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e71c:	2b07      	cmp	r3, #7
 800e71e:	d00a      	beq.n	800e736 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e724:	2b02      	cmp	r3, #2
 800e726:	d006      	beq.n	800e736 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	d002      	beq.n	800e736 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e730:	f06f 030a 	mvn.w	r3, #10
 800e734:	e04f      	b.n	800e7d6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800e736:	887b      	ldrh	r3, [r7, #2]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <tcp_write_checks+0x3c>
    return ERR_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	e04a      	b.n	800e7d6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e746:	887a      	ldrh	r2, [r7, #2]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d909      	bls.n	800e760 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	7e9b      	ldrb	r3, [r3, #26]
 800e750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e754:	b2da      	uxtb	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e75a:	f04f 33ff 	mov.w	r3, #4294967295
 800e75e:	e03a      	b.n	800e7d6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e766:	2b08      	cmp	r3, #8
 800e768:	d806      	bhi.n	800e778 <tcp_write_checks+0x74>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e770:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e774:	4293      	cmp	r3, r2
 800e776:	d909      	bls.n	800e78c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7e9b      	ldrb	r3, [r3, #26]
 800e77c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e780:	b2da      	uxtb	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e024      	b.n	800e7d6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00f      	beq.n	800e7b6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d11a      	bne.n	800e7d4 <tcp_write_checks+0xd0>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d116      	bne.n	800e7d4 <tcp_write_checks+0xd0>
 800e7a6:	4b0e      	ldr	r3, [pc, #56]	; (800e7e0 <tcp_write_checks+0xdc>)
 800e7a8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800e7ac:	490d      	ldr	r1, [pc, #52]	; (800e7e4 <tcp_write_checks+0xe0>)
 800e7ae:	480e      	ldr	r0, [pc, #56]	; (800e7e8 <tcp_write_checks+0xe4>)
 800e7b0:	f005 fb6c 	bl	8013e8c <iprintf>
 800e7b4:	e00e      	b.n	800e7d4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d103      	bne.n	800e7c6 <tcp_write_checks+0xc2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d006      	beq.n	800e7d4 <tcp_write_checks+0xd0>
 800e7c6:	4b06      	ldr	r3, [pc, #24]	; (800e7e0 <tcp_write_checks+0xdc>)
 800e7c8:	f240 1259 	movw	r2, #345	; 0x159
 800e7cc:	4907      	ldr	r1, [pc, #28]	; (800e7ec <tcp_write_checks+0xe8>)
 800e7ce:	4806      	ldr	r0, [pc, #24]	; (800e7e8 <tcp_write_checks+0xe4>)
 800e7d0:	f005 fb5c 	bl	8013e8c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08016990 	.word	0x08016990
 800e7e4:	08016a48 	.word	0x08016a48
 800e7e8:	080169f4 	.word	0x080169f4
 800e7ec:	08016a84 	.word	0x08016a84

0800e7f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b09b      	sub	sp, #108	; 0x6c
 800e7f4:	af04      	add	r7, sp, #16
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	460b      	mov	r3, r1
 800e800:	80fb      	strh	r3, [r7, #6]
 800e802:	4613      	mov	r3, r2
 800e804:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e806:	2300      	movs	r3, #0
 800e808:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	653b      	str	r3, [r7, #80]	; 0x50
 800e80e:	2300      	movs	r3, #0
 800e810:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e812:	2300      	movs	r3, #0
 800e814:	64bb      	str	r3, [r7, #72]	; 0x48
 800e816:	2300      	movs	r3, #0
 800e818:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e81a:	2300      	movs	r3, #0
 800e81c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e83e:	085b      	lsrs	r3, r3, #1
 800e840:	b29a      	uxth	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e846:	4293      	cmp	r3, r2
 800e848:	bf28      	it	cs
 800e84a:	4613      	movcs	r3, r2
 800e84c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e850:	2b00      	cmp	r3, #0
 800e852:	d102      	bne.n	800e85a <tcp_write+0x6a>
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e858:	e000      	b.n	800e85c <tcp_write+0x6c>
 800e85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e85c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d109      	bne.n	800e878 <tcp_write+0x88>
 800e864:	4b92      	ldr	r3, [pc, #584]	; (800eab0 <tcp_write+0x2c0>)
 800e866:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800e86a:	4992      	ldr	r1, [pc, #584]	; (800eab4 <tcp_write+0x2c4>)
 800e86c:	4892      	ldr	r0, [pc, #584]	; (800eab8 <tcp_write+0x2c8>)
 800e86e:	f005 fb0d 	bl	8013e8c <iprintf>
 800e872:	f06f 030f 	mvn.w	r3, #15
 800e876:	e30a      	b.n	800ee8e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e878:	88fb      	ldrh	r3, [r7, #6]
 800e87a:	4619      	mov	r1, r3
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f7ff ff41 	bl	800e704 <tcp_write_checks>
 800e882:	4603      	mov	r3, r0
 800e884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e888:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <tcp_write+0xa6>
    return err;
 800e890:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e894:	e2fb      	b.n	800ee8e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e89c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f000 80f5 	beq.w	800ea94 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e8b0:	e002      	b.n	800e8b8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800e8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1f8      	bne.n	800e8b2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c2:	7a9b      	ldrb	r3, [r3, #10]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	f003 0304 	and.w	r3, r3, #4
 800e8cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e8ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d2:	891b      	ldrh	r3, [r3, #8]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	8c3b      	ldrh	r3, [r7, #32]
 800e8d8:	440b      	add	r3, r1
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	da06      	bge.n	800e8ec <tcp_write+0xfc>
 800e8de:	4b74      	ldr	r3, [pc, #464]	; (800eab0 <tcp_write+0x2c0>)
 800e8e0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800e8e4:	4975      	ldr	r1, [pc, #468]	; (800eabc <tcp_write+0x2cc>)
 800e8e6:	4874      	ldr	r0, [pc, #464]	; (800eab8 <tcp_write+0x2c8>)
 800e8e8:	f005 fad0 	bl	8013e8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ee:	891a      	ldrh	r2, [r3, #8]
 800e8f0:	8c3b      	ldrh	r3, [r7, #32]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e902:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e904:	8a7b      	ldrh	r3, [r7, #18]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d027      	beq.n	800e95a <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e90a:	8a7b      	ldrh	r3, [r7, #18]
 800e90c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e90e:	429a      	cmp	r2, r3
 800e910:	d206      	bcs.n	800e920 <tcp_write+0x130>
 800e912:	4b67      	ldr	r3, [pc, #412]	; (800eab0 <tcp_write+0x2c0>)
 800e914:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e918:	4969      	ldr	r1, [pc, #420]	; (800eac0 <tcp_write+0x2d0>)
 800e91a:	4867      	ldr	r0, [pc, #412]	; (800eab8 <tcp_write+0x2c8>)
 800e91c:	f005 fab6 	bl	8013e8c <iprintf>
      seg = last_unsent;
 800e920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e922:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e924:	8a7b      	ldrh	r3, [r7, #18]
 800e926:	88fa      	ldrh	r2, [r7, #6]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d901      	bls.n	800e930 <tcp_write+0x140>
 800e92c:	8a7b      	ldrh	r3, [r7, #18]
 800e92e:	e000      	b.n	800e932 <tcp_write+0x142>
 800e930:	88fb      	ldrh	r3, [r7, #6]
 800e932:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e934:	4293      	cmp	r3, r2
 800e936:	bfa8      	it	ge
 800e938:	4613      	movge	r3, r2
 800e93a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e93c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e940:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e942:	4413      	add	r3, r2
 800e944:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e948:	8a7a      	ldrh	r2, [r7, #18]
 800e94a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	b29b      	uxth	r3, r3
 800e950:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e952:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e95a:	8a7b      	ldrh	r3, [r7, #18]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00b      	beq.n	800e978 <tcp_write+0x188>
 800e960:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e964:	88fb      	ldrh	r3, [r7, #6]
 800e966:	429a      	cmp	r2, r3
 800e968:	d006      	beq.n	800e978 <tcp_write+0x188>
 800e96a:	4b51      	ldr	r3, [pc, #324]	; (800eab0 <tcp_write+0x2c0>)
 800e96c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e970:	4954      	ldr	r1, [pc, #336]	; (800eac4 <tcp_write+0x2d4>)
 800e972:	4851      	ldr	r0, [pc, #324]	; (800eab8 <tcp_write+0x2c8>)
 800e974:	f005 fa8a 	bl	8013e8c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e97c:	88fb      	ldrh	r3, [r7, #6]
 800e97e:	429a      	cmp	r2, r3
 800e980:	f080 8168 	bcs.w	800ec54 <tcp_write+0x464>
 800e984:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 8164 	beq.w	800ec54 <tcp_write+0x464>
 800e98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e98e:	891b      	ldrh	r3, [r3, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	f000 815f 	beq.w	800ec54 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e996:	88fa      	ldrh	r2, [r7, #6]
 800e998:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e99c:	1ad2      	subs	r2, r2, r3
 800e99e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	bfa8      	it	ge
 800e9a4:	4613      	movge	r3, r2
 800e9a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e9ac:	797b      	ldrb	r3, [r7, #5]
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d027      	beq.n	800ea06 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e9b6:	f107 0012 	add.w	r0, r7, #18
 800e9ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e9bc:	8bf9      	ldrh	r1, [r7, #30]
 800e9be:	2301      	movs	r3, #1
 800e9c0:	9302      	str	r3, [sp, #8]
 800e9c2:	797b      	ldrb	r3, [r7, #5]
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2004      	movs	r0, #4
 800e9ce:	f7ff fe37 	bl	800e640 <tcp_pbuf_prealloc>
 800e9d2:	6578      	str	r0, [r7, #84]	; 0x54
 800e9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 8227 	beq.w	800ee2a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9de:	6858      	ldr	r0, [r3, #4]
 800e9e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	8bfa      	ldrh	r2, [r7, #30]
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f005 fa3b 	bl	8013e66 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e9f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e9f2:	f7fb fc89 	bl	800a308 <pbuf_clen>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e9fe:	4413      	add	r3, r2
 800ea00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ea04:	e03f      	b.n	800ea86 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ea06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea0c:	e002      	b.n	800ea14 <tcp_write+0x224>
 800ea0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	637b      	str	r3, [r7, #52]	; 0x34
 800ea14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1f8      	bne.n	800ea0e <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ea1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1e:	7b1b      	ldrb	r3, [r3, #12]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d115      	bne.n	800ea50 <tcp_write+0x260>
 800ea24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea2a:	8952      	ldrh	r2, [r2, #10]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	68ba      	ldr	r2, [r7, #8]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d10d      	bne.n	800ea50 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ea34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d006      	beq.n	800ea4a <tcp_write+0x25a>
 800ea3c:	4b1c      	ldr	r3, [pc, #112]	; (800eab0 <tcp_write+0x2c0>)
 800ea3e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ea42:	4921      	ldr	r1, [pc, #132]	; (800eac8 <tcp_write+0x2d8>)
 800ea44:	481c      	ldr	r0, [pc, #112]	; (800eab8 <tcp_write+0x2c8>)
 800ea46:	f005 fa21 	bl	8013e8c <iprintf>
          extendlen = seglen;
 800ea4a:	8bfb      	ldrh	r3, [r7, #30]
 800ea4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ea4e:	e01a      	b.n	800ea86 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ea50:	8bfb      	ldrh	r3, [r7, #30]
 800ea52:	2201      	movs	r2, #1
 800ea54:	4619      	mov	r1, r3
 800ea56:	2004      	movs	r0, #4
 800ea58:	f7fb f84a 	bl	8009af0 <pbuf_alloc>
 800ea5c:	6578      	str	r0, [r7, #84]	; 0x54
 800ea5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 81e4 	beq.w	800ee2e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ea66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea6a:	68ba      	ldr	r2, [r7, #8]
 800ea6c:	441a      	add	r2, r3
 800ea6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea70:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ea72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ea74:	f7fb fc48 	bl	800a308 <pbuf_clen>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ea80:	4413      	add	r3, r2
 800ea82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ea86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea8a:	8bfb      	ldrh	r3, [r7, #30]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ea92:	e0df      	b.n	800ec54 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 80da 	beq.w	800ec54 <tcp_write+0x464>
 800eaa0:	4b03      	ldr	r3, [pc, #12]	; (800eab0 <tcp_write+0x2c0>)
 800eaa2:	f240 2225 	movw	r2, #549	; 0x225
 800eaa6:	4909      	ldr	r1, [pc, #36]	; (800eacc <tcp_write+0x2dc>)
 800eaa8:	4803      	ldr	r0, [pc, #12]	; (800eab8 <tcp_write+0x2c8>)
 800eaaa:	f005 f9ef 	bl	8013e8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800eaae:	e0d1      	b.n	800ec54 <tcp_write+0x464>
 800eab0:	08016990 	.word	0x08016990
 800eab4:	08016ab8 	.word	0x08016ab8
 800eab8:	080169f4 	.word	0x080169f4
 800eabc:	08016aec 	.word	0x08016aec
 800eac0:	08016b04 	.word	0x08016b04
 800eac4:	08016b24 	.word	0x08016b24
 800eac8:	08016b44 	.word	0x08016b44
 800eacc:	08016b70 	.word	0x08016b70
    struct pbuf *p;
    u16_t left = len - pos;
 800ead0:	88fa      	ldrh	r2, [r7, #6]
 800ead2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800eada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eade:	b29b      	uxth	r3, r3
 800eae0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800eae6:	8b7a      	ldrh	r2, [r7, #26]
 800eae8:	8bbb      	ldrh	r3, [r7, #28]
 800eaea:	4293      	cmp	r3, r2
 800eaec:	bf28      	it	cs
 800eaee:	4613      	movcs	r3, r2
 800eaf0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800eaf2:	797b      	ldrb	r3, [r7, #5]
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d036      	beq.n	800eb6a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800eafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	8b3b      	ldrh	r3, [r7, #24]
 800eb04:	4413      	add	r3, r2
 800eb06:	b299      	uxth	r1, r3
 800eb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bf0c      	ite	eq
 800eb0e:	2301      	moveq	r3, #1
 800eb10:	2300      	movne	r3, #0
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	f107 0012 	add.w	r0, r7, #18
 800eb18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb1a:	9302      	str	r3, [sp, #8]
 800eb1c:	797b      	ldrb	r3, [r7, #5]
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	4603      	mov	r3, r0
 800eb26:	2000      	movs	r0, #0
 800eb28:	f7ff fd8a 	bl	800e640 <tcp_pbuf_prealloc>
 800eb2c:	6338      	str	r0, [r7, #48]	; 0x30
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f000 817e 	beq.w	800ee32 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	895b      	ldrh	r3, [r3, #10]
 800eb3a:	8b3a      	ldrh	r2, [r7, #24]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d906      	bls.n	800eb4e <tcp_write+0x35e>
 800eb40:	4b8f      	ldr	r3, [pc, #572]	; (800ed80 <tcp_write+0x590>)
 800eb42:	f240 2241 	movw	r2, #577	; 0x241
 800eb46:	498f      	ldr	r1, [pc, #572]	; (800ed84 <tcp_write+0x594>)
 800eb48:	488f      	ldr	r0, [pc, #572]	; (800ed88 <tcp_write+0x598>)
 800eb4a:	f005 f99f 	bl	8013e8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	685a      	ldr	r2, [r3, #4]
 800eb52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb56:	18d0      	adds	r0, r2, r3
 800eb58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	4413      	add	r3, r2
 800eb60:	8b3a      	ldrh	r2, [r7, #24]
 800eb62:	4619      	mov	r1, r3
 800eb64:	f005 f97f 	bl	8013e66 <memcpy>
 800eb68:	e02e      	b.n	800ebc8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800eb6a:	8a7b      	ldrh	r3, [r7, #18]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <tcp_write+0x38e>
 800eb70:	4b83      	ldr	r3, [pc, #524]	; (800ed80 <tcp_write+0x590>)
 800eb72:	f240 224b 	movw	r2, #587	; 0x24b
 800eb76:	4985      	ldr	r1, [pc, #532]	; (800ed8c <tcp_write+0x59c>)
 800eb78:	4883      	ldr	r0, [pc, #524]	; (800ed88 <tcp_write+0x598>)
 800eb7a:	f005 f987 	bl	8013e8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800eb7e:	8b3b      	ldrh	r3, [r7, #24]
 800eb80:	2201      	movs	r2, #1
 800eb82:	4619      	mov	r1, r3
 800eb84:	2000      	movs	r0, #0
 800eb86:	f7fa ffb3 	bl	8009af0 <pbuf_alloc>
 800eb8a:	6178      	str	r0, [r7, #20]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f000 8151 	beq.w	800ee36 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800eb94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb98:	68ba      	ldr	r2, [r7, #8]
 800eb9a:	441a      	add	r2, r3
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	2200      	movs	r2, #0
 800eba8:	4619      	mov	r1, r3
 800ebaa:	2000      	movs	r0, #0
 800ebac:	f7fa ffa0 	bl	8009af0 <pbuf_alloc>
 800ebb0:	6338      	str	r0, [r7, #48]	; 0x30
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d103      	bne.n	800ebc0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ebb8:	6978      	ldr	r0, [r7, #20]
 800ebba:	f7fb fb0b 	bl	800a1d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ebbe:	e13d      	b.n	800ee3c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ebc0:	6979      	ldr	r1, [r7, #20]
 800ebc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebc4:	f7fb fbe0 	bl	800a388 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ebc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebca:	f7fb fb9d 	bl	800a308 <pbuf_clen>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ebdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ebe0:	2b09      	cmp	r3, #9
 800ebe2:	d805      	bhi.n	800ebf0 <tcp_write+0x400>
 800ebe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ebe8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d903      	bls.n	800ebf8 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ebf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebf2:	f7fb faef 	bl	800a1d4 <pbuf_free>
      goto memerr;
 800ebf6:	e121      	b.n	800ee3c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ebfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec00:	441a      	add	r2, r3
 800ec02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f7ff fc8e 	bl	800e530 <tcp_create_segment>
 800ec14:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ec16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f000 810e 	beq.w	800ee3a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ec1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d102      	bne.n	800ec2a <tcp_write+0x43a>
      queue = seg;
 800ec24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec26:	647b      	str	r3, [r7, #68]	; 0x44
 800ec28:	e00c      	b.n	800ec44 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ec2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <tcp_write+0x44e>
 800ec30:	4b53      	ldr	r3, [pc, #332]	; (800ed80 <tcp_write+0x590>)
 800ec32:	f240 2285 	movw	r2, #645	; 0x285
 800ec36:	4956      	ldr	r1, [pc, #344]	; (800ed90 <tcp_write+0x5a0>)
 800ec38:	4853      	ldr	r0, [pc, #332]	; (800ed88 <tcp_write+0x598>)
 800ec3a:	f005 f927 	bl	8013e8c <iprintf>
      prev_seg->next = seg;
 800ec3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec42:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ec44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec46:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ec48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec4c:	8b3b      	ldrh	r3, [r7, #24]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ec54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec58:	88fb      	ldrh	r3, [r7, #6]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	f4ff af38 	bcc.w	800ead0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ec60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d02c      	beq.n	800ecc0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ec66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec6c:	e01e      	b.n	800ecac <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800ec6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec70:	891a      	ldrh	r2, [r3, #8]
 800ec72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec74:	4413      	add	r3, r2
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d110      	bne.n	800eca6 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec8a:	8952      	ldrh	r2, [r2, #10]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ec90:	68b9      	ldr	r1, [r7, #8]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f005 f8e7 	bl	8013e66 <memcpy>
        p->len += oversize_used;
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	895a      	ldrh	r2, [r3, #10]
 800ec9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec9e:	4413      	add	r3, r2
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1dd      	bne.n	800ec6e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800ecb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb4:	891a      	ldrh	r2, [r3, #8]
 800ecb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecb8:	4413      	add	r3, r2
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecbe:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ecc0:	8a7a      	ldrh	r2, [r7, #18]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ecc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d018      	beq.n	800ed00 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ecce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d106      	bne.n	800ece2 <tcp_write+0x4f2>
 800ecd4:	4b2a      	ldr	r3, [pc, #168]	; (800ed80 <tcp_write+0x590>)
 800ecd6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ecda:	492e      	ldr	r1, [pc, #184]	; (800ed94 <tcp_write+0x5a4>)
 800ecdc:	482a      	ldr	r0, [pc, #168]	; (800ed88 <tcp_write+0x598>)
 800ecde:	f005 f8d5 	bl	8013e8c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ece2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fb fb4d 	bl	800a388 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ecee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecf0:	891a      	ldrh	r2, [r3, #8]
 800ecf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf4:	891b      	ldrh	r3, [r3, #8]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecfc:	811a      	strh	r2, [r3, #8]
 800ecfe:	e037      	b.n	800ed70 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800ed00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d034      	beq.n	800ed70 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ed06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <tcp_write+0x524>
 800ed0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d106      	bne.n	800ed22 <tcp_write+0x532>
 800ed14:	4b1a      	ldr	r3, [pc, #104]	; (800ed80 <tcp_write+0x590>)
 800ed16:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ed1a:	491f      	ldr	r1, [pc, #124]	; (800ed98 <tcp_write+0x5a8>)
 800ed1c:	481a      	ldr	r0, [pc, #104]	; (800ed88 <tcp_write+0x598>)
 800ed1e:	f005 f8b5 	bl	8013e8c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ed22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed28:	e009      	b.n	800ed3e <tcp_write+0x54e>
      p->tot_len += extendlen;
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	891a      	ldrh	r2, [r3, #8]
 800ed2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed30:	4413      	add	r3, r2
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1f1      	bne.n	800ed2a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	891a      	ldrh	r2, [r3, #8]
 800ed4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed4c:	4413      	add	r3, r2
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed52:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	895a      	ldrh	r2, [r3, #10]
 800ed58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed5a:	4413      	add	r3, r2
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed60:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ed62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed64:	891a      	ldrh	r2, [r3, #8]
 800ed66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed68:	4413      	add	r3, r2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed6e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ed70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d112      	bne.n	800ed9c <tcp_write+0x5ac>
    pcb->unsent = queue;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed7a:	669a      	str	r2, [r3, #104]	; 0x68
 800ed7c:	e011      	b.n	800eda2 <tcp_write+0x5b2>
 800ed7e:	bf00      	nop
 800ed80:	08016990 	.word	0x08016990
 800ed84:	08016ba0 	.word	0x08016ba0
 800ed88:	080169f4 	.word	0x080169f4
 800ed8c:	08016be0 	.word	0x08016be0
 800ed90:	08016bf0 	.word	0x08016bf0
 800ed94:	08016c04 	.word	0x08016c04
 800ed98:	08016c3c 	.word	0x08016c3c
  } else {
    last_unsent->next = queue;
 800ed9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eda0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eda6:	88fb      	ldrh	r3, [r7, #6]
 800eda8:	441a      	add	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edb4:	88fb      	ldrh	r3, [r7, #6]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	b29a      	uxth	r2, r3
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800edc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00e      	beq.n	800edf2 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10a      	bne.n	800edf2 <tcp_write+0x602>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d106      	bne.n	800edf2 <tcp_write+0x602>
 800ede4:	4b2c      	ldr	r3, [pc, #176]	; (800ee98 <tcp_write+0x6a8>)
 800ede6:	f240 22ed 	movw	r2, #749	; 0x2ed
 800edea:	492c      	ldr	r1, [pc, #176]	; (800ee9c <tcp_write+0x6ac>)
 800edec:	482c      	ldr	r0, [pc, #176]	; (800eea0 <tcp_write+0x6b0>)
 800edee:	f005 f84d 	bl	8013e8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800edf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d016      	beq.n	800ee26 <tcp_write+0x636>
 800edf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d012      	beq.n	800ee26 <tcp_write+0x636>
 800ee00:	797b      	ldrb	r3, [r7, #5]
 800ee02:	f003 0302 	and.w	r3, r3, #2
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10d      	bne.n	800ee26 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ee0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	899b      	ldrh	r3, [r3, #12]
 800ee10:	b29c      	uxth	r4, r3
 800ee12:	2008      	movs	r0, #8
 800ee14:	f7fa f844 	bl	8008ea0 <lwip_htons>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	4322      	orrs	r2, r4
 800ee22:	b292      	uxth	r2, r2
 800ee24:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e031      	b.n	800ee8e <tcp_write+0x69e>
          goto memerr;
 800ee2a:	bf00      	nop
 800ee2c:	e006      	b.n	800ee3c <tcp_write+0x64c>
            goto memerr;
 800ee2e:	bf00      	nop
 800ee30:	e004      	b.n	800ee3c <tcp_write+0x64c>
        goto memerr;
 800ee32:	bf00      	nop
 800ee34:	e002      	b.n	800ee3c <tcp_write+0x64c>
        goto memerr;
 800ee36:	bf00      	nop
 800ee38:	e000      	b.n	800ee3c <tcp_write+0x64c>
      goto memerr;
 800ee3a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	7e9b      	ldrb	r3, [r3, #26]
 800ee40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee44:	b2da      	uxtb	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ee4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <tcp_write+0x666>
    pbuf_free(concat_p);
 800ee50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ee52:	f7fb f9bf 	bl	800a1d4 <pbuf_free>
  }
  if (queue != NULL) {
 800ee56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <tcp_write+0x672>
    tcp_segs_free(queue);
 800ee5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee5e:	f7fc fcce 	bl	800b7fe <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00e      	beq.n	800ee8a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <tcp_write+0x69a>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d106      	bne.n	800ee8a <tcp_write+0x69a>
 800ee7c:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <tcp_write+0x6a8>)
 800ee7e:	f240 3202 	movw	r2, #770	; 0x302
 800ee82:	4906      	ldr	r1, [pc, #24]	; (800ee9c <tcp_write+0x6ac>)
 800ee84:	4806      	ldr	r0, [pc, #24]	; (800eea0 <tcp_write+0x6b0>)
 800ee86:	f005 f801 	bl	8013e8c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ee8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	375c      	adds	r7, #92	; 0x5c
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd90      	pop	{r4, r7, pc}
 800ee96:	bf00      	nop
 800ee98:	08016990 	.word	0x08016990
 800ee9c:	08016c74 	.word	0x08016c74
 800eea0:	080169f4 	.word	0x080169f4

0800eea4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b08a      	sub	sp, #40	; 0x28
 800eea8:	af02      	add	r7, sp, #8
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	f003 0303 	and.w	r3, r3, #3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <tcp_enqueue_flags+0x2c>
 800eec2:	4b6f      	ldr	r3, [pc, #444]	; (800f080 <tcp_enqueue_flags+0x1dc>)
 800eec4:	f240 321b 	movw	r2, #795	; 0x31b
 800eec8:	496e      	ldr	r1, [pc, #440]	; (800f084 <tcp_enqueue_flags+0x1e0>)
 800eeca:	486f      	ldr	r0, [pc, #444]	; (800f088 <tcp_enqueue_flags+0x1e4>)
 800eecc:	f004 ffde 	bl	8013e8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eed6:	2b08      	cmp	r3, #8
 800eed8:	d806      	bhi.n	800eee8 <tcp_enqueue_flags+0x44>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eee0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d90e      	bls.n	800ef06 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800eee8:	78fb      	ldrb	r3, [r7, #3]
 800eeea:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d109      	bne.n	800ef06 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7e9b      	ldrb	r3, [r3, #26]
 800eef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ef00:	f04f 33ff 	mov.w	r3, #4294967295
 800ef04:	e0b7      	b.n	800f076 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800ef06:	78fb      	ldrb	r3, [r7, #3]
 800ef08:	f003 0302 	and.w	r3, r3, #2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800ef10:	2301      	movs	r3, #1
 800ef12:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ef14:	7ffb      	ldrb	r3, [r7, #31]
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	f003 0304 	and.w	r3, r3, #4
 800ef1e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	2200      	movs	r2, #0
 800ef26:	4619      	mov	r1, r3
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f7fa fde1 	bl	8009af0 <pbuf_alloc>
 800ef2e:	6138      	str	r0, [r7, #16]
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d109      	bne.n	800ef4a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	7e9b      	ldrb	r3, [r3, #26]
 800ef3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef44:	f04f 33ff 	mov.w	r3, #4294967295
 800ef48:	e095      	b.n	800f076 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	895a      	ldrh	r2, [r3, #10]
 800ef4e:	7dfb      	ldrb	r3, [r7, #23]
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d206      	bcs.n	800ef64 <tcp_enqueue_flags+0xc0>
 800ef56:	4b4a      	ldr	r3, [pc, #296]	; (800f080 <tcp_enqueue_flags+0x1dc>)
 800ef58:	f240 3241 	movw	r2, #833	; 0x341
 800ef5c:	494b      	ldr	r1, [pc, #300]	; (800f08c <tcp_enqueue_flags+0x1e8>)
 800ef5e:	484a      	ldr	r0, [pc, #296]	; (800f088 <tcp_enqueue_flags+0x1e4>)
 800ef60:	f004 ff94 	bl	8013e8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ef68:	78fa      	ldrb	r2, [r7, #3]
 800ef6a:	7ffb      	ldrb	r3, [r7, #31]
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	460b      	mov	r3, r1
 800ef70:	6939      	ldr	r1, [r7, #16]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff fadc 	bl	800e530 <tcp_create_segment>
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d109      	bne.n	800ef94 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	7e9b      	ldrb	r3, [r3, #26]
 800ef84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ef8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef92:	e070      	b.n	800f076 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	f003 0303 	and.w	r3, r3, #3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <tcp_enqueue_flags+0x10a>
 800efa0:	4b37      	ldr	r3, [pc, #220]	; (800f080 <tcp_enqueue_flags+0x1dc>)
 800efa2:	f240 3249 	movw	r2, #841	; 0x349
 800efa6:	493a      	ldr	r1, [pc, #232]	; (800f090 <tcp_enqueue_flags+0x1ec>)
 800efa8:	4837      	ldr	r0, [pc, #220]	; (800f088 <tcp_enqueue_flags+0x1e4>)
 800efaa:	f004 ff6f 	bl	8013e8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	891b      	ldrh	r3, [r3, #8]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d006      	beq.n	800efc4 <tcp_enqueue_flags+0x120>
 800efb6:	4b32      	ldr	r3, [pc, #200]	; (800f080 <tcp_enqueue_flags+0x1dc>)
 800efb8:	f240 324a 	movw	r2, #842	; 0x34a
 800efbc:	4935      	ldr	r1, [pc, #212]	; (800f094 <tcp_enqueue_flags+0x1f0>)
 800efbe:	4832      	ldr	r0, [pc, #200]	; (800f088 <tcp_enqueue_flags+0x1e4>)
 800efc0:	f004 ff64 	bl	8013e8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d103      	bne.n	800efd4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	669a      	str	r2, [r3, #104]	; 0x68
 800efd2:	e00d      	b.n	800eff0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efd8:	61bb      	str	r3, [r7, #24]
 800efda:	e002      	b.n	800efe2 <tcp_enqueue_flags+0x13e>
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1f8      	bne.n	800efdc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800eff8:	78fb      	ldrb	r3, [r7, #3]
 800effa:	f003 0302 	and.w	r3, r3, #2
 800effe:	2b00      	cmp	r3, #0
 800f000:	d104      	bne.n	800f00c <tcp_enqueue_flags+0x168>
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	f003 0301 	and.w	r3, r3, #1
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f010:	1c5a      	adds	r2, r3, #1
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f016:	78fb      	ldrb	r3, [r7, #3]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d006      	beq.n	800f02e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7e9b      	ldrb	r3, [r3, #26]
 800f024:	f043 0320 	orr.w	r3, r3, #32
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	f7fb f968 	bl	800a308 <pbuf_clen>
 800f038:	4603      	mov	r3, r0
 800f03a:	461a      	mov	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f042:	4413      	add	r3, r2
 800f044:	b29a      	uxth	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00e      	beq.n	800f074 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d10a      	bne.n	800f074 <tcp_enqueue_flags+0x1d0>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f062:	2b00      	cmp	r3, #0
 800f064:	d106      	bne.n	800f074 <tcp_enqueue_flags+0x1d0>
 800f066:	4b06      	ldr	r3, [pc, #24]	; (800f080 <tcp_enqueue_flags+0x1dc>)
 800f068:	f240 326d 	movw	r2, #877	; 0x36d
 800f06c:	490a      	ldr	r1, [pc, #40]	; (800f098 <tcp_enqueue_flags+0x1f4>)
 800f06e:	4806      	ldr	r0, [pc, #24]	; (800f088 <tcp_enqueue_flags+0x1e4>)
 800f070:	f004 ff0c 	bl	8013e8c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3720      	adds	r7, #32
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	08016990 	.word	0x08016990
 800f084:	08016c94 	.word	0x08016c94
 800f088:	080169f4 	.word	0x080169f4
 800f08c:	08016cec 	.word	0x08016cec
 800f090:	08016d28 	.word	0x08016d28
 800f094:	08016d40 	.word	0x08016d40
 800f098:	08016d6c 	.word	0x08016d6c

0800f09c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f09c:	b590      	push	{r4, r7, lr}
 800f09e:	b08b      	sub	sp, #44	; 0x2c
 800f0a0:	af04      	add	r7, sp, #16
 800f0a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f0a8:	7dbb      	ldrb	r3, [r7, #22]
 800f0aa:	b29c      	uxth	r4, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7f9 ff03 	bl	8008ebc <lwip_htonl>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7ff f97b 	bl	800e3b8 <tcp_output_alloc_header>
 800f0c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7e9b      	ldrb	r3, [r3, #26]
 800f0ce:	f043 0303 	orr.w	r3, r3, #3
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f0d8:	f06f 0301 	mvn.w	r3, #1
 800f0dc:	e036      	b.n	800f14c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3304      	adds	r3, #4
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f002 fad8 	bl	8011698 <ip4_route>
 800f0e8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800f0f0:	23fc      	movs	r3, #252	; 0xfc
 800f0f2:	75fb      	strb	r3, [r7, #23]
 800f0f4:	e012      	b.n	800f11c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800f0f6:	6879      	ldr	r1, [r7, #4]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	1d18      	adds	r0, r3, #4
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7a9c      	ldrb	r4, [r3, #10]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	7a5b      	ldrb	r3, [r3, #9]
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	9202      	str	r2, [sp, #8]
 800f108:	2206      	movs	r2, #6
 800f10a:	9201      	str	r2, [sp, #4]
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	4623      	mov	r3, r4
 800f110:	4602      	mov	r2, r0
 800f112:	6938      	ldr	r0, [r7, #16]
 800f114:	f002 fc68 	bl	80119e8 <ip4_output_if>
 800f118:	4603      	mov	r3, r0
 800f11a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f11c:	6938      	ldr	r0, [r7, #16]
 800f11e:	f7fb f859 	bl	800a1d4 <pbuf_free>

  if (err != ERR_OK) {
 800f122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d007      	beq.n	800f13a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	7e9b      	ldrb	r3, [r3, #26]
 800f12e:	f043 0303 	orr.w	r3, r3, #3
 800f132:	b2da      	uxtb	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	769a      	strb	r2, [r3, #26]
 800f138:	e006      	b.n	800f148 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	7e9b      	ldrb	r3, [r3, #26]
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	b2da      	uxtb	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800f148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	371c      	adds	r7, #28
 800f150:	46bd      	mov	sp, r7
 800f152:	bd90      	pop	{r4, r7, pc}

0800f154 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f154:	b5b0      	push	{r4, r5, r7, lr}
 800f156:	b08a      	sub	sp, #40	; 0x28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	7d1b      	ldrb	r3, [r3, #20]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d106      	bne.n	800f172 <tcp_output+0x1e>
 800f164:	4b9b      	ldr	r3, [pc, #620]	; (800f3d4 <tcp_output+0x280>)
 800f166:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800f16a:	499b      	ldr	r1, [pc, #620]	; (800f3d8 <tcp_output+0x284>)
 800f16c:	489b      	ldr	r0, [pc, #620]	; (800f3dc <tcp_output+0x288>)
 800f16e:	f004 fe8d 	bl	8013e8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f172:	4b9b      	ldr	r3, [pc, #620]	; (800f3e0 <tcp_output+0x28c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d101      	bne.n	800f180 <tcp_output+0x2c>
    return ERR_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	e1cf      	b.n	800f520 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d203      	bcs.n	800f198 <tcp_output+0x44>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f196:	e002      	b.n	800f19e <tcp_output+0x4a>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f19e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1a4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7e9b      	ldrb	r3, [r3, #26]
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d017      	beq.n	800f1e2 <tcp_output+0x8e>
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00f      	beq.n	800f1d8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7f9 fe7c 	bl	8008ebc <lwip_htonl>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ce:	8912      	ldrh	r2, [r2, #8]
 800f1d0:	4413      	add	r3, r2
     (seg == NULL ||
 800f1d2:	69ba      	ldr	r2, [r7, #24]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d204      	bcs.n	800f1e2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7ff ff5f 	bl	800f09c <tcp_send_empty_ack>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	e19e      	b.n	800f520 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d007      	beq.n	800f1fe <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800f1ee:	e002      	b.n	800f1f6 <tcp_output+0xa2>
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	623b      	str	r3, [r7, #32]
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1f8      	bne.n	800f1f0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	3304      	adds	r3, #4
 800f202:	4618      	mov	r0, r3
 800f204:	f002 fa48 	bl	8011698 <ip4_route>
 800f208:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d102      	bne.n	800f216 <tcp_output+0xc2>
    return ERR_RTE;
 800f210:	f06f 0303 	mvn.w	r3, #3
 800f214:	e184      	b.n	800f520 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <tcp_output+0xd0>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d111      	bne.n	800f248 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d002      	beq.n	800f230 <tcp_output+0xdc>
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	3304      	adds	r3, #4
 800f22e:	e000      	b.n	800f232 <tcp_output+0xde>
 800f230:	2300      	movs	r3, #0
 800f232:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d102      	bne.n	800f240 <tcp_output+0xec>
      return ERR_RTE;
 800f23a:	f06f 0303 	mvn.w	r3, #3
 800f23e:	e16f      	b.n	800f520 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f000 813e 	beq.w	800f4cc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	f7f9 fe30 	bl	8008ebc <lwip_htonl>
 800f25c:	4602      	mov	r2, r0
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f266:	8912      	ldrh	r2, [r2, #8]
 800f268:	4413      	add	r3, r2
  if (seg != NULL &&
 800f26a:	69ba      	ldr	r2, [r7, #24]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	f080 812d 	bcs.w	800f4cc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 8129 	beq.w	800f4cc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f280:	461a      	mov	r2, r3
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	4293      	cmp	r3, r2
 800f286:	f040 8121 	bne.w	800f4cc <tcp_output+0x378>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f040 811c 	bne.w	800f4cc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f040 812b 	bne.w	800f4f6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800f2b0:	e121      	b.n	800f4f6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	899b      	ldrh	r3, [r3, #12]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7f9 fdf0 	bl	8008ea0 <lwip_htons>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f003 0304 	and.w	r3, r3, #4
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d006      	beq.n	800f2d8 <tcp_output+0x184>
 800f2ca:	4b42      	ldr	r3, [pc, #264]	; (800f3d4 <tcp_output+0x280>)
 800f2cc:	f240 4246 	movw	r2, #1094	; 0x446
 800f2d0:	4944      	ldr	r1, [pc, #272]	; (800f3e4 <tcp_output+0x290>)
 800f2d2:	4842      	ldr	r0, [pc, #264]	; (800f3dc <tcp_output+0x288>)
 800f2d4:	f004 fdda 	bl	8013e8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d01f      	beq.n	800f320 <tcp_output+0x1cc>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	7e9b      	ldrb	r3, [r3, #26]
 800f2e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d119      	bne.n	800f320 <tcp_output+0x1cc>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <tcp_output+0x1b8>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d110      	bne.n	800f320 <tcp_output+0x1cc>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f302:	891a      	ldrh	r2, [r3, #8]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f308:	429a      	cmp	r2, r3
 800f30a:	d209      	bcs.n	800f320 <tcp_output+0x1cc>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f312:	2b00      	cmp	r3, #0
 800f314:	d004      	beq.n	800f320 <tcp_output+0x1cc>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f31c:	2b08      	cmp	r3, #8
 800f31e:	d901      	bls.n	800f324 <tcp_output+0x1d0>
 800f320:	2301      	movs	r3, #1
 800f322:	e000      	b.n	800f326 <tcp_output+0x1d2>
 800f324:	2300      	movs	r3, #0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d106      	bne.n	800f338 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	7e9b      	ldrb	r3, [r3, #26]
 800f32e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f332:	2b00      	cmp	r3, #0
 800f334:	f000 80e1 	beq.w	800f4fa <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7d1b      	ldrb	r3, [r3, #20]
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d00d      	beq.n	800f35c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	899b      	ldrh	r3, [r3, #12]
 800f346:	b29c      	uxth	r4, r3
 800f348:	2010      	movs	r0, #16
 800f34a:	f7f9 fda9 	bl	8008ea0 <lwip_htons>
 800f34e:	4603      	mov	r3, r0
 800f350:	461a      	mov	r2, r3
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	4322      	orrs	r2, r4
 800f358:	b292      	uxth	r2, r2
 800f35a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f362:	f000 f8e1 	bl	800f528 <tcp_output_segment>
 800f366:	4603      	mov	r3, r0
 800f368:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d009      	beq.n	800f386 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	7e9b      	ldrb	r3, [r3, #26]
 800f376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	769a      	strb	r2, [r3, #26]
      return err;
 800f380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f384:	e0cc      	b.n	800f520 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	7d1b      	ldrb	r3, [r3, #20]
 800f392:	2b02      	cmp	r3, #2
 800f394:	d006      	beq.n	800f3a4 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	7e9b      	ldrb	r3, [r3, #26]
 800f39a:	f023 0303 	bic.w	r3, r3, #3
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7f9 fd86 	bl	8008ebc <lwip_htonl>
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b4:	891b      	ldrh	r3, [r3, #8]
 800f3b6:	461d      	mov	r5, r3
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	899b      	ldrh	r3, [r3, #12]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f9 fd6d 	bl	8008ea0 <lwip_htons>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f003 0303 	and.w	r3, r3, #3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00b      	beq.n	800f3e8 <tcp_output+0x294>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e00a      	b.n	800f3ea <tcp_output+0x296>
 800f3d4:	08016990 	.word	0x08016990
 800f3d8:	08016d94 	.word	0x08016d94
 800f3dc:	080169f4 	.word	0x080169f4
 800f3e0:	20010560 	.word	0x20010560
 800f3e4:	08016dbc 	.word	0x08016dbc
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	442b      	add	r3, r5
 800f3ec:	4423      	add	r3, r4
 800f3ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da02      	bge.n	800f402 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f404:	891b      	ldrh	r3, [r3, #8]
 800f406:	461c      	mov	r4, r3
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	899b      	ldrh	r3, [r3, #12]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	4618      	mov	r0, r3
 800f412:	f7f9 fd45 	bl	8008ea0 <lwip_htons>
 800f416:	4603      	mov	r3, r0
 800f418:	f003 0303 	and.w	r3, r3, #3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <tcp_output+0x2d0>
 800f420:	2301      	movs	r3, #1
 800f422:	e000      	b.n	800f426 <tcp_output+0x2d2>
 800f424:	2300      	movs	r3, #0
 800f426:	4423      	add	r3, r4
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d049      	beq.n	800f4c0 <tcp_output+0x36c>
      seg->next = NULL;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	2200      	movs	r2, #0
 800f430:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f436:	2b00      	cmp	r3, #0
 800f438:	d105      	bne.n	800f446 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	623b      	str	r3, [r7, #32]
 800f444:	e03f      	b.n	800f4c6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f9 fd35 	bl	8008ebc <lwip_htonl>
 800f452:	4604      	mov	r4, r0
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7f9 fd2e 	bl	8008ebc <lwip_htonl>
 800f460:	4603      	mov	r3, r0
 800f462:	1ae3      	subs	r3, r4, r3
 800f464:	2b00      	cmp	r3, #0
 800f466:	da24      	bge.n	800f4b2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	336c      	adds	r3, #108	; 0x6c
 800f46c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f46e:	e002      	b.n	800f476 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d011      	beq.n	800f4a2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	4618      	mov	r0, r3
 800f488:	f7f9 fd18 	bl	8008ebc <lwip_htonl>
 800f48c:	4604      	mov	r4, r0
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	4618      	mov	r0, r3
 800f496:	f7f9 fd11 	bl	8008ebc <lwip_htonl>
 800f49a:	4603      	mov	r3, r0
 800f49c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	dbe6      	blt.n	800f470 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4ae:	601a      	str	r2, [r3, #0]
 800f4b0:	e009      	b.n	800f4c6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	623b      	str	r3, [r7, #32]
 800f4be:	e002      	b.n	800f4c6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f4c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4c2:	f7fc f9b0 	bl	800b826 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d015      	beq.n	800f4fe <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7f9 fcef 	bl	8008ebc <lwip_htonl>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e8:	8912      	ldrh	r2, [r2, #8]
 800f4ea:	4413      	add	r3, r2
  while (seg != NULL &&
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	f4bf aedf 	bcs.w	800f2b2 <tcp_output+0x15e>
  }
output_done:
 800f4f4:	e003      	b.n	800f4fe <tcp_output+0x3aa>
    goto output_done;
 800f4f6:	bf00      	nop
 800f4f8:	e002      	b.n	800f500 <tcp_output+0x3ac>
      break;
 800f4fa:	bf00      	nop
 800f4fc:	e000      	b.n	800f500 <tcp_output+0x3ac>
output_done:
 800f4fe:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f504:	2b00      	cmp	r3, #0
 800f506:	d103      	bne.n	800f510 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	7e9b      	ldrb	r3, [r3, #26]
 800f514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3728      	adds	r7, #40	; 0x28
 800f524:	46bd      	mov	sp, r7
 800f526:	bdb0      	pop	{r4, r5, r7, pc}

0800f528 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f528:	b5b0      	push	{r4, r5, r7, lr}
 800f52a:	b08c      	sub	sp, #48	; 0x30
 800f52c:	af04      	add	r7, sp, #16
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	89db      	ldrh	r3, [r3, #14]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d001      	beq.n	800f542 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800f53e:	2300      	movs	r3, #0
 800f540:	e08b      	b.n	800f65a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	68dc      	ldr	r4, [r3, #12]
 800f54a:	4610      	mov	r0, r2
 800f54c:	f7f9 fcb6 	bl	8008ebc <lwip_htonl>
 800f550:	4603      	mov	r3, r0
 800f552:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68dc      	ldr	r4, [r3, #12]
 800f55c:	4610      	mov	r0, r2
 800f55e:	f7f9 fc9f 	bl	8008ea0 <lwip_htons>
 800f562:	4603      	mov	r3, r0
 800f564:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f56e:	441a      	add	r2, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	3314      	adds	r3, #20
 800f57a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	7a9b      	ldrb	r3, [r3, #10]
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	2b00      	cmp	r3, #0
 800f586:	d014      	beq.n	800f5b2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	3304      	adds	r3, #4
 800f58c:	4619      	mov	r1, r3
 800f58e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f592:	f7fc fc73 	bl	800be7c <tcp_eff_send_mss_impl>
 800f596:	4603      	mov	r3, r0
 800f598:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f59a:	8b7b      	ldrh	r3, [r7, #26]
 800f59c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7f9 fc8b 	bl	8008ebc <lwip_htonl>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	da02      	bge.n	800f5c2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10c      	bne.n	800f5e4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800f5ca:	4b26      	ldr	r3, [pc, #152]	; (800f664 <tcp_output_segment+0x13c>)
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7f9 fc6f 	bl	8008ebc <lwip_htonl>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	8959      	ldrh	r1, [r3, #10]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	8b3a      	ldrh	r2, [r7, #24]
 800f600:	1a8a      	subs	r2, r1, r2
 800f602:	b292      	uxth	r2, r2
 800f604:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	8919      	ldrh	r1, [r3, #8]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	8b3a      	ldrh	r2, [r7, #24]
 800f612:	1a8a      	subs	r2, r1, r2
 800f614:	b292      	uxth	r2, r2
 800f616:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	68d2      	ldr	r2, [r2, #12]
 800f620:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	2200      	movs	r2, #0
 800f628:	741a      	strb	r2, [r3, #16]
 800f62a:	2200      	movs	r2, #0
 800f62c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6858      	ldr	r0, [r3, #4]
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	1d1c      	adds	r4, r3, #4
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	7a9d      	ldrb	r5, [r3, #10]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	7a5b      	ldrb	r3, [r3, #9]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	9202      	str	r2, [sp, #8]
 800f644:	2206      	movs	r2, #6
 800f646:	9201      	str	r2, [sp, #4]
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	462b      	mov	r3, r5
 800f64c:	4622      	mov	r2, r4
 800f64e:	f002 f9cb 	bl	80119e8 <ip4_output_if>
 800f652:	4603      	mov	r3, r0
 800f654:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800f656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3720      	adds	r7, #32
 800f65e:	46bd      	mov	sp, r7
 800f660:	bdb0      	pop	{r4, r5, r7, pc}
 800f662:	bf00      	nop
 800f664:	20010550 	.word	0x20010550

0800f668 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08c      	sub	sp, #48	; 0x30
 800f66c:	af04      	add	r7, sp, #16
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800f676:	2200      	movs	r2, #0
 800f678:	2114      	movs	r1, #20
 800f67a:	2001      	movs	r0, #1
 800f67c:	f7fa fa38 	bl	8009af0 <pbuf_alloc>
 800f680:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d05b      	beq.n	800f740 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	895b      	ldrh	r3, [r3, #10]
 800f68c:	2b13      	cmp	r3, #19
 800f68e:	d806      	bhi.n	800f69e <tcp_rst+0x36>
 800f690:	4b2d      	ldr	r3, [pc, #180]	; (800f748 <tcp_rst+0xe0>)
 800f692:	f240 524d 	movw	r2, #1357	; 0x54d
 800f696:	492d      	ldr	r1, [pc, #180]	; (800f74c <tcp_rst+0xe4>)
 800f698:	482d      	ldr	r0, [pc, #180]	; (800f750 <tcp_rst+0xe8>)
 800f69a:	f004 fbf7 	bl	8013e8c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800f6a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f9 fbfa 	bl	8008ea0 <lwip_htons>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800f6b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7f9 fbf2 	bl	8008ea0 <lwip_htons>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	461a      	mov	r2, r3
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7f9 fbf9 	bl	8008ebc <lwip_htonl>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800f6d0:	68b8      	ldr	r0, [r7, #8]
 800f6d2:	f7f9 fbf3 	bl	8008ebc <lwip_htonl>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800f6dc:	f245 0014 	movw	r0, #20500	; 0x5014
 800f6e0:	f7f9 fbde 	bl	8008ea0 <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f042 0208 	orr.w	r2, r2, #8
 800f6f4:	739a      	strb	r2, [r3, #14]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f6fc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	2200      	movs	r2, #0
 800f702:	741a      	strb	r2, [r3, #16]
 800f704:	2200      	movs	r2, #0
 800f706:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	2200      	movs	r2, #0
 800f70c:	749a      	strb	r2, [r3, #18]
 800f70e:	2200      	movs	r2, #0
 800f710:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800f712:	6838      	ldr	r0, [r7, #0]
 800f714:	f001 ffc0 	bl	8011698 <ip4_route>
 800f718:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00b      	beq.n	800f738 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	9302      	str	r3, [sp, #8]
 800f724:	2306      	movs	r3, #6
 800f726:	9301      	str	r3, [sp, #4]
 800f728:	2300      	movs	r3, #0
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	23ff      	movs	r3, #255	; 0xff
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	6879      	ldr	r1, [r7, #4]
 800f732:	69f8      	ldr	r0, [r7, #28]
 800f734:	f002 f958 	bl	80119e8 <ip4_output_if>
  }
  pbuf_free(p);
 800f738:	69f8      	ldr	r0, [r7, #28]
 800f73a:	f7fa fd4b 	bl	800a1d4 <pbuf_free>
 800f73e:	e000      	b.n	800f742 <tcp_rst+0xda>
    return;
 800f740:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f742:	3720      	adds	r7, #32
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08016990 	.word	0x08016990
 800f74c:	080169c4 	.word	0x080169c4
 800f750:	080169f4 	.word	0x080169f4

0800f754 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d029      	beq.n	800f7b8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	e002      	b.n	800f772 <tcp_rexmit_rto+0x1e>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	60fb      	str	r3, [r7, #12]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1f8      	bne.n	800f76c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f796:	2bff      	cmp	r3, #255	; 0xff
 800f798:	d007      	beq.n	800f7aa <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	b2da      	uxtb	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fccf 	bl	800f154 <tcp_output>
 800f7b6:	e000      	b.n	800f7ba <tcp_rexmit_rto+0x66>
    return;
 800f7b8:	bf00      	nop
}
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f7c0:	b590      	push	{r4, r7, lr}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d043      	beq.n	800f858 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7d4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3368      	adds	r3, #104	; 0x68
 800f7e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f7e4:	e002      	b.n	800f7ec <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d011      	beq.n	800f818 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f9 fb5d 	bl	8008ebc <lwip_htonl>
 800f802:	4604      	mov	r4, r0
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f9 fb56 	bl	8008ebc <lwip_htonl>
 800f810:	4603      	mov	r3, r0
 800f812:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f814:	2b00      	cmp	r3, #0
 800f816:	dbe6      	blt.n	800f7e6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d103      	bne.n	800f836 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f83c:	2bff      	cmp	r3, #255	; 0xff
 800f83e:	d007      	beq.n	800f850 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f846:	3301      	adds	r3, #1
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	635a      	str	r2, [r3, #52]	; 0x34
 800f856:	e000      	b.n	800f85a <tcp_rexmit+0x9a>
    return;
 800f858:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd90      	pop	{r4, r7, pc}

0800f860 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d04a      	beq.n	800f906 <tcp_rexmit_fast+0xa6>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	7e9b      	ldrb	r3, [r3, #26]
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d144      	bne.n	800f906 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff ff9f 	bl	800f7c0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f88e:	429a      	cmp	r2, r3
 800f890:	d207      	bcs.n	800f8a2 <tcp_rexmit_fast+0x42>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f898:	0fda      	lsrs	r2, r3, #31
 800f89a:	4413      	add	r3, r2
 800f89c:	105b      	asrs	r3, r3, #1
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	e006      	b.n	800f8b0 <tcp_rexmit_fast+0x50>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8a8:	0fda      	lsrs	r2, r3, #31
 800f8aa:	4413      	add	r3, r2
 800f8ac:	105b      	asrs	r3, r3, #1
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f8bc:	461a      	mov	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d206      	bcs.n	800f8d6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	0049      	lsls	r1, r1, #1
 800f8e4:	440b      	add	r3, r1
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	4413      	add	r3, r2
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7e9b      	ldrb	r3, [r3, #26]
 800f8f6:	f043 0304 	orr.w	r3, r3, #4
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800f906:	bf00      	nop
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b08a      	sub	sp, #40	; 0x28
 800f912:	af04      	add	r7, sp, #16
 800f914:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f91a:	3b01      	subs	r3, #1
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f9 facd 	bl	8008ebc <lwip_htonl>
 800f922:	4603      	mov	r3, r0
 800f924:	2200      	movs	r2, #0
 800f926:	2100      	movs	r1, #0
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7fe fd45 	bl	800e3b8 <tcp_output_alloc_header>
 800f92e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d102      	bne.n	800f93c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f936:	f04f 33ff 	mov.w	r3, #4294967295
 800f93a:	e021      	b.n	800f980 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3304      	adds	r3, #4
 800f940:	4618      	mov	r0, r3
 800f942:	f001 fea9 	bl	8011698 <ip4_route>
 800f946:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d102      	bne.n	800f954 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800f94e:	23fc      	movs	r3, #252	; 0xfc
 800f950:	75fb      	strb	r3, [r7, #23]
 800f952:	e010      	b.n	800f976 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	1d1a      	adds	r2, r3, #4
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7a98      	ldrb	r0, [r3, #10]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	9302      	str	r3, [sp, #8]
 800f962:	2306      	movs	r3, #6
 800f964:	9301      	str	r3, [sp, #4]
 800f966:	2300      	movs	r3, #0
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	4603      	mov	r3, r0
 800f96c:	6938      	ldr	r0, [r7, #16]
 800f96e:	f002 f83b 	bl	80119e8 <ip4_output_if>
 800f972:	4603      	mov	r3, r0
 800f974:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f976:	6938      	ldr	r0, [r7, #16]
 800f978:	f7fa fc2c 	bl	800a1d4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f980:	4618      	mov	r0, r3
 800f982:	3718      	adds	r7, #24
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f988:	b590      	push	{r4, r7, lr}
 800f98a:	b08f      	sub	sp, #60	; 0x3c
 800f98c:	af04      	add	r7, sp, #16
 800f98e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f994:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800f996:	6a3b      	ldr	r3, [r7, #32]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9a0:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	e085      	b.n	800fab8 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	899b      	ldrh	r3, [r3, #12]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f9 fa73 	bl	8008ea0 <lwip_htons>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	f003 0301 	and.w	r3, r3, #1
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d005      	beq.n	800f9d0 <tcp_zero_window_probe+0x48>
 800f9c4:	6a3b      	ldr	r3, [r7, #32]
 800f9c6:	891b      	ldrh	r3, [r3, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <tcp_zero_window_probe+0x48>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e000      	b.n	800f9d2 <tcp_zero_window_probe+0x4a>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f9d4:	7ffb      	ldrb	r3, [r7, #31]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	bf0c      	ite	eq
 800f9da:	2301      	moveq	r3, #1
 800f9dc:	2300      	movne	r3, #0
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	8bba      	ldrh	r2, [r7, #28]
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7fe fce3 	bl	800e3b8 <tcp_output_alloc_header>
 800f9f2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f9f4:	69bb      	ldr	r3, [r7, #24]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fe:	e05b      	b.n	800fab8 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fa06:	7ffb      	ldrb	r3, [r7, #31]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00e      	beq.n	800fa2a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa16:	b29c      	uxth	r4, r3
 800fa18:	2011      	movs	r0, #17
 800fa1a:	f7f9 fa41 	bl	8008ea0 <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4323      	orrs	r3, r4
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	819a      	strh	r2, [r3, #12]
 800fa28:	e010      	b.n	800fa4c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	3314      	adds	r3, #20
 800fa30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	6858      	ldr	r0, [r3, #4]
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	891a      	ldrh	r2, [r3, #8]
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	891b      	ldrh	r3, [r3, #8]
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	2201      	movs	r2, #1
 800fa46:	6939      	ldr	r1, [r7, #16]
 800fa48:	f7fa fdd0 	bl	800a5ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fa4c:	6a3b      	ldr	r3, [r7, #32]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7f9 fa32 	bl	8008ebc <lwip_htonl>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	da02      	bge.n	800fa70 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	3304      	adds	r3, #4
 800fa74:	4618      	mov	r0, r3
 800fa76:	f001 fe0f 	bl	8011698 <ip4_route>
 800fa7a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d103      	bne.n	800fa8a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800fa82:	23fc      	movs	r3, #252	; 0xfc
 800fa84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa88:	e011      	b.n	800faae <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	1d1a      	adds	r2, r3, #4
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	7a98      	ldrb	r0, [r3, #10]
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	9302      	str	r3, [sp, #8]
 800fa98:	2306      	movs	r3, #6
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	4603      	mov	r3, r0
 800faa2:	69b8      	ldr	r0, [r7, #24]
 800faa4:	f001 ffa0 	bl	80119e8 <ip4_output_if>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800faae:	69b8      	ldr	r0, [r7, #24]
 800fab0:	f7fa fb90 	bl	800a1d4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fab8:	4618      	mov	r0, r3
 800faba:	372c      	adds	r7, #44	; 0x2c
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd90      	pop	{r4, r7, pc}

0800fac0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fac8:	f7fa fe12 	bl	800a6f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800facc:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <tcpip_tcp_timer+0x38>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d103      	bne.n	800fadc <tcpip_tcp_timer+0x1c>
 800fad4:	4b09      	ldr	r3, [pc, #36]	; (800fafc <tcpip_tcp_timer+0x3c>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d005      	beq.n	800fae8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fadc:	2200      	movs	r2, #0
 800fade:	4908      	ldr	r1, [pc, #32]	; (800fb00 <tcpip_tcp_timer+0x40>)
 800fae0:	20fa      	movs	r0, #250	; 0xfa
 800fae2:	f000 f86f 	bl	800fbc4 <sys_timeout>
 800fae6:	e002      	b.n	800faee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fae8:	4b06      	ldr	r3, [pc, #24]	; (800fb04 <tcpip_tcp_timer+0x44>)
 800faea:	2200      	movs	r2, #0
 800faec:	601a      	str	r2, [r3, #0]
  }
}
 800faee:	bf00      	nop
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	2001054c 	.word	0x2001054c
 800fafc:	2001055c 	.word	0x2001055c
 800fb00:	0800fac1 	.word	0x0800fac1
 800fb04:	2000c61c 	.word	0x2000c61c

0800fb08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fb0c:	4b0a      	ldr	r3, [pc, #40]	; (800fb38 <tcp_timer_needed+0x30>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10f      	bne.n	800fb34 <tcp_timer_needed+0x2c>
 800fb14:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <tcp_timer_needed+0x34>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d103      	bne.n	800fb24 <tcp_timer_needed+0x1c>
 800fb1c:	4b08      	ldr	r3, [pc, #32]	; (800fb40 <tcp_timer_needed+0x38>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d007      	beq.n	800fb34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fb24:	4b04      	ldr	r3, [pc, #16]	; (800fb38 <tcp_timer_needed+0x30>)
 800fb26:	2201      	movs	r2, #1
 800fb28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4905      	ldr	r1, [pc, #20]	; (800fb44 <tcp_timer_needed+0x3c>)
 800fb2e:	20fa      	movs	r0, #250	; 0xfa
 800fb30:	f000 f848 	bl	800fbc4 <sys_timeout>
  }
}
 800fb34:	bf00      	nop
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	2000c61c 	.word	0x2000c61c
 800fb3c:	2001054c 	.word	0x2001054c
 800fb40:	2001055c 	.word	0x2001055c
 800fb44:	0800fac1 	.word	0x0800fac1

0800fb48 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	4903      	ldr	r1, [pc, #12]	; (800fb70 <cyclic_timer+0x28>)
 800fb62:	4618      	mov	r0, r3
 800fb64:	f000 f82e 	bl	800fbc4 <sys_timeout>
}
 800fb68:	bf00      	nop
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	0800fb49 	.word	0x0800fb49

0800fb74 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	607b      	str	r3, [r7, #4]
 800fb7e:	e00e      	b.n	800fb9e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800fb80:	4a0d      	ldr	r2, [pc, #52]	; (800fbb8 <sys_timeouts_init+0x44>)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	00db      	lsls	r3, r3, #3
 800fb8c:	4a0a      	ldr	r2, [pc, #40]	; (800fbb8 <sys_timeouts_init+0x44>)
 800fb8e:	4413      	add	r3, r2
 800fb90:	461a      	mov	r2, r3
 800fb92:	490a      	ldr	r1, [pc, #40]	; (800fbbc <sys_timeouts_init+0x48>)
 800fb94:	f000 f816 	bl	800fbc4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	607b      	str	r3, [r7, #4]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d9ed      	bls.n	800fb80 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800fba4:	f003 fc18 	bl	80133d8 <sys_now>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <sys_timeouts_init+0x4c>)
 800fbac:	601a      	str	r2, [r3, #0]
}
 800fbae:	bf00      	nop
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	08017774 	.word	0x08017774
 800fbbc:	0800fb49 	.word	0x0800fb49
 800fbc0:	2000c618 	.word	0x2000c618

0800fbc4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b088      	sub	sp, #32
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fbd0:	200a      	movs	r0, #10
 800fbd2:	f7f9 fd53 	bl	800967c <memp_malloc>
 800fbd6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d10a      	bne.n	800fbf4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 8084 	bne.w	800fcee <sys_timeout+0x12a>
 800fbe6:	4b44      	ldr	r3, [pc, #272]	; (800fcf8 <sys_timeout+0x134>)
 800fbe8:	22d4      	movs	r2, #212	; 0xd4
 800fbea:	4944      	ldr	r1, [pc, #272]	; (800fcfc <sys_timeout+0x138>)
 800fbec:	4844      	ldr	r0, [pc, #272]	; (800fd00 <sys_timeout+0x13c>)
 800fbee:	f004 f94d 	bl	8013e8c <iprintf>
    return;
 800fbf2:	e07c      	b.n	800fcee <sys_timeout+0x12a>
  }

  now = sys_now();
 800fbf4:	f003 fbf0 	bl	80133d8 <sys_now>
 800fbf8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800fbfa:	4b42      	ldr	r3, [pc, #264]	; (800fd04 <sys_timeout+0x140>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <sys_timeout+0x4a>
    diff = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800fc06:	4a40      	ldr	r2, [pc, #256]	; (800fd08 <sys_timeout+0x144>)
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	e004      	b.n	800fc18 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800fc0e:	4b3e      	ldr	r3, [pc, #248]	; (800fd08 <sys_timeout+0x144>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	693a      	ldr	r2, [r7, #16]
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	69bb      	ldr	r3, [r7, #24]
 800fc2e:	441a      	add	r2, r3
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fc34:	4b33      	ldr	r3, [pc, #204]	; (800fd04 <sys_timeout+0x140>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d103      	bne.n	800fc44 <sys_timeout+0x80>
    next_timeout = timeout;
 800fc3c:	4a31      	ldr	r2, [pc, #196]	; (800fd04 <sys_timeout+0x140>)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6013      	str	r3, [r2, #0]
    return;
 800fc42:	e055      	b.n	800fcf0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800fc44:	4b2f      	ldr	r3, [pc, #188]	; (800fd04 <sys_timeout+0x140>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d20f      	bcs.n	800fc70 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800fc50:	4b2c      	ldr	r3, [pc, #176]	; (800fd04 <sys_timeout+0x140>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6859      	ldr	r1, [r3, #4]
 800fc56:	4b2b      	ldr	r3, [pc, #172]	; (800fd04 <sys_timeout+0x140>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	1a8a      	subs	r2, r1, r2
 800fc5e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800fc60:	4b28      	ldr	r3, [pc, #160]	; (800fd04 <sys_timeout+0x140>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fc68:	4a26      	ldr	r2, [pc, #152]	; (800fd04 <sys_timeout+0x140>)
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	e03f      	b.n	800fcf0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fc70:	4b24      	ldr	r3, [pc, #144]	; (800fd04 <sys_timeout+0x140>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	61fb      	str	r3, [r7, #28]
 800fc76:	e036      	b.n	800fce6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	1ad2      	subs	r2, r2, r3
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d006      	beq.n	800fc9c <sys_timeout+0xd8>
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d921      	bls.n	800fce0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d009      	beq.n	800fcb8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6859      	ldr	r1, [r3, #4]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	685a      	ldr	r2, [r3, #4]
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	1a8a      	subs	r2, r1, r2
 800fcb4:	605a      	str	r2, [r3, #4]
 800fcb6:	e00b      	b.n	800fcd0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d206      	bcs.n	800fcd0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800fcc2:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <sys_timeout+0x140>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	441a      	add	r2, r3
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	601a      	str	r2, [r3, #0]
        break;
 800fcde:	e007      	b.n	800fcf0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	61fb      	str	r3, [r7, #28]
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1c5      	bne.n	800fc78 <sys_timeout+0xb4>
 800fcec:	e000      	b.n	800fcf0 <sys_timeout+0x12c>
    return;
 800fcee:	bf00      	nop
      }
    }
  }
}
 800fcf0:	3720      	adds	r7, #32
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	08016dd4 	.word	0x08016dd4
 800fcfc:	08016e08 	.word	0x08016e08
 800fd00:	08016e48 	.word	0x08016e48
 800fd04:	2000c614 	.word	0x2000c614
 800fd08:	2000c618 	.word	0x2000c618

0800fd0c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800fd12:	4b24      	ldr	r3, [pc, #144]	; (800fda4 <sys_check_timeouts+0x98>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d03f      	beq.n	800fd9a <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800fd1a:	f003 fb5d 	bl	80133d8 <sys_now>
 800fd1e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800fd20:	4b21      	ldr	r3, [pc, #132]	; (800fda8 <sys_check_timeouts+0x9c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800fd2e:	4b1d      	ldr	r3, [pc, #116]	; (800fda4 <sys_check_timeouts+0x98>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d02c      	beq.n	800fd94 <sys_check_timeouts+0x88>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d327      	bcc.n	800fd94 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800fd44:	2301      	movs	r3, #1
 800fd46:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b16      	ldr	r3, [pc, #88]	; (800fda8 <sys_check_timeouts+0x9c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4413      	add	r3, r2
 800fd52:	4a15      	ldr	r2, [pc, #84]	; (800fda8 <sys_check_timeouts+0x9c>)
 800fd54:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a0f      	ldr	r2, [pc, #60]	; (800fda4 <sys_check_timeouts+0x98>)
 800fd66:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	689b      	ldr	r3, [r3, #8]
 800fd6c:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fd74:	68b9      	ldr	r1, [r7, #8]
 800fd76:	200a      	movs	r0, #10
 800fd78:	f7f9 fcd2 	bl	8009720 <memp_free>
        if (handler != NULL) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d008      	beq.n	800fd94 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800fd82:	480a      	ldr	r0, [pc, #40]	; (800fdac <sys_check_timeouts+0xa0>)
 800fd84:	f002 ff84 	bl	8012c90 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6838      	ldr	r0, [r7, #0]
 800fd8c:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800fd8e:	4807      	ldr	r0, [pc, #28]	; (800fdac <sys_check_timeouts+0xa0>)
 800fd90:	f002 ff8d 	bl	8012cae <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800fd94:	7cfb      	ldrb	r3, [r7, #19]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1c7      	bne.n	800fd2a <sys_check_timeouts+0x1e>
  }
}
 800fd9a:	bf00      	nop
 800fd9c:	3718      	adds	r7, #24
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	2000c614 	.word	0x2000c614
 800fda8:	2000c618 	.word	0x2000c618
 800fdac:	2000ce38 	.word	0x2000ce38

0800fdb0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800fdb6:	4b0f      	ldr	r3, [pc, #60]	; (800fdf4 <sys_timeouts_sleeptime+0x44>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800fdbe:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc2:	e013      	b.n	800fdec <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800fdc4:	f003 fb08 	bl	80133d8 <sys_now>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	4b0b      	ldr	r3, [pc, #44]	; (800fdf8 <sys_timeouts_sleeptime+0x48>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800fdd2:	4b08      	ldr	r3, [pc, #32]	; (800fdf4 <sys_timeouts_sleeptime+0x44>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d901      	bls.n	800fde2 <sys_timeouts_sleeptime+0x32>
    return 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	e004      	b.n	800fdec <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800fde2:	4b04      	ldr	r3, [pc, #16]	; (800fdf4 <sys_timeouts_sleeptime+0x44>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	1ad3      	subs	r3, r2, r3
  }
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	2000c614 	.word	0x2000c614
 800fdf8:	2000c618 	.word	0x2000c618

0800fdfc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800fe06:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <sys_timeouts_mbox_fetch+0x48>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d105      	bne.n	800fe1a <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fe0e:	2200      	movs	r2, #0
 800fe10:	6839      	ldr	r1, [r7, #0]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f002 fe07 	bl	8012a26 <sys_arch_mbox_fetch>
    return;
 800fe18:	e011      	b.n	800fe3e <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800fe1a:	f7ff ffc9 	bl	800fdb0 <sys_timeouts_sleeptime>
 800fe1e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d008      	beq.n	800fe38 <sys_timeouts_mbox_fetch+0x3c>
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	6839      	ldr	r1, [r7, #0]
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f002 fdfb 	bl	8012a26 <sys_arch_mbox_fetch>
 800fe30:	4603      	mov	r3, r0
 800fe32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe36:	d102      	bne.n	800fe3e <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fe38:	f7ff ff68 	bl	800fd0c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fe3c:	e7e3      	b.n	800fe06 <sys_timeouts_mbox_fetch+0xa>
  }
}
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	2000c614 	.word	0x2000c614

0800fe48 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800fe4c:	bf00      	nop
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr
	...

0800fe58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fe62:	4b17      	ldr	r3, [pc, #92]	; (800fec0 <udp_new_port+0x68>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	b291      	uxth	r1, r2
 800fe6a:	4a15      	ldr	r2, [pc, #84]	; (800fec0 <udp_new_port+0x68>)
 800fe6c:	8011      	strh	r1, [r2, #0]
 800fe6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d103      	bne.n	800fe7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fe76:	4b12      	ldr	r3, [pc, #72]	; (800fec0 <udp_new_port+0x68>)
 800fe78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fe7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe7e:	4b11      	ldr	r3, [pc, #68]	; (800fec4 <udp_new_port+0x6c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	603b      	str	r3, [r7, #0]
 800fe84:	e011      	b.n	800feaa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	8a5a      	ldrh	r2, [r3, #18]
 800fe8a:	4b0d      	ldr	r3, [pc, #52]	; (800fec0 <udp_new_port+0x68>)
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d108      	bne.n	800fea4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fe92:	88fb      	ldrh	r3, [r7, #6]
 800fe94:	3301      	adds	r3, #1
 800fe96:	80fb      	strh	r3, [r7, #6]
 800fe98:	88fb      	ldrh	r3, [r7, #6]
 800fe9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe9e:	d3e0      	bcc.n	800fe62 <udp_new_port+0xa>
        return 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	e007      	b.n	800feb4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	603b      	str	r3, [r7, #0]
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1ea      	bne.n	800fe86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800feb0:	4b03      	ldr	r3, [pc, #12]	; (800fec0 <udp_new_port+0x68>)
 800feb2:	881b      	ldrh	r3, [r3, #0]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	20000010 	.word	0x20000010
 800fec4:	20010564 	.word	0x20010564

0800fec8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	4613      	mov	r3, r2
 800fed4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d018      	beq.n	800ff0e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d013      	beq.n	800ff0a <udp_input_local_match+0x42>
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d00f      	beq.n	800ff0a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800feea:	4b14      	ldr	r3, [pc, #80]	; (800ff3c <udp_input_local_match+0x74>)
 800feec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800feee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef2:	d00a      	beq.n	800ff0a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	4b10      	ldr	r3, [pc, #64]	; (800ff3c <udp_input_local_match+0x74>)
 800fefa:	695b      	ldr	r3, [r3, #20]
 800fefc:	405a      	eors	r2, r3
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	3308      	adds	r3, #8
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d110      	bne.n	800ff2c <udp_input_local_match+0x64>
          return 1;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e00f      	b.n	800ff2e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d009      	beq.n	800ff28 <udp_input_local_match+0x60>
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d005      	beq.n	800ff28 <udp_input_local_match+0x60>
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	4b06      	ldr	r3, [pc, #24]	; (800ff3c <udp_input_local_match+0x74>)
 800ff22:	695b      	ldr	r3, [r3, #20]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d101      	bne.n	800ff2c <udp_input_local_match+0x64>
      return 1;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e000      	b.n	800ff2e <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3714      	adds	r7, #20
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	2000ce3c 	.word	0x2000ce3c

0800ff40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ff40:	b590      	push	{r4, r7, lr}
 800ff42:	b08d      	sub	sp, #52	; 0x34
 800ff44:	af02      	add	r7, sp, #8
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	895b      	ldrh	r3, [r3, #10]
 800ff52:	2b07      	cmp	r3, #7
 800ff54:	d803      	bhi.n	800ff5e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7fa f93c 	bl	800a1d4 <pbuf_free>
    goto end;
 800ff5c:	e0c6      	b.n	80100ec <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ff64:	4b63      	ldr	r3, [pc, #396]	; (80100f4 <udp_input+0x1b4>)
 800ff66:	695a      	ldr	r2, [r3, #20]
 800ff68:	4b62      	ldr	r3, [pc, #392]	; (80100f4 <udp_input+0x1b4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	4610      	mov	r0, r2
 800ff70:	f001 fe0c 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 800ff74:	4603      	mov	r3, r0
 800ff76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	881b      	ldrh	r3, [r3, #0]
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f8 ff8e 	bl	8008ea0 <lwip_htons>
 800ff84:	4603      	mov	r3, r0
 800ff86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	885b      	ldrh	r3, [r3, #2]
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7f8 ff86 	bl	8008ea0 <lwip_htons>
 800ff94:	4603      	mov	r3, r0
 800ff96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffa4:	4b54      	ldr	r3, [pc, #336]	; (80100f8 <udp_input+0x1b8>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	627b      	str	r3, [r7, #36]	; 0x24
 800ffaa:	e03b      	b.n	8010024 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ffac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffae:	8a5b      	ldrh	r3, [r3, #18]
 800ffb0:	89fa      	ldrh	r2, [r7, #14]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d131      	bne.n	801001a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ffb6:	7cfb      	ldrb	r3, [r7, #19]
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6839      	ldr	r1, [r7, #0]
 800ffbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffbe:	f7ff ff83 	bl	800fec8 <udp_input_local_match>
 800ffc2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d028      	beq.n	801001a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffca:	7c1b      	ldrb	r3, [r3, #16]
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d104      	bne.n	800ffde <udp_input+0x9e>
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d101      	bne.n	800ffde <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	8a9b      	ldrh	r3, [r3, #20]
 800ffe2:	8a3a      	ldrh	r2, [r7, #16]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d118      	bne.n	801001a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d005      	beq.n	800fffc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	4b3f      	ldr	r3, [pc, #252]	; (80100f4 <udp_input+0x1b4>)
 800fff6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d10e      	bne.n	801001a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fffc:	6a3b      	ldr	r3, [r7, #32]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d014      	beq.n	801002c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	68da      	ldr	r2, [r3, #12]
 8010006:	6a3b      	ldr	r3, [r7, #32]
 8010008:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801000a:	4b3b      	ldr	r3, [pc, #236]	; (80100f8 <udp_input+0x1b8>)
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010010:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010012:	4a39      	ldr	r2, [pc, #228]	; (80100f8 <udp_input+0x1b8>)
 8010014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010016:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010018:	e008      	b.n	801002c <udp_input+0xec>
      }
    }

    prev = pcb;
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	627b      	str	r3, [r7, #36]	; 0x24
 8010024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1c0      	bne.n	800ffac <udp_input+0x6c>
 801002a:	e000      	b.n	801002e <udp_input+0xee>
        break;
 801002c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801002e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010030:	2b00      	cmp	r3, #0
 8010032:	d101      	bne.n	8010038 <udp_input+0xf8>
    pcb = uncon_pcb;
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	2b00      	cmp	r3, #0
 801003c:	d002      	beq.n	8010044 <udp_input+0x104>
    for_us = 1;
 801003e:	2301      	movs	r3, #1
 8010040:	76fb      	strb	r3, [r7, #27]
 8010042:	e00a      	b.n	801005a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	3304      	adds	r3, #4
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	4b2a      	ldr	r3, [pc, #168]	; (80100f4 <udp_input+0x1b4>)
 801004c:	695b      	ldr	r3, [r3, #20]
 801004e:	429a      	cmp	r2, r3
 8010050:	bf0c      	ite	eq
 8010052:	2301      	moveq	r3, #1
 8010054:	2300      	movne	r3, #0
 8010056:	b2db      	uxtb	r3, r3
 8010058:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801005a:	7efb      	ldrb	r3, [r7, #27]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d042      	beq.n	80100e6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8010060:	f06f 0107 	mvn.w	r1, #7
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7fa f891 	bl	800a18c <pbuf_header>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00a      	beq.n	8010086 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8010070:	4b22      	ldr	r3, [pc, #136]	; (80100fc <udp_input+0x1bc>)
 8010072:	f240 1255 	movw	r2, #341	; 0x155
 8010076:	4922      	ldr	r1, [pc, #136]	; (8010100 <udp_input+0x1c0>)
 8010078:	4822      	ldr	r0, [pc, #136]	; (8010104 <udp_input+0x1c4>)
 801007a:	f003 ff07 	bl	8013e8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7fa f8a8 	bl	800a1d4 <pbuf_free>
      goto end;
 8010084:	e032      	b.n	80100ec <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	2b00      	cmp	r3, #0
 801008a:	d012      	beq.n	80100b2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801008c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008e:	699b      	ldr	r3, [r3, #24]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00a      	beq.n	80100aa <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	699c      	ldr	r4, [r3, #24]
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	69d8      	ldr	r0, [r3, #28]
 801009c:	8a3b      	ldrh	r3, [r7, #16]
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	4b19      	ldr	r3, [pc, #100]	; (8010108 <udp_input+0x1c8>)
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80100a8:	e021      	b.n	80100ee <udp_input+0x1ae>
        pbuf_free(p);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fa f892 	bl	800a1d4 <pbuf_free>
        goto end;
 80100b0:	e01c      	b.n	80100ec <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80100b2:	7cfb      	ldrb	r3, [r7, #19]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d112      	bne.n	80100de <udp_input+0x19e>
 80100b8:	4b0e      	ldr	r3, [pc, #56]	; (80100f4 <udp_input+0x1b4>)
 80100ba:	695b      	ldr	r3, [r3, #20]
 80100bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100c0:	2be0      	cmp	r3, #224	; 0xe0
 80100c2:	d00c      	beq.n	80100de <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80100c4:	4b0b      	ldr	r3, [pc, #44]	; (80100f4 <udp_input+0x1b4>)
 80100c6:	899b      	ldrh	r3, [r3, #12]
 80100c8:	3308      	adds	r3, #8
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	b21b      	sxth	r3, r3
 80100ce:	4619      	mov	r1, r3
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7fa f86d 	bl	800a1b0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80100d6:	2103      	movs	r1, #3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f001 fa55 	bl	8011588 <icmp_dest_unreach>
      pbuf_free(p);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7fa f878 	bl	800a1d4 <pbuf_free>
  return;
 80100e4:	e003      	b.n	80100ee <udp_input+0x1ae>
    pbuf_free(p);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7fa f874 	bl	800a1d4 <pbuf_free>
  return;
 80100ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80100ee:	372c      	adds	r7, #44	; 0x2c
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd90      	pop	{r4, r7, pc}
 80100f4:	2000ce3c 	.word	0x2000ce3c
 80100f8:	20010564 	.word	0x20010564
 80100fc:	08016e70 	.word	0x08016e70
 8010100:	08016ea0 	.word	0x08016ea0
 8010104:	08016eb4 	.word	0x08016eb4
 8010108:	2000ce4c 	.word	0x2000ce4c

0801010c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d102      	bne.n	8010122 <udp_send+0x16>
    return ERR_VAL;
 801011c:	f06f 0305 	mvn.w	r3, #5
 8010120:	e008      	b.n	8010134 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	1d1a      	adds	r2, r3, #4
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8a9b      	ldrh	r3, [r3, #20]
 801012a:	6839      	ldr	r1, [r7, #0]
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 f805 	bl	801013c <udp_sendto>
 8010132:	4603      	mov	r3, r0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b088      	sub	sp, #32
 8010140:	af02      	add	r7, sp, #8
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <udp_sendto+0x1e>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <udp_sendto+0x24>
    return ERR_VAL;
 801015a:	f06f 0305 	mvn.w	r3, #5
 801015e:	e013      	b.n	8010188 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8010160:	6978      	ldr	r0, [r7, #20]
 8010162:	f001 fa99 	bl	8011698 <ip4_route>
 8010166:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d102      	bne.n	8010174 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801016e:	f06f 0303 	mvn.w	r3, #3
 8010172:	e009      	b.n	8010188 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010174:	887a      	ldrh	r2, [r7, #2]
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	4613      	mov	r3, r2
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	68b9      	ldr	r1, [r7, #8]
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f000 f805 	bl	8010190 <udp_sendto_if>
 8010186:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010188:	4618      	mov	r0, r3
 801018a:	3718      	adds	r7, #24
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af02      	add	r7, sp, #8
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
 801019c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d002      	beq.n	80101aa <udp_sendto_if+0x1a>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d102      	bne.n	80101b0 <udp_sendto_if+0x20>
    return ERR_VAL;
 80101aa:	f06f 0305 	mvn.w	r3, #5
 80101ae:	e028      	b.n	8010202 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d009      	beq.n	80101ca <udp_sendto_if+0x3a>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d005      	beq.n	80101ca <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80101c6:	2be0      	cmp	r3, #224	; 0xe0
 80101c8:	d103      	bne.n	80101d2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	3304      	adds	r3, #4
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	e00b      	b.n	80101ea <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	3304      	adds	r3, #4
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d002      	beq.n	80101e6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 80101e0:	f06f 0303 	mvn.w	r3, #3
 80101e4:	e00d      	b.n	8010202 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80101ea:	887a      	ldrh	r2, [r7, #2]
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	4613      	mov	r3, r2
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	68b9      	ldr	r1, [r7, #8]
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f000 f806 	bl	801020c <udp_sendto_if_src>
 8010200:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
	...

0801020c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08c      	sub	sp, #48	; 0x30
 8010210:	af04      	add	r7, sp, #16
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d002      	beq.n	8010226 <udp_sendto_if_src+0x1a>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8010226:	f06f 0305 	mvn.w	r3, #5
 801022a:	e07e      	b.n	801032a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	8a5b      	ldrh	r3, [r3, #18]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d10f      	bne.n	8010254 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010234:	68f9      	ldr	r1, [r7, #12]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	8a5b      	ldrh	r3, [r3, #18]
 801023a:	461a      	mov	r2, r3
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 f87f 	bl	8010340 <udp_bind>
 8010242:	4603      	mov	r3, r0
 8010244:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010246:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d002      	beq.n	8010254 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801024e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010252:	e06a      	b.n	801032a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8010254:	2108      	movs	r1, #8
 8010256:	68b8      	ldr	r0, [r7, #8]
 8010258:	f7f9 ff98 	bl	800a18c <pbuf_header>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d014      	beq.n	801028c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010262:	2200      	movs	r2, #0
 8010264:	2108      	movs	r1, #8
 8010266:	2001      	movs	r0, #1
 8010268:	f7f9 fc42 	bl	8009af0 <pbuf_alloc>
 801026c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d102      	bne.n	801027a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010274:	f04f 33ff 	mov.w	r3, #4294967295
 8010278:	e057      	b.n	801032a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	891b      	ldrh	r3, [r3, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d006      	beq.n	8010290 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010282:	68b9      	ldr	r1, [r7, #8]
 8010284:	69f8      	ldr	r0, [r7, #28]
 8010286:	f7fa f8d5 	bl	800a434 <pbuf_chain>
 801028a:	e001      	b.n	8010290 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	895b      	ldrh	r3, [r3, #10]
 8010294:	2b07      	cmp	r3, #7
 8010296:	d806      	bhi.n	80102a6 <udp_sendto_if_src+0x9a>
 8010298:	4b26      	ldr	r3, [pc, #152]	; (8010334 <udp_sendto_if_src+0x128>)
 801029a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801029e:	4926      	ldr	r1, [pc, #152]	; (8010338 <udp_sendto_if_src+0x12c>)
 80102a0:	4826      	ldr	r0, [pc, #152]	; (801033c <udp_sendto_if_src+0x130>)
 80102a2:	f003 fdf3 	bl	8013e8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	8a5b      	ldrh	r3, [r3, #18]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7f8 fdf5 	bl	8008ea0 <lwip_htons>
 80102b6:	4603      	mov	r3, r0
 80102b8:	461a      	mov	r2, r3
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80102be:	887b      	ldrh	r3, [r7, #2]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7f8 fded 	bl	8008ea0 <lwip_htons>
 80102c6:	4603      	mov	r3, r0
 80102c8:	461a      	mov	r2, r3
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2200      	movs	r2, #0
 80102d2:	719a      	strb	r2, [r3, #6]
 80102d4:	2200      	movs	r2, #0
 80102d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	891b      	ldrh	r3, [r3, #8]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7f8 fddf 	bl	8008ea0 <lwip_htons>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80102ea:	2311      	movs	r3, #17
 80102ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	7a9b      	ldrb	r3, [r3, #10]
 80102f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	7a5b      	ldrb	r3, [r3, #9]
 80102f8:	7cb9      	ldrb	r1, [r7, #18]
 80102fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102fc:	9202      	str	r2, [sp, #8]
 80102fe:	7cfa      	ldrb	r2, [r7, #19]
 8010300:	9201      	str	r2, [sp, #4]
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	460b      	mov	r3, r1
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801030a:	69f8      	ldr	r0, [r7, #28]
 801030c:	f001 fb96 	bl	8011a3c <ip4_output_if_src>
 8010310:	4603      	mov	r3, r0
 8010312:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010314:	69fa      	ldr	r2, [r7, #28]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	429a      	cmp	r2, r3
 801031a:	d004      	beq.n	8010326 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801031c:	69f8      	ldr	r0, [r7, #28]
 801031e:	f7f9 ff59 	bl	800a1d4 <pbuf_free>
    q = NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010326:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3720      	adds	r7, #32
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	08016e70 	.word	0x08016e70
 8010338:	08016edc 	.word	0x08016edc
 801033c:	08016eb4 	.word	0x08016eb4

08010340 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	4613      	mov	r3, r2
 801034c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d101      	bne.n	8010358 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010354:	4b30      	ldr	r3, [pc, #192]	; (8010418 <udp_bind+0xd8>)
 8010356:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d002      	beq.n	8010364 <udp_bind+0x24>
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d102      	bne.n	801036a <udp_bind+0x2a>
    return ERR_VAL;
 8010364:	f06f 0305 	mvn.w	r3, #5
 8010368:	e052      	b.n	8010410 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801036e:	4b2b      	ldr	r3, [pc, #172]	; (801041c <udp_bind+0xdc>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	617b      	str	r3, [r7, #20]
 8010374:	e009      	b.n	801038a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	429a      	cmp	r2, r3
 801037c:	d102      	bne.n	8010384 <udp_bind+0x44>
      rebind = 1;
 801037e:	2301      	movs	r3, #1
 8010380:	74fb      	strb	r3, [r7, #19]
      break;
 8010382:	e005      	b.n	8010390 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	617b      	str	r3, [r7, #20]
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1f2      	bne.n	8010376 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8010390:	88fb      	ldrh	r3, [r7, #6]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <udp_bind+0x6a>
    port = udp_new_port();
 8010396:	f7ff fd5f 	bl	800fe58 <udp_new_port>
 801039a:	4603      	mov	r3, r0
 801039c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801039e:	88fb      	ldrh	r3, [r7, #6]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d11e      	bne.n	80103e2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80103a4:	f06f 0307 	mvn.w	r3, #7
 80103a8:	e032      	b.n	8010410 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80103aa:	4b1c      	ldr	r3, [pc, #112]	; (801041c <udp_bind+0xdc>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	617b      	str	r3, [r7, #20]
 80103b0:	e014      	b.n	80103dc <udp_bind+0x9c>
      if (pcb != ipcb) {
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d00d      	beq.n	80103d6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	8a5b      	ldrh	r3, [r3, #18]
 80103be:	88fa      	ldrh	r2, [r7, #6]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d108      	bne.n	80103d6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d102      	bne.n	80103d6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80103d0:	f06f 0307 	mvn.w	r3, #7
 80103d4:	e01c      	b.n	8010410 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	617b      	str	r3, [r7, #20]
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e7      	bne.n	80103b2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <udp_bind+0xae>
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	e000      	b.n	80103f0 <udp_bind+0xb0>
 80103ee:	2300      	movs	r3, #0
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	88fa      	ldrh	r2, [r7, #6]
 80103f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80103fa:	7cfb      	ldrb	r3, [r7, #19]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d106      	bne.n	801040e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010400:	4b06      	ldr	r3, [pc, #24]	; (801041c <udp_bind+0xdc>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010408:	4a04      	ldr	r2, [pc, #16]	; (801041c <udp_bind+0xdc>)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801040e:	2300      	movs	r3, #0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	0801778c 	.word	0x0801778c
 801041c:	20010564 	.word	0x20010564

08010420 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	61da      	str	r2, [r3, #28]
}
 8010438:	bf00      	nop
 801043a:	3714      	adds	r7, #20
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801044c:	4b15      	ldr	r3, [pc, #84]	; (80104a4 <udp_remove+0x60>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	429a      	cmp	r2, r3
 8010454:	d105      	bne.n	8010462 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010456:	4b13      	ldr	r3, [pc, #76]	; (80104a4 <udp_remove+0x60>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	4a11      	ldr	r2, [pc, #68]	; (80104a4 <udp_remove+0x60>)
 801045e:	6013      	str	r3, [r2, #0]
 8010460:	e017      	b.n	8010492 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010462:	4b10      	ldr	r3, [pc, #64]	; (80104a4 <udp_remove+0x60>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	60fb      	str	r3, [r7, #12]
 8010468:	e010      	b.n	801048c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d009      	beq.n	8010486 <udp_remove+0x42>
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	429a      	cmp	r2, r3
 801047a:	d104      	bne.n	8010486 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	68da      	ldr	r2, [r3, #12]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	60da      	str	r2, [r3, #12]
        break;
 8010484:	e005      	b.n	8010492 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	60fb      	str	r3, [r7, #12]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1eb      	bne.n	801046a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	2000      	movs	r0, #0
 8010496:	f7f9 f943 	bl	8009720 <memp_free>
}
 801049a:	bf00      	nop
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	20010564 	.word	0x20010564

080104a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80104ae:	2000      	movs	r0, #0
 80104b0:	f7f9 f8e4 	bl	800967c <memp_malloc>
 80104b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d007      	beq.n	80104cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80104bc:	2220      	movs	r2, #32
 80104be:	2100      	movs	r1, #0
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f003 fcdb 	bl	8013e7c <memset>
    pcb->ttl = UDP_TTL;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	22ff      	movs	r2, #255	; 0xff
 80104ca:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80104cc:	687b      	ldr	r3, [r7, #4]
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	4603      	mov	r3, r0
 80104de:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80104e0:	f7ff ffe2 	bl	80104a8 <udp_new>
 80104e4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80104e6:	68fb      	ldr	r3, [r7, #12]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d01e      	beq.n	801053e <udp_netif_ip_addr_changed+0x4e>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d01a      	beq.n	801053e <udp_netif_ip_addr_changed+0x4e>
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d017      	beq.n	801053e <udp_netif_ip_addr_changed+0x4e>
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d013      	beq.n	801053e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010516:	4b0d      	ldr	r3, [pc, #52]	; (801054c <udp_netif_ip_addr_changed+0x5c>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	60fb      	str	r3, [r7, #12]
 801051c:	e00c      	b.n	8010538 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	429a      	cmp	r2, r3
 8010528:	d103      	bne.n	8010532 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	60fb      	str	r3, [r7, #12]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1ef      	bne.n	801051e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801053e:	bf00      	nop
 8010540:	3714      	adds	r7, #20
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	20010564 	.word	0x20010564

08010550 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010558:	4915      	ldr	r1, [pc, #84]	; (80105b0 <etharp_free_entry+0x60>)
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	4613      	mov	r3, r2
 801055e:	005b      	lsls	r3, r3, #1
 8010560:	4413      	add	r3, r2
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	440b      	add	r3, r1
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d013      	beq.n	8010594 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801056c:	4910      	ldr	r1, [pc, #64]	; (80105b0 <etharp_free_entry+0x60>)
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	4613      	mov	r3, r2
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	4413      	add	r3, r2
 8010576:	00db      	lsls	r3, r3, #3
 8010578:	440b      	add	r3, r1
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4618      	mov	r0, r3
 801057e:	f7f9 fe29 	bl	800a1d4 <pbuf_free>
    arp_table[i].q = NULL;
 8010582:	490b      	ldr	r1, [pc, #44]	; (80105b0 <etharp_free_entry+0x60>)
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	4613      	mov	r3, r2
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	4413      	add	r3, r2
 801058c:	00db      	lsls	r3, r3, #3
 801058e:	440b      	add	r3, r1
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010594:	4906      	ldr	r1, [pc, #24]	; (80105b0 <etharp_free_entry+0x60>)
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	4613      	mov	r3, r2
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	4413      	add	r3, r2
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	440b      	add	r3, r1
 80105a2:	3314      	adds	r3, #20
 80105a4:	2200      	movs	r2, #0
 80105a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	2000c620 	.word	0x2000c620

080105b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105ba:	2300      	movs	r3, #0
 80105bc:	71fb      	strb	r3, [r7, #7]
 80105be:	e096      	b.n	80106ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	494f      	ldr	r1, [pc, #316]	; (8010700 <etharp_tmr+0x14c>)
 80105c4:	4613      	mov	r3, r2
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	4413      	add	r3, r2
 80105ca:	00db      	lsls	r3, r3, #3
 80105cc:	440b      	add	r3, r1
 80105ce:	3314      	adds	r3, #20
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80105d4:	79bb      	ldrb	r3, [r7, #6]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8086 	beq.w	80106e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80105dc:	79fa      	ldrb	r2, [r7, #7]
 80105de:	4948      	ldr	r1, [pc, #288]	; (8010700 <etharp_tmr+0x14c>)
 80105e0:	4613      	mov	r3, r2
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	4413      	add	r3, r2
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	440b      	add	r3, r1
 80105ea:	3312      	adds	r3, #18
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	3301      	adds	r3, #1
 80105f0:	b298      	uxth	r0, r3
 80105f2:	4943      	ldr	r1, [pc, #268]	; (8010700 <etharp_tmr+0x14c>)
 80105f4:	4613      	mov	r3, r2
 80105f6:	005b      	lsls	r3, r3, #1
 80105f8:	4413      	add	r3, r2
 80105fa:	00db      	lsls	r3, r3, #3
 80105fc:	440b      	add	r3, r1
 80105fe:	3312      	adds	r3, #18
 8010600:	4602      	mov	r2, r0
 8010602:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010604:	79fa      	ldrb	r2, [r7, #7]
 8010606:	493e      	ldr	r1, [pc, #248]	; (8010700 <etharp_tmr+0x14c>)
 8010608:	4613      	mov	r3, r2
 801060a:	005b      	lsls	r3, r3, #1
 801060c:	4413      	add	r3, r2
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	440b      	add	r3, r1
 8010612:	3312      	adds	r3, #18
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801061a:	d215      	bcs.n	8010648 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801061c:	79fa      	ldrb	r2, [r7, #7]
 801061e:	4938      	ldr	r1, [pc, #224]	; (8010700 <etharp_tmr+0x14c>)
 8010620:	4613      	mov	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	440b      	add	r3, r1
 801062a:	3314      	adds	r3, #20
 801062c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801062e:	2b01      	cmp	r3, #1
 8010630:	d10f      	bne.n	8010652 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010632:	79fa      	ldrb	r2, [r7, #7]
 8010634:	4932      	ldr	r1, [pc, #200]	; (8010700 <etharp_tmr+0x14c>)
 8010636:	4613      	mov	r3, r2
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	4413      	add	r3, r2
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	440b      	add	r3, r1
 8010640:	3312      	adds	r3, #18
 8010642:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010644:	2b04      	cmp	r3, #4
 8010646:	d904      	bls.n	8010652 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	4618      	mov	r0, r3
 801064c:	f7ff ff80 	bl	8010550 <etharp_free_entry>
 8010650:	e04a      	b.n	80106e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	492a      	ldr	r1, [pc, #168]	; (8010700 <etharp_tmr+0x14c>)
 8010656:	4613      	mov	r3, r2
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	4413      	add	r3, r2
 801065c:	00db      	lsls	r3, r3, #3
 801065e:	440b      	add	r3, r1
 8010660:	3314      	adds	r3, #20
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	2b03      	cmp	r3, #3
 8010666:	d10a      	bne.n	801067e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010668:	79fa      	ldrb	r2, [r7, #7]
 801066a:	4925      	ldr	r1, [pc, #148]	; (8010700 <etharp_tmr+0x14c>)
 801066c:	4613      	mov	r3, r2
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	4413      	add	r3, r2
 8010672:	00db      	lsls	r3, r3, #3
 8010674:	440b      	add	r3, r1
 8010676:	3314      	adds	r3, #20
 8010678:	2204      	movs	r2, #4
 801067a:	701a      	strb	r2, [r3, #0]
 801067c:	e034      	b.n	80106e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801067e:	79fa      	ldrb	r2, [r7, #7]
 8010680:	491f      	ldr	r1, [pc, #124]	; (8010700 <etharp_tmr+0x14c>)
 8010682:	4613      	mov	r3, r2
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	4413      	add	r3, r2
 8010688:	00db      	lsls	r3, r3, #3
 801068a:	440b      	add	r3, r1
 801068c:	3314      	adds	r3, #20
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	2b04      	cmp	r3, #4
 8010692:	d10a      	bne.n	80106aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010694:	79fa      	ldrb	r2, [r7, #7]
 8010696:	491a      	ldr	r1, [pc, #104]	; (8010700 <etharp_tmr+0x14c>)
 8010698:	4613      	mov	r3, r2
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	4413      	add	r3, r2
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	440b      	add	r3, r1
 80106a2:	3314      	adds	r3, #20
 80106a4:	2202      	movs	r2, #2
 80106a6:	701a      	strb	r2, [r3, #0]
 80106a8:	e01e      	b.n	80106e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106aa:	79fa      	ldrb	r2, [r7, #7]
 80106ac:	4914      	ldr	r1, [pc, #80]	; (8010700 <etharp_tmr+0x14c>)
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	440b      	add	r3, r1
 80106b8:	3314      	adds	r3, #20
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d113      	bne.n	80106e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80106c0:	79fa      	ldrb	r2, [r7, #7]
 80106c2:	490f      	ldr	r1, [pc, #60]	; (8010700 <etharp_tmr+0x14c>)
 80106c4:	4613      	mov	r3, r2
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	4413      	add	r3, r2
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	440b      	add	r3, r1
 80106ce:	3308      	adds	r3, #8
 80106d0:	6818      	ldr	r0, [r3, #0]
 80106d2:	79fa      	ldrb	r2, [r7, #7]
 80106d4:	4613      	mov	r3, r2
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	4413      	add	r3, r2
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	4a08      	ldr	r2, [pc, #32]	; (8010700 <etharp_tmr+0x14c>)
 80106de:	4413      	add	r3, r2
 80106e0:	3304      	adds	r3, #4
 80106e2:	4619      	mov	r1, r3
 80106e4:	f000 fe38 	bl	8011358 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	3301      	adds	r3, #1
 80106ec:	71fb      	strb	r3, [r7, #7]
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	2b09      	cmp	r3, #9
 80106f2:	f67f af65 	bls.w	80105c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80106f6:	bf00      	nop
 80106f8:	3708      	adds	r7, #8
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	2000c620 	.word	0x2000c620

08010704 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b088      	sub	sp, #32
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	460b      	mov	r3, r1
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010712:	230a      	movs	r3, #10
 8010714:	77fb      	strb	r3, [r7, #31]
 8010716:	230a      	movs	r3, #10
 8010718:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801071a:	230a      	movs	r3, #10
 801071c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8010722:	230a      	movs	r3, #10
 8010724:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010726:	2300      	movs	r3, #0
 8010728:	833b      	strh	r3, [r7, #24]
 801072a:	2300      	movs	r3, #0
 801072c:	82fb      	strh	r3, [r7, #22]
 801072e:	2300      	movs	r3, #0
 8010730:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010732:	2300      	movs	r3, #0
 8010734:	773b      	strb	r3, [r7, #28]
 8010736:	e093      	b.n	8010860 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010738:	7f3a      	ldrb	r2, [r7, #28]
 801073a:	4990      	ldr	r1, [pc, #576]	; (801097c <etharp_find_entry+0x278>)
 801073c:	4613      	mov	r3, r2
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	4413      	add	r3, r2
 8010742:	00db      	lsls	r3, r3, #3
 8010744:	440b      	add	r3, r1
 8010746:	3314      	adds	r3, #20
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801074c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010750:	2b0a      	cmp	r3, #10
 8010752:	d105      	bne.n	8010760 <etharp_find_entry+0x5c>
 8010754:	7cfb      	ldrb	r3, [r7, #19]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d102      	bne.n	8010760 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801075a:	7f3b      	ldrb	r3, [r7, #28]
 801075c:	777b      	strb	r3, [r7, #29]
 801075e:	e07c      	b.n	801085a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010760:	7cfb      	ldrb	r3, [r7, #19]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d079      	beq.n	801085a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010766:	7cfb      	ldrb	r3, [r7, #19]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d009      	beq.n	8010780 <etharp_find_entry+0x7c>
 801076c:	7cfb      	ldrb	r3, [r7, #19]
 801076e:	2b01      	cmp	r3, #1
 8010770:	d806      	bhi.n	8010780 <etharp_find_entry+0x7c>
 8010772:	4b83      	ldr	r3, [pc, #524]	; (8010980 <etharp_find_entry+0x27c>)
 8010774:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010778:	4982      	ldr	r1, [pc, #520]	; (8010984 <etharp_find_entry+0x280>)
 801077a:	4883      	ldr	r0, [pc, #524]	; (8010988 <etharp_find_entry+0x284>)
 801077c:	f003 fb86 	bl	8013e8c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00f      	beq.n	80107a6 <etharp_find_entry+0xa2>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6819      	ldr	r1, [r3, #0]
 801078a:	7f3a      	ldrb	r2, [r7, #28]
 801078c:	487b      	ldr	r0, [pc, #492]	; (801097c <etharp_find_entry+0x278>)
 801078e:	4613      	mov	r3, r2
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	4413      	add	r3, r2
 8010794:	00db      	lsls	r3, r3, #3
 8010796:	4403      	add	r3, r0
 8010798:	3304      	adds	r3, #4
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4299      	cmp	r1, r3
 801079e:	d102      	bne.n	80107a6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80107a0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80107a4:	e0e5      	b.n	8010972 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80107a6:	7cfb      	ldrb	r3, [r7, #19]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d13b      	bne.n	8010824 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80107ac:	7f3a      	ldrb	r2, [r7, #28]
 80107ae:	4973      	ldr	r1, [pc, #460]	; (801097c <etharp_find_entry+0x278>)
 80107b0:	4613      	mov	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	4413      	add	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	440b      	add	r3, r1
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d018      	beq.n	80107f2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80107c0:	7f3a      	ldrb	r2, [r7, #28]
 80107c2:	496e      	ldr	r1, [pc, #440]	; (801097c <etharp_find_entry+0x278>)
 80107c4:	4613      	mov	r3, r2
 80107c6:	005b      	lsls	r3, r3, #1
 80107c8:	4413      	add	r3, r2
 80107ca:	00db      	lsls	r3, r3, #3
 80107cc:	440b      	add	r3, r1
 80107ce:	3312      	adds	r3, #18
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	8b3a      	ldrh	r2, [r7, #24]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d840      	bhi.n	801085a <etharp_find_entry+0x156>
            old_queue = i;
 80107d8:	7f3b      	ldrb	r3, [r7, #28]
 80107da:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80107dc:	7f3a      	ldrb	r2, [r7, #28]
 80107de:	4967      	ldr	r1, [pc, #412]	; (801097c <etharp_find_entry+0x278>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	4413      	add	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	3312      	adds	r3, #18
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	833b      	strh	r3, [r7, #24]
 80107f0:	e033      	b.n	801085a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80107f2:	7f3a      	ldrb	r2, [r7, #28]
 80107f4:	4961      	ldr	r1, [pc, #388]	; (801097c <etharp_find_entry+0x278>)
 80107f6:	4613      	mov	r3, r2
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	440b      	add	r3, r1
 8010800:	3312      	adds	r3, #18
 8010802:	881b      	ldrh	r3, [r3, #0]
 8010804:	8afa      	ldrh	r2, [r7, #22]
 8010806:	429a      	cmp	r2, r3
 8010808:	d827      	bhi.n	801085a <etharp_find_entry+0x156>
            old_pending = i;
 801080a:	7f3b      	ldrb	r3, [r7, #28]
 801080c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801080e:	7f3a      	ldrb	r2, [r7, #28]
 8010810:	495a      	ldr	r1, [pc, #360]	; (801097c <etharp_find_entry+0x278>)
 8010812:	4613      	mov	r3, r2
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	4413      	add	r3, r2
 8010818:	00db      	lsls	r3, r3, #3
 801081a:	440b      	add	r3, r1
 801081c:	3312      	adds	r3, #18
 801081e:	881b      	ldrh	r3, [r3, #0]
 8010820:	82fb      	strh	r3, [r7, #22]
 8010822:	e01a      	b.n	801085a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010824:	7cfb      	ldrb	r3, [r7, #19]
 8010826:	2b01      	cmp	r3, #1
 8010828:	d917      	bls.n	801085a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801082a:	7f3a      	ldrb	r2, [r7, #28]
 801082c:	4953      	ldr	r1, [pc, #332]	; (801097c <etharp_find_entry+0x278>)
 801082e:	4613      	mov	r3, r2
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4413      	add	r3, r2
 8010834:	00db      	lsls	r3, r3, #3
 8010836:	440b      	add	r3, r1
 8010838:	3312      	adds	r3, #18
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	8aba      	ldrh	r2, [r7, #20]
 801083e:	429a      	cmp	r2, r3
 8010840:	d80b      	bhi.n	801085a <etharp_find_entry+0x156>
            old_stable = i;
 8010842:	7f3b      	ldrb	r3, [r7, #28]
 8010844:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010846:	7f3a      	ldrb	r2, [r7, #28]
 8010848:	494c      	ldr	r1, [pc, #304]	; (801097c <etharp_find_entry+0x278>)
 801084a:	4613      	mov	r3, r2
 801084c:	005b      	lsls	r3, r3, #1
 801084e:	4413      	add	r3, r2
 8010850:	00db      	lsls	r3, r3, #3
 8010852:	440b      	add	r3, r1
 8010854:	3312      	adds	r3, #18
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801085a:	7f3b      	ldrb	r3, [r7, #28]
 801085c:	3301      	adds	r3, #1
 801085e:	773b      	strb	r3, [r7, #28]
 8010860:	7f3b      	ldrb	r3, [r7, #28]
 8010862:	2b09      	cmp	r3, #9
 8010864:	f67f af68 	bls.w	8010738 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010868:	7afb      	ldrb	r3, [r7, #11]
 801086a:	f003 0302 	and.w	r3, r3, #2
 801086e:	2b00      	cmp	r3, #0
 8010870:	d108      	bne.n	8010884 <etharp_find_entry+0x180>
 8010872:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010876:	2b0a      	cmp	r3, #10
 8010878:	d107      	bne.n	801088a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801087a:	7afb      	ldrb	r3, [r7, #11]
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	e073      	b.n	8010972 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801088a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801088e:	2b09      	cmp	r3, #9
 8010890:	dc02      	bgt.n	8010898 <etharp_find_entry+0x194>
    i = empty;
 8010892:	7f7b      	ldrb	r3, [r7, #29]
 8010894:	773b      	strb	r3, [r7, #28]
 8010896:	e036      	b.n	8010906 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010898:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801089c:	2b09      	cmp	r3, #9
 801089e:	dc13      	bgt.n	80108c8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80108a0:	7fbb      	ldrb	r3, [r7, #30]
 80108a2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80108a4:	7f3a      	ldrb	r2, [r7, #28]
 80108a6:	4935      	ldr	r1, [pc, #212]	; (801097c <etharp_find_entry+0x278>)
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	440b      	add	r3, r1
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d018      	beq.n	80108ea <etharp_find_entry+0x1e6>
 80108b8:	4b31      	ldr	r3, [pc, #196]	; (8010980 <etharp_find_entry+0x27c>)
 80108ba:	f240 126f 	movw	r2, #367	; 0x16f
 80108be:	4933      	ldr	r1, [pc, #204]	; (801098c <etharp_find_entry+0x288>)
 80108c0:	4831      	ldr	r0, [pc, #196]	; (8010988 <etharp_find_entry+0x284>)
 80108c2:	f003 fae3 	bl	8013e8c <iprintf>
 80108c6:	e010      	b.n	80108ea <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80108c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108cc:	2b09      	cmp	r3, #9
 80108ce:	dc02      	bgt.n	80108d6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80108d0:	7ffb      	ldrb	r3, [r7, #31]
 80108d2:	773b      	strb	r3, [r7, #28]
 80108d4:	e009      	b.n	80108ea <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80108d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108da:	2b09      	cmp	r3, #9
 80108dc:	dc02      	bgt.n	80108e4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80108de:	7efb      	ldrb	r3, [r7, #27]
 80108e0:	773b      	strb	r3, [r7, #28]
 80108e2:	e002      	b.n	80108ea <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80108e4:	f04f 33ff 	mov.w	r3, #4294967295
 80108e8:	e043      	b.n	8010972 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80108ea:	7f3b      	ldrb	r3, [r7, #28]
 80108ec:	2b09      	cmp	r3, #9
 80108ee:	d906      	bls.n	80108fe <etharp_find_entry+0x1fa>
 80108f0:	4b23      	ldr	r3, [pc, #140]	; (8010980 <etharp_find_entry+0x27c>)
 80108f2:	f240 1281 	movw	r2, #385	; 0x181
 80108f6:	4926      	ldr	r1, [pc, #152]	; (8010990 <etharp_find_entry+0x28c>)
 80108f8:	4823      	ldr	r0, [pc, #140]	; (8010988 <etharp_find_entry+0x284>)
 80108fa:	f003 fac7 	bl	8013e8c <iprintf>
    etharp_free_entry(i);
 80108fe:	7f3b      	ldrb	r3, [r7, #28]
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fe25 	bl	8010550 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010906:	7f3b      	ldrb	r3, [r7, #28]
 8010908:	2b09      	cmp	r3, #9
 801090a:	d906      	bls.n	801091a <etharp_find_entry+0x216>
 801090c:	4b1c      	ldr	r3, [pc, #112]	; (8010980 <etharp_find_entry+0x27c>)
 801090e:	f240 1285 	movw	r2, #389	; 0x185
 8010912:	491f      	ldr	r1, [pc, #124]	; (8010990 <etharp_find_entry+0x28c>)
 8010914:	481c      	ldr	r0, [pc, #112]	; (8010988 <etharp_find_entry+0x284>)
 8010916:	f003 fab9 	bl	8013e8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801091a:	7f3a      	ldrb	r2, [r7, #28]
 801091c:	4917      	ldr	r1, [pc, #92]	; (801097c <etharp_find_entry+0x278>)
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	440b      	add	r3, r1
 8010928:	3314      	adds	r3, #20
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d006      	beq.n	801093e <etharp_find_entry+0x23a>
 8010930:	4b13      	ldr	r3, [pc, #76]	; (8010980 <etharp_find_entry+0x27c>)
 8010932:	f240 1287 	movw	r2, #391	; 0x187
 8010936:	4917      	ldr	r1, [pc, #92]	; (8010994 <etharp_find_entry+0x290>)
 8010938:	4813      	ldr	r0, [pc, #76]	; (8010988 <etharp_find_entry+0x284>)
 801093a:	f003 faa7 	bl	8013e8c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00a      	beq.n	801095a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010944:	7f3a      	ldrb	r2, [r7, #28]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6819      	ldr	r1, [r3, #0]
 801094a:	480c      	ldr	r0, [pc, #48]	; (801097c <etharp_find_entry+0x278>)
 801094c:	4613      	mov	r3, r2
 801094e:	005b      	lsls	r3, r3, #1
 8010950:	4413      	add	r3, r2
 8010952:	00db      	lsls	r3, r3, #3
 8010954:	4403      	add	r3, r0
 8010956:	3304      	adds	r3, #4
 8010958:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801095a:	7f3a      	ldrb	r2, [r7, #28]
 801095c:	4907      	ldr	r1, [pc, #28]	; (801097c <etharp_find_entry+0x278>)
 801095e:	4613      	mov	r3, r2
 8010960:	005b      	lsls	r3, r3, #1
 8010962:	4413      	add	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	440b      	add	r3, r1
 8010968:	3312      	adds	r3, #18
 801096a:	2200      	movs	r2, #0
 801096c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801096e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3720      	adds	r7, #32
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	2000c620 	.word	0x2000c620
 8010980:	08016f0c 	.word	0x08016f0c
 8010984:	08016f44 	.word	0x08016f44
 8010988:	08016f84 	.word	0x08016f84
 801098c:	08016fac 	.word	0x08016fac
 8010990:	08016fc4 	.word	0x08016fc4
 8010994:	08016fd8 	.word	0x08016fd8

08010998 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b088      	sub	sp, #32
 801099c:	af02      	add	r7, sp, #8
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80109ac:	2b06      	cmp	r3, #6
 80109ae:	d006      	beq.n	80109be <etharp_update_arp_entry+0x26>
 80109b0:	4b48      	ldr	r3, [pc, #288]	; (8010ad4 <etharp_update_arp_entry+0x13c>)
 80109b2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80109b6:	4948      	ldr	r1, [pc, #288]	; (8010ad8 <etharp_update_arp_entry+0x140>)
 80109b8:	4848      	ldr	r0, [pc, #288]	; (8010adc <etharp_update_arp_entry+0x144>)
 80109ba:	f003 fa67 	bl	8013e8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d012      	beq.n	80109ea <etharp_update_arp_entry+0x52>
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00e      	beq.n	80109ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	68f9      	ldr	r1, [r7, #12]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f001 f8da 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 80109d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d105      	bne.n	80109ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80109e6:	2be0      	cmp	r3, #224	; 0xe0
 80109e8:	d102      	bne.n	80109f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80109ea:	f06f 030f 	mvn.w	r3, #15
 80109ee:	e06c      	b.n	8010aca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	4619      	mov	r1, r3
 80109f6:	68b8      	ldr	r0, [r7, #8]
 80109f8:	f7ff fe84 	bl	8010704 <etharp_find_entry>
 80109fc:	4603      	mov	r3, r0
 80109fe:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	da02      	bge.n	8010a0e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a0c:	e05d      	b.n	8010aca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010a0e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a12:	4933      	ldr	r1, [pc, #204]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a14:	4613      	mov	r3, r2
 8010a16:	005b      	lsls	r3, r3, #1
 8010a18:	4413      	add	r3, r2
 8010a1a:	00db      	lsls	r3, r3, #3
 8010a1c:	440b      	add	r3, r1
 8010a1e:	3314      	adds	r3, #20
 8010a20:	2202      	movs	r2, #2
 8010a22:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010a24:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a28:	492d      	ldr	r1, [pc, #180]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	005b      	lsls	r3, r3, #1
 8010a2e:	4413      	add	r3, r2
 8010a30:	00db      	lsls	r3, r3, #3
 8010a32:	440b      	add	r3, r1
 8010a34:	3308      	adds	r3, #8
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8010a3a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	4413      	add	r3, r2
 8010a44:	00db      	lsls	r3, r3, #3
 8010a46:	3308      	adds	r3, #8
 8010a48:	4a25      	ldr	r2, [pc, #148]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a4a:	4413      	add	r3, r2
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	2206      	movs	r2, #6
 8010a50:	6879      	ldr	r1, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f003 fa07 	bl	8013e66 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010a58:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a5c:	4920      	ldr	r1, [pc, #128]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a5e:	4613      	mov	r3, r2
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	4413      	add	r3, r2
 8010a64:	00db      	lsls	r3, r3, #3
 8010a66:	440b      	add	r3, r1
 8010a68:	3312      	adds	r3, #18
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010a6e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a72:	491b      	ldr	r1, [pc, #108]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a74:	4613      	mov	r3, r2
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	4413      	add	r3, r2
 8010a7a:	00db      	lsls	r3, r3, #3
 8010a7c:	440b      	add	r3, r1
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d021      	beq.n	8010ac8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010a84:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a88:	4915      	ldr	r1, [pc, #84]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	4413      	add	r3, r2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	440b      	add	r3, r1
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010a98:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a9c:	4910      	ldr	r1, [pc, #64]	; (8010ae0 <etharp_update_arp_entry+0x148>)
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	4413      	add	r3, r2
 8010aa4:	00db      	lsls	r3, r3, #3
 8010aa6:	440b      	add	r3, r1
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8010ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6939      	ldr	r1, [r7, #16]
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f001 ff07 	bl	80128d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010ac2:	6938      	ldr	r0, [r7, #16]
 8010ac4:	f7f9 fb86 	bl	800a1d4 <pbuf_free>
  }
  return ERR_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3718      	adds	r7, #24
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	08016f0c 	.word	0x08016f0c
 8010ad8:	08017004 	.word	0x08017004
 8010adc:	08016f84 	.word	0x08016f84
 8010ae0:	2000c620 	.word	0x2000c620

08010ae4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010aec:	2300      	movs	r3, #0
 8010aee:	73fb      	strb	r3, [r7, #15]
 8010af0:	e01f      	b.n	8010b32 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8010af2:	7bfa      	ldrb	r2, [r7, #15]
 8010af4:	4912      	ldr	r1, [pc, #72]	; (8010b40 <etharp_cleanup_netif+0x5c>)
 8010af6:	4613      	mov	r3, r2
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	4413      	add	r3, r2
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	440b      	add	r3, r1
 8010b00:	3314      	adds	r3, #20
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010b06:	7bbb      	ldrb	r3, [r7, #14]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00f      	beq.n	8010b2c <etharp_cleanup_netif+0x48>
 8010b0c:	7bfa      	ldrb	r2, [r7, #15]
 8010b0e:	490c      	ldr	r1, [pc, #48]	; (8010b40 <etharp_cleanup_netif+0x5c>)
 8010b10:	4613      	mov	r3, r2
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	4413      	add	r3, r2
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	440b      	add	r3, r1
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d103      	bne.n	8010b2c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff fd12 	bl	8010550 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	73fb      	strb	r3, [r7, #15]
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
 8010b34:	2b09      	cmp	r3, #9
 8010b36:	d9dc      	bls.n	8010af2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010b38:	bf00      	nop
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	2000c620 	.word	0x2000c620

08010b44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010b44:	b5b0      	push	{r4, r5, r7, lr}
 8010b46:	b08a      	sub	sp, #40	; 0x28
 8010b48:	af04      	add	r7, sp, #16
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d107      	bne.n	8010b64 <etharp_input+0x20>
 8010b54:	4b3d      	ldr	r3, [pc, #244]	; (8010c4c <etharp_input+0x108>)
 8010b56:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010b5a:	493d      	ldr	r1, [pc, #244]	; (8010c50 <etharp_input+0x10c>)
 8010b5c:	483d      	ldr	r0, [pc, #244]	; (8010c54 <etharp_input+0x110>)
 8010b5e:	f003 f995 	bl	8013e8c <iprintf>
 8010b62:	e06f      	b.n	8010c44 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b74:	d10c      	bne.n	8010b90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010b7a:	2b06      	cmp	r3, #6
 8010b7c:	d108      	bne.n	8010b90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010b82:	2b04      	cmp	r3, #4
 8010b84:	d104      	bne.n	8010b90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	885b      	ldrh	r3, [r3, #2]
 8010b8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010b8c:	2b08      	cmp	r3, #8
 8010b8e:	d003      	beq.n	8010b98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7f9 fb1f 	bl	800a1d4 <pbuf_free>
    return;
 8010b96:	e055      	b.n	8010c44 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	330e      	adds	r3, #14
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	3318      	adds	r3, #24
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	3304      	adds	r3, #4
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <etharp_input+0x74>
    for_us = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	75fb      	strb	r3, [r7, #23]
 8010bb6:	e009      	b.n	8010bcc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	bf0c      	ite	eq
 8010bc4:	2301      	moveq	r3, #1
 8010bc6:	2300      	movne	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	f103 0208 	add.w	r2, r3, #8
 8010bd2:	7dfb      	ldrb	r3, [r7, #23]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d001      	beq.n	8010bdc <etharp_input+0x98>
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e000      	b.n	8010bde <etharp_input+0x9a>
 8010bdc:	2302      	movs	r3, #2
 8010bde:	f107 010c 	add.w	r1, r7, #12
 8010be2:	6838      	ldr	r0, [r7, #0]
 8010be4:	f7ff fed8 	bl	8010998 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	88db      	ldrh	r3, [r3, #6]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bf2:	d003      	beq.n	8010bfc <etharp_input+0xb8>
 8010bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bf8:	d01e      	beq.n	8010c38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010bfa:	e020      	b.n	8010c3e <etharp_input+0xfa>
    if (for_us) {
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d01c      	beq.n	8010c3c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010c18:	693a      	ldr	r2, [r7, #16]
 8010c1a:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010c1c:	2102      	movs	r1, #2
 8010c1e:	9103      	str	r1, [sp, #12]
 8010c20:	f107 010c 	add.w	r1, r7, #12
 8010c24:	9102      	str	r1, [sp, #8]
 8010c26:	9201      	str	r2, [sp, #4]
 8010c28:	9300      	str	r3, [sp, #0]
 8010c2a:	462b      	mov	r3, r5
 8010c2c:	4622      	mov	r2, r4
 8010c2e:	4601      	mov	r1, r0
 8010c30:	6838      	ldr	r0, [r7, #0]
 8010c32:	f000 fae3 	bl	80111fc <etharp_raw>
    break;
 8010c36:	e001      	b.n	8010c3c <etharp_input+0xf8>
    break;
 8010c38:	bf00      	nop
 8010c3a:	e000      	b.n	8010c3e <etharp_input+0xfa>
    break;
 8010c3c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7f9 fac8 	bl	800a1d4 <pbuf_free>
}
 8010c44:	3718      	adds	r7, #24
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bdb0      	pop	{r4, r5, r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	08016f0c 	.word	0x08016f0c
 8010c50:	0801705c 	.word	0x0801705c
 8010c54:	08016f84 	.word	0x08016f84

08010c58 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b086      	sub	sp, #24
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	4613      	mov	r3, r2
 8010c64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010c66:	79fa      	ldrb	r2, [r7, #7]
 8010c68:	4944      	ldr	r1, [pc, #272]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	3314      	adds	r3, #20
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d806      	bhi.n	8010c8a <etharp_output_to_arp_index+0x32>
 8010c7c:	4b40      	ldr	r3, [pc, #256]	; (8010d80 <etharp_output_to_arp_index+0x128>)
 8010c7e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010c82:	4940      	ldr	r1, [pc, #256]	; (8010d84 <etharp_output_to_arp_index+0x12c>)
 8010c84:	4840      	ldr	r0, [pc, #256]	; (8010d88 <etharp_output_to_arp_index+0x130>)
 8010c86:	f003 f901 	bl	8013e8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010c8a:	79fa      	ldrb	r2, [r7, #7]
 8010c8c:	493b      	ldr	r1, [pc, #236]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010c8e:	4613      	mov	r3, r2
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	4413      	add	r3, r2
 8010c94:	00db      	lsls	r3, r3, #3
 8010c96:	440b      	add	r3, r1
 8010c98:	3314      	adds	r3, #20
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d153      	bne.n	8010d48 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010ca0:	79fa      	ldrb	r2, [r7, #7]
 8010ca2:	4936      	ldr	r1, [pc, #216]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	4413      	add	r3, r2
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	440b      	add	r3, r1
 8010cae:	3312      	adds	r3, #18
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010cb6:	d919      	bls.n	8010cec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010cb8:	79fa      	ldrb	r2, [r7, #7]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	4413      	add	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	4a2e      	ldr	r2, [pc, #184]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010cc4:	4413      	add	r3, r2
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	4619      	mov	r1, r3
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 fb44 	bl	8011358 <etharp_request>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d138      	bne.n	8010d48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010cd6:	79fa      	ldrb	r2, [r7, #7]
 8010cd8:	4928      	ldr	r1, [pc, #160]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010cda:	4613      	mov	r3, r2
 8010cdc:	005b      	lsls	r3, r3, #1
 8010cde:	4413      	add	r3, r2
 8010ce0:	00db      	lsls	r3, r3, #3
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3314      	adds	r3, #20
 8010ce6:	2203      	movs	r2, #3
 8010ce8:	701a      	strb	r2, [r3, #0]
 8010cea:	e02d      	b.n	8010d48 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	4923      	ldr	r1, [pc, #140]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	005b      	lsls	r3, r3, #1
 8010cf4:	4413      	add	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	440b      	add	r3, r1
 8010cfa:	3312      	adds	r3, #18
 8010cfc:	881b      	ldrh	r3, [r3, #0]
 8010cfe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010d02:	d321      	bcc.n	8010d48 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010d04:	79fa      	ldrb	r2, [r7, #7]
 8010d06:	4613      	mov	r3, r2
 8010d08:	005b      	lsls	r3, r3, #1
 8010d0a:	4413      	add	r3, r2
 8010d0c:	00db      	lsls	r3, r3, #3
 8010d0e:	4a1b      	ldr	r2, [pc, #108]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010d10:	4413      	add	r3, r2
 8010d12:	1d19      	adds	r1, r3, #4
 8010d14:	79fa      	ldrb	r2, [r7, #7]
 8010d16:	4613      	mov	r3, r2
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	4413      	add	r3, r2
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	3308      	adds	r3, #8
 8010d20:	4a16      	ldr	r2, [pc, #88]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010d22:	4413      	add	r3, r2
 8010d24:	3304      	adds	r3, #4
 8010d26:	461a      	mov	r2, r3
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f000 faf3 	bl	8011314 <etharp_request_dst>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d109      	bne.n	8010d48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d34:	79fa      	ldrb	r2, [r7, #7]
 8010d36:	4911      	ldr	r1, [pc, #68]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010d38:	4613      	mov	r3, r2
 8010d3a:	005b      	lsls	r3, r3, #1
 8010d3c:	4413      	add	r3, r2
 8010d3e:	00db      	lsls	r3, r3, #3
 8010d40:	440b      	add	r3, r1
 8010d42:	3314      	adds	r3, #20
 8010d44:	2203      	movs	r2, #3
 8010d46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8010d4e:	79fa      	ldrb	r2, [r7, #7]
 8010d50:	4613      	mov	r3, r2
 8010d52:	005b      	lsls	r3, r3, #1
 8010d54:	4413      	add	r3, r2
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	3308      	adds	r3, #8
 8010d5a:	4a08      	ldr	r2, [pc, #32]	; (8010d7c <etharp_output_to_arp_index+0x124>)
 8010d5c:	4413      	add	r3, r2
 8010d5e:	1d1a      	adds	r2, r3, #4
 8010d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	4613      	mov	r3, r2
 8010d68:	460a      	mov	r2, r1
 8010d6a:	68b9      	ldr	r1, [r7, #8]
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f001 fdaf 	bl	80128d0 <ethernet_output>
 8010d72:	4603      	mov	r3, r0
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3710      	adds	r7, #16
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	2000c620 	.word	0x2000c620
 8010d80:	08016f0c 	.word	0x08016f0c
 8010d84:	0801707c 	.word	0x0801707c
 8010d88:	08016f84 	.word	0x08016f84

08010d8c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b08a      	sub	sp, #40	; 0x28
 8010d90:	af02      	add	r7, sp, #8
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d106      	bne.n	8010db0 <etharp_output+0x24>
 8010da2:	4b69      	ldr	r3, [pc, #420]	; (8010f48 <etharp_output+0x1bc>)
 8010da4:	f240 321b 	movw	r2, #795	; 0x31b
 8010da8:	4968      	ldr	r1, [pc, #416]	; (8010f4c <etharp_output+0x1c0>)
 8010daa:	4869      	ldr	r0, [pc, #420]	; (8010f50 <etharp_output+0x1c4>)
 8010dac:	f003 f86e 	bl	8013e8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d106      	bne.n	8010dc4 <etharp_output+0x38>
 8010db6:	4b64      	ldr	r3, [pc, #400]	; (8010f48 <etharp_output+0x1bc>)
 8010db8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010dbc:	4965      	ldr	r1, [pc, #404]	; (8010f54 <etharp_output+0x1c8>)
 8010dbe:	4864      	ldr	r0, [pc, #400]	; (8010f50 <etharp_output+0x1c4>)
 8010dc0:	f003 f864 	bl	8013e8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d106      	bne.n	8010dd8 <etharp_output+0x4c>
 8010dca:	4b5f      	ldr	r3, [pc, #380]	; (8010f48 <etharp_output+0x1bc>)
 8010dcc:	f240 321d 	movw	r2, #797	; 0x31d
 8010dd0:	4961      	ldr	r1, [pc, #388]	; (8010f58 <etharp_output+0x1cc>)
 8010dd2:	485f      	ldr	r0, [pc, #380]	; (8010f50 <etharp_output+0x1c4>)
 8010dd4:	f003 f85a 	bl	8013e8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	68f9      	ldr	r1, [r7, #12]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 fed4 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010dea:	4b5c      	ldr	r3, [pc, #368]	; (8010f5c <etharp_output+0x1d0>)
 8010dec:	61fb      	str	r3, [r7, #28]
 8010dee:	e09b      	b.n	8010f28 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010df8:	2be0      	cmp	r3, #224	; 0xe0
 8010dfa:	d118      	bne.n	8010e2e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010e00:	2300      	movs	r3, #0
 8010e02:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010e04:	235e      	movs	r3, #94	; 0x5e
 8010e06:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3302      	adds	r3, #2
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3303      	adds	r3, #3
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010e26:	f107 0310 	add.w	r3, r7, #16
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	e07c      	b.n	8010f28 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3304      	adds	r3, #4
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	405a      	eors	r2, r3
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4013      	ands	r3, r2
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d012      	beq.n	8010e6c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e4c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d00b      	beq.n	8010e6c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	330c      	adds	r3, #12
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d003      	beq.n	8010e66 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	330c      	adds	r3, #12
 8010e62:	61bb      	str	r3, [r7, #24]
 8010e64:	e002      	b.n	8010e6c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010e66:	f06f 0303 	mvn.w	r3, #3
 8010e6a:	e069      	b.n	8010f40 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010e6c:	4b3c      	ldr	r3, [pc, #240]	; (8010f60 <etharp_output+0x1d4>)
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	4619      	mov	r1, r3
 8010e72:	4a3c      	ldr	r2, [pc, #240]	; (8010f64 <etharp_output+0x1d8>)
 8010e74:	460b      	mov	r3, r1
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	440b      	add	r3, r1
 8010e7a:	00db      	lsls	r3, r3, #3
 8010e7c:	4413      	add	r3, r2
 8010e7e:	3314      	adds	r3, #20
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d917      	bls.n	8010eb6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	4b35      	ldr	r3, [pc, #212]	; (8010f60 <etharp_output+0x1d4>)
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	4934      	ldr	r1, [pc, #208]	; (8010f64 <etharp_output+0x1d8>)
 8010e92:	4603      	mov	r3, r0
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	4403      	add	r3, r0
 8010e98:	00db      	lsls	r3, r3, #3
 8010e9a:	440b      	add	r3, r1
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d108      	bne.n	8010eb6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010ea4:	4b2e      	ldr	r3, [pc, #184]	; (8010f60 <etharp_output+0x1d4>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	68b9      	ldr	r1, [r7, #8]
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7ff fed3 	bl	8010c58 <etharp_output_to_arp_index>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	e044      	b.n	8010f40 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	75fb      	strb	r3, [r7, #23]
 8010eba:	e02a      	b.n	8010f12 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ebc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ec0:	4928      	ldr	r1, [pc, #160]	; (8010f64 <etharp_output+0x1d8>)
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	4413      	add	r3, r2
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	440b      	add	r3, r1
 8010ecc:	3314      	adds	r3, #20
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d918      	bls.n	8010f06 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	6819      	ldr	r1, [r3, #0]
 8010ed8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010edc:	4821      	ldr	r0, [pc, #132]	; (8010f64 <etharp_output+0x1d8>)
 8010ede:	4613      	mov	r3, r2
 8010ee0:	005b      	lsls	r3, r3, #1
 8010ee2:	4413      	add	r3, r2
 8010ee4:	00db      	lsls	r3, r3, #3
 8010ee6:	4403      	add	r3, r0
 8010ee8:	3304      	adds	r3, #4
 8010eea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010eec:	4299      	cmp	r1, r3
 8010eee:	d10a      	bne.n	8010f06 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010ef0:	7dfa      	ldrb	r2, [r7, #23]
 8010ef2:	4b1b      	ldr	r3, [pc, #108]	; (8010f60 <etharp_output+0x1d4>)
 8010ef4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	68b9      	ldr	r1, [r7, #8]
 8010efc:	68f8      	ldr	r0, [r7, #12]
 8010efe:	f7ff feab 	bl	8010c58 <etharp_output_to_arp_index>
 8010f02:	4603      	mov	r3, r0
 8010f04:	e01c      	b.n	8010f40 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	75fb      	strb	r3, [r7, #23]
 8010f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f16:	2b09      	cmp	r3, #9
 8010f18:	ddd0      	ble.n	8010ebc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	69b9      	ldr	r1, [r7, #24]
 8010f1e:	68f8      	ldr	r0, [r7, #12]
 8010f20:	f000 f822 	bl	8010f68 <etharp_query>
 8010f24:	4603      	mov	r3, r0
 8010f26:	e00b      	b.n	8010f40 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8010f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	68b9      	ldr	r1, [r7, #8]
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f001 fcc9 	bl	80128d0 <ethernet_output>
 8010f3e:	4603      	mov	r3, r0
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3720      	adds	r7, #32
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	08016f0c 	.word	0x08016f0c
 8010f4c:	0801705c 	.word	0x0801705c
 8010f50:	08016f84 	.word	0x08016f84
 8010f54:	080170ac 	.word	0x080170ac
 8010f58:	0801704c 	.word	0x0801704c
 8010f5c:	08017790 	.word	0x08017790
 8010f60:	2000c710 	.word	0x2000c710
 8010f64:	2000c620 	.word	0x2000c620

08010f68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b08c      	sub	sp, #48	; 0x30
 8010f6c:	af02      	add	r7, sp, #8
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	3325      	adds	r3, #37	; 0x25
 8010f78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010f7a:	23ff      	movs	r3, #255	; 0xff
 8010f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010f80:	2300      	movs	r3, #0
 8010f82:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68f9      	ldr	r1, [r7, #12]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 fdfe 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10c      	bne.n	8010fb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f9e:	2be0      	cmp	r3, #224	; 0xe0
 8010fa0:	d006      	beq.n	8010fb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d003      	beq.n	8010fb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d102      	bne.n	8010fb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010fb0:	f06f 030f 	mvn.w	r3, #15
 8010fb4:	e10f      	b.n	80111d6 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	2101      	movs	r1, #1
 8010fba:	68b8      	ldr	r0, [r7, #8]
 8010fbc:	f7ff fba2 	bl	8010704 <etharp_find_entry>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010fc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	da02      	bge.n	8010fd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fd0:	e101      	b.n	80111d6 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010fd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010fd6:	4982      	ldr	r1, [pc, #520]	; (80111e0 <etharp_query+0x278>)
 8010fd8:	4613      	mov	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	4413      	add	r3, r2
 8010fde:	00db      	lsls	r3, r3, #3
 8010fe0:	440b      	add	r3, r1
 8010fe2:	3314      	adds	r3, #20
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d117      	bne.n	801101a <etharp_query+0xb2>
    is_new_entry = 1;
 8010fea:	2301      	movs	r3, #1
 8010fec:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010fee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010ff2:	497b      	ldr	r1, [pc, #492]	; (80111e0 <etharp_query+0x278>)
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	4413      	add	r3, r2
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	440b      	add	r3, r1
 8010ffe:	3314      	adds	r3, #20
 8011000:	2201      	movs	r2, #1
 8011002:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011004:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011008:	4975      	ldr	r1, [pc, #468]	; (80111e0 <etharp_query+0x278>)
 801100a:	4613      	mov	r3, r2
 801100c:	005b      	lsls	r3, r3, #1
 801100e:	4413      	add	r3, r2
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	440b      	add	r3, r1
 8011014:	3308      	adds	r3, #8
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801101a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801101e:	4970      	ldr	r1, [pc, #448]	; (80111e0 <etharp_query+0x278>)
 8011020:	4613      	mov	r3, r2
 8011022:	005b      	lsls	r3, r3, #1
 8011024:	4413      	add	r3, r2
 8011026:	00db      	lsls	r3, r3, #3
 8011028:	440b      	add	r3, r1
 801102a:	3314      	adds	r3, #20
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b01      	cmp	r3, #1
 8011030:	d012      	beq.n	8011058 <etharp_query+0xf0>
 8011032:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011036:	496a      	ldr	r1, [pc, #424]	; (80111e0 <etharp_query+0x278>)
 8011038:	4613      	mov	r3, r2
 801103a:	005b      	lsls	r3, r3, #1
 801103c:	4413      	add	r3, r2
 801103e:	00db      	lsls	r3, r3, #3
 8011040:	440b      	add	r3, r1
 8011042:	3314      	adds	r3, #20
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d806      	bhi.n	8011058 <etharp_query+0xf0>
 801104a:	4b66      	ldr	r3, [pc, #408]	; (80111e4 <etharp_query+0x27c>)
 801104c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011050:	4965      	ldr	r1, [pc, #404]	; (80111e8 <etharp_query+0x280>)
 8011052:	4866      	ldr	r0, [pc, #408]	; (80111ec <etharp_query+0x284>)
 8011054:	f002 ff1a 	bl	8013e8c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d102      	bne.n	8011064 <etharp_query+0xfc>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d10c      	bne.n	801107e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011064:	68b9      	ldr	r1, [r7, #8]
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f000 f976 	bl	8011358 <etharp_request>
 801106c:	4603      	mov	r3, r0
 801106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <etharp_query+0x116>
      return result;
 8011078:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801107c:	e0ab      	b.n	80111d6 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d106      	bne.n	8011092 <etharp_query+0x12a>
 8011084:	4b57      	ldr	r3, [pc, #348]	; (80111e4 <etharp_query+0x27c>)
 8011086:	f240 32db 	movw	r2, #987	; 0x3db
 801108a:	4959      	ldr	r1, [pc, #356]	; (80111f0 <etharp_query+0x288>)
 801108c:	4857      	ldr	r0, [pc, #348]	; (80111ec <etharp_query+0x284>)
 801108e:	f002 fefd 	bl	8013e8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011092:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011096:	4952      	ldr	r1, [pc, #328]	; (80111e0 <etharp_query+0x278>)
 8011098:	4613      	mov	r3, r2
 801109a:	005b      	lsls	r3, r3, #1
 801109c:	4413      	add	r3, r2
 801109e:	00db      	lsls	r3, r3, #3
 80110a0:	440b      	add	r3, r1
 80110a2:	3314      	adds	r3, #20
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d919      	bls.n	80110de <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80110aa:	7cfa      	ldrb	r2, [r7, #19]
 80110ac:	4b51      	ldr	r3, [pc, #324]	; (80111f4 <etharp_query+0x28c>)
 80110ae:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80110b0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80110b4:	4613      	mov	r3, r2
 80110b6:	005b      	lsls	r3, r3, #1
 80110b8:	4413      	add	r3, r2
 80110ba:	00db      	lsls	r3, r3, #3
 80110bc:	3308      	adds	r3, #8
 80110be:	4a48      	ldr	r2, [pc, #288]	; (80111e0 <etharp_query+0x278>)
 80110c0:	4413      	add	r3, r2
 80110c2:	1d1a      	adds	r2, r3, #4
 80110c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	4613      	mov	r3, r2
 80110cc:	697a      	ldr	r2, [r7, #20]
 80110ce:	6879      	ldr	r1, [r7, #4]
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f001 fbfd 	bl	80128d0 <ethernet_output>
 80110d6:	4603      	mov	r3, r0
 80110d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80110dc:	e079      	b.n	80111d2 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80110de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80110e2:	493f      	ldr	r1, [pc, #252]	; (80111e0 <etharp_query+0x278>)
 80110e4:	4613      	mov	r3, r2
 80110e6:	005b      	lsls	r3, r3, #1
 80110e8:	4413      	add	r3, r2
 80110ea:	00db      	lsls	r3, r3, #3
 80110ec:	440b      	add	r3, r1
 80110ee:	3314      	adds	r3, #20
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d16d      	bne.n	80111d2 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80110fe:	e01a      	b.n	8011136 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	895a      	ldrh	r2, [r3, #10]
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	429a      	cmp	r2, r3
 801110a:	d10a      	bne.n	8011122 <etharp_query+0x1ba>
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d006      	beq.n	8011122 <etharp_query+0x1ba>
 8011114:	4b33      	ldr	r3, [pc, #204]	; (80111e4 <etharp_query+0x27c>)
 8011116:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801111a:	4937      	ldr	r1, [pc, #220]	; (80111f8 <etharp_query+0x290>)
 801111c:	4833      	ldr	r0, [pc, #204]	; (80111ec <etharp_query+0x284>)
 801111e:	f002 feb5 	bl	8013e8c <iprintf>
      if (p->type != PBUF_ROM) {
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	7b1b      	ldrb	r3, [r3, #12]
 8011126:	2b01      	cmp	r3, #1
 8011128:	d002      	beq.n	8011130 <etharp_query+0x1c8>
        copy_needed = 1;
 801112a:	2301      	movs	r3, #1
 801112c:	61bb      	str	r3, [r7, #24]
        break;
 801112e:	e005      	b.n	801113c <etharp_query+0x1d4>
      }
      p = p->next;
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1e1      	bne.n	8011100 <etharp_query+0x198>
    }
    if (copy_needed) {
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d017      	beq.n	8011172 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	891b      	ldrh	r3, [r3, #8]
 8011146:	2200      	movs	r2, #0
 8011148:	4619      	mov	r1, r3
 801114a:	2002      	movs	r0, #2
 801114c:	f7f8 fcd0 	bl	8009af0 <pbuf_alloc>
 8011150:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d011      	beq.n	801117c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8011158:	6879      	ldr	r1, [r7, #4]
 801115a:	69f8      	ldr	r0, [r7, #28]
 801115c:	f7f9 f97a 	bl	800a454 <pbuf_copy>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00a      	beq.n	801117c <etharp_query+0x214>
          pbuf_free(p);
 8011166:	69f8      	ldr	r0, [r7, #28]
 8011168:	f7f9 f834 	bl	800a1d4 <pbuf_free>
          p = NULL;
 801116c:	2300      	movs	r3, #0
 801116e:	61fb      	str	r3, [r7, #28]
 8011170:	e004      	b.n	801117c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011176:	69f8      	ldr	r0, [r7, #28]
 8011178:	f7f9 f8de 	bl	800a338 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d024      	beq.n	80111cc <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011182:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011186:	4916      	ldr	r1, [pc, #88]	; (80111e0 <etharp_query+0x278>)
 8011188:	4613      	mov	r3, r2
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4413      	add	r3, r2
 801118e:	00db      	lsls	r3, r3, #3
 8011190:	440b      	add	r3, r1
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00b      	beq.n	80111b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8011198:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801119c:	4910      	ldr	r1, [pc, #64]	; (80111e0 <etharp_query+0x278>)
 801119e:	4613      	mov	r3, r2
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4413      	add	r3, r2
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	440b      	add	r3, r1
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f9 f812 	bl	800a1d4 <pbuf_free>
      }
      arp_table[i].q = p;
 80111b0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111b4:	490a      	ldr	r1, [pc, #40]	; (80111e0 <etharp_query+0x278>)
 80111b6:	4613      	mov	r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	4413      	add	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	440b      	add	r3, r1
 80111c0:	69fa      	ldr	r2, [r7, #28]
 80111c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111ca:	e002      	b.n	80111d2 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80111cc:	23ff      	movs	r3, #255	; 0xff
 80111ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80111d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3728      	adds	r7, #40	; 0x28
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	2000c620 	.word	0x2000c620
 80111e4:	08016f0c 	.word	0x08016f0c
 80111e8:	080170b8 	.word	0x080170b8
 80111ec:	08016f84 	.word	0x08016f84
 80111f0:	080170ac 	.word	0x080170ac
 80111f4:	2000c710 	.word	0x2000c710
 80111f8:	080170e0 	.word	0x080170e0

080111fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b08a      	sub	sp, #40	; 0x28
 8011200:	af02      	add	r7, sp, #8
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
 8011208:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d106      	bne.n	8011222 <etharp_raw+0x26>
 8011214:	4b3a      	ldr	r3, [pc, #232]	; (8011300 <etharp_raw+0x104>)
 8011216:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801121a:	493a      	ldr	r1, [pc, #232]	; (8011304 <etharp_raw+0x108>)
 801121c:	483a      	ldr	r0, [pc, #232]	; (8011308 <etharp_raw+0x10c>)
 801121e:	f002 fe35 	bl	8013e8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011222:	2200      	movs	r2, #0
 8011224:	211c      	movs	r1, #28
 8011226:	2002      	movs	r0, #2
 8011228:	f7f8 fc62 	bl	8009af0 <pbuf_alloc>
 801122c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d102      	bne.n	801123a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011234:	f04f 33ff 	mov.w	r3, #4294967295
 8011238:	e05d      	b.n	80112f6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801123a:	69bb      	ldr	r3, [r7, #24]
 801123c:	895b      	ldrh	r3, [r3, #10]
 801123e:	2b1b      	cmp	r3, #27
 8011240:	d806      	bhi.n	8011250 <etharp_raw+0x54>
 8011242:	4b2f      	ldr	r3, [pc, #188]	; (8011300 <etharp_raw+0x104>)
 8011244:	f240 4264 	movw	r2, #1124	; 0x464
 8011248:	4930      	ldr	r1, [pc, #192]	; (801130c <etharp_raw+0x110>)
 801124a:	482f      	ldr	r0, [pc, #188]	; (8011308 <etharp_raw+0x10c>)
 801124c:	f002 fe1e 	bl	8013e8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011256:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011258:	4618      	mov	r0, r3
 801125a:	f7f7 fe21 	bl	8008ea0 <lwip_htons>
 801125e:	4603      	mov	r3, r0
 8011260:	461a      	mov	r2, r3
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801126c:	2b06      	cmp	r3, #6
 801126e:	d006      	beq.n	801127e <etharp_raw+0x82>
 8011270:	4b23      	ldr	r3, [pc, #140]	; (8011300 <etharp_raw+0x104>)
 8011272:	f240 426b 	movw	r2, #1131	; 0x46b
 8011276:	4926      	ldr	r1, [pc, #152]	; (8011310 <etharp_raw+0x114>)
 8011278:	4823      	ldr	r0, [pc, #140]	; (8011308 <etharp_raw+0x10c>)
 801127a:	f002 fe07 	bl	8013e8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	3308      	adds	r3, #8
 8011282:	2206      	movs	r2, #6
 8011284:	6839      	ldr	r1, [r7, #0]
 8011286:	4618      	mov	r0, r3
 8011288:	f002 fded 	bl	8013e66 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	3312      	adds	r3, #18
 8011290:	2206      	movs	r2, #6
 8011292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011294:	4618      	mov	r0, r3
 8011296:	f002 fde6 	bl	8013e66 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	330e      	adds	r3, #14
 801129e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112a0:	6812      	ldr	r2, [r2, #0]
 80112a2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	3318      	adds	r3, #24
 80112a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112aa:	6812      	ldr	r2, [r2, #0]
 80112ac:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	2200      	movs	r2, #0
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	2200      	movs	r2, #0
 80112b6:	f042 0201 	orr.w	r2, r2, #1
 80112ba:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	2200      	movs	r2, #0
 80112c0:	f042 0208 	orr.w	r2, r2, #8
 80112c4:	709a      	strb	r2, [r3, #2]
 80112c6:	2200      	movs	r2, #0
 80112c8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	2206      	movs	r2, #6
 80112ce:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	2204      	movs	r2, #4
 80112d4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80112d6:	f640 0306 	movw	r3, #2054	; 0x806
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	69b9      	ldr	r1, [r7, #24]
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f001 faf4 	bl	80128d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80112e8:	69b8      	ldr	r0, [r7, #24]
 80112ea:	f7f8 ff73 	bl	800a1d4 <pbuf_free>
  p = NULL;
 80112ee:	2300      	movs	r3, #0
 80112f0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80112f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3720      	adds	r7, #32
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	08016f0c 	.word	0x08016f0c
 8011304:	0801705c 	.word	0x0801705c
 8011308:	08016f84 	.word	0x08016f84
 801130c:	080170fc 	.word	0x080170fc
 8011310:	08017130 	.word	0x08017130

08011314 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b088      	sub	sp, #32
 8011318:	af04      	add	r7, sp, #16
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011330:	2201      	movs	r2, #1
 8011332:	9203      	str	r2, [sp, #12]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	9202      	str	r2, [sp, #8]
 8011338:	4a06      	ldr	r2, [pc, #24]	; (8011354 <etharp_request_dst+0x40>)
 801133a:	9201      	str	r2, [sp, #4]
 801133c:	9300      	str	r3, [sp, #0]
 801133e:	4603      	mov	r3, r0
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f7ff ff5a 	bl	80111fc <etharp_raw>
 8011348:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801134a:	4618      	mov	r0, r3
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	08017798 	.word	0x08017798

08011358 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011362:	4a05      	ldr	r2, [pc, #20]	; (8011378 <etharp_request+0x20>)
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7ff ffd4 	bl	8011314 <etharp_request_dst>
 801136c:	4603      	mov	r3, r0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	08017790 	.word	0x08017790

0801137c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b08e      	sub	sp, #56	; 0x38
 8011380:	af04      	add	r7, sp, #16
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011386:	4b7a      	ldr	r3, [pc, #488]	; (8011570 <icmp_input+0x1f4>)
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	f003 030f 	and.w	r3, r3, #15
 8011396:	b29b      	uxth	r3, r3
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801139c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801139e:	2b13      	cmp	r3, #19
 80113a0:	f240 80d1 	bls.w	8011546 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	895b      	ldrh	r3, [r3, #10]
 80113a8:	2b03      	cmp	r3, #3
 80113aa:	f240 80ce 	bls.w	801154a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80113b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80113bc:	2b00      	cmp	r3, #0
 80113be:	f000 80bb 	beq.w	8011538 <icmp_input+0x1bc>
 80113c2:	2b08      	cmp	r3, #8
 80113c4:	f040 80bb 	bne.w	801153e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80113c8:	4b6a      	ldr	r3, [pc, #424]	; (8011574 <icmp_input+0x1f8>)
 80113ca:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80113cc:	4b68      	ldr	r3, [pc, #416]	; (8011570 <icmp_input+0x1f4>)
 80113ce:	695b      	ldr	r3, [r3, #20]
 80113d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113d4:	2be0      	cmp	r3, #224	; 0xe0
 80113d6:	f000 80bf 	beq.w	8011558 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80113da:	4b65      	ldr	r3, [pc, #404]	; (8011570 <icmp_input+0x1f4>)
 80113dc:	695a      	ldr	r2, [r3, #20]
 80113de:	4b64      	ldr	r3, [pc, #400]	; (8011570 <icmp_input+0x1f4>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4619      	mov	r1, r3
 80113e4:	4610      	mov	r0, r2
 80113e6:	f000 fbd1 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f040 80b5 	bne.w	801155c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	891b      	ldrh	r3, [r3, #8]
 80113f6:	2b07      	cmp	r3, #7
 80113f8:	f240 80a9 	bls.w	801154e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80113fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113fe:	330e      	adds	r3, #14
 8011400:	b29b      	uxth	r3, r3
 8011402:	b21b      	sxth	r3, r3
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7f8 fec0 	bl	800a18c <pbuf_header>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d046      	beq.n	80114a0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	891a      	ldrh	r2, [r3, #8]
 8011416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011418:	4413      	add	r3, r2
 801141a:	b29b      	uxth	r3, r3
 801141c:	2200      	movs	r2, #0
 801141e:	4619      	mov	r1, r3
 8011420:	2002      	movs	r0, #2
 8011422:	f7f8 fb65 	bl	8009af0 <pbuf_alloc>
 8011426:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 8098 	beq.w	8011560 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	895b      	ldrh	r3, [r3, #10]
 8011434:	461a      	mov	r2, r3
 8011436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011438:	3308      	adds	r3, #8
 801143a:	429a      	cmp	r2, r3
 801143c:	d203      	bcs.n	8011446 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801143e:	69b8      	ldr	r0, [r7, #24]
 8011440:	f7f8 fec8 	bl	800a1d4 <pbuf_free>
        goto icmperr;
 8011444:	e08d      	b.n	8011562 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801144c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801144e:	4618      	mov	r0, r3
 8011450:	f002 fd09 	bl	8013e66 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011454:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011456:	425b      	negs	r3, r3
 8011458:	b29b      	uxth	r3, r3
 801145a:	b21b      	sxth	r3, r3
 801145c:	4619      	mov	r1, r3
 801145e:	69b8      	ldr	r0, [r7, #24]
 8011460:	f7f8 fe94 	bl	800a18c <pbuf_header>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d009      	beq.n	801147e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801146a:	4b43      	ldr	r3, [pc, #268]	; (8011578 <icmp_input+0x1fc>)
 801146c:	22af      	movs	r2, #175	; 0xaf
 801146e:	4943      	ldr	r1, [pc, #268]	; (801157c <icmp_input+0x200>)
 8011470:	4843      	ldr	r0, [pc, #268]	; (8011580 <icmp_input+0x204>)
 8011472:	f002 fd0b 	bl	8013e8c <iprintf>
        pbuf_free(r);
 8011476:	69b8      	ldr	r0, [r7, #24]
 8011478:	f7f8 feac 	bl	800a1d4 <pbuf_free>
        goto icmperr;
 801147c:	e071      	b.n	8011562 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801147e:	6879      	ldr	r1, [r7, #4]
 8011480:	69b8      	ldr	r0, [r7, #24]
 8011482:	f7f8 ffe7 	bl	800a454 <pbuf_copy>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d003      	beq.n	8011494 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801148c:	69b8      	ldr	r0, [r7, #24]
 801148e:	f7f8 fea1 	bl	800a1d4 <pbuf_free>
        goto icmperr;
 8011492:	e066      	b.n	8011562 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7f8 fe9d 	bl	800a1d4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	607b      	str	r3, [r7, #4]
 801149e:	e015      	b.n	80114cc <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80114a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114a2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80114a6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80114aa:	33f2      	adds	r3, #242	; 0xf2
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	b21b      	sxth	r3, r3
 80114b0:	4619      	mov	r1, r3
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7f8 fe6a 	bl	800a18c <pbuf_header>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d006      	beq.n	80114cc <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80114be:	4b2e      	ldr	r3, [pc, #184]	; (8011578 <icmp_input+0x1fc>)
 80114c0:	22c0      	movs	r2, #192	; 0xc0
 80114c2:	4930      	ldr	r1, [pc, #192]	; (8011584 <icmp_input+0x208>)
 80114c4:	482e      	ldr	r0, [pc, #184]	; (8011580 <icmp_input+0x204>)
 80114c6:	f002 fce1 	bl	8013e8c <iprintf>
        goto icmperr;
 80114ca:	e04a      	b.n	8011562 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80114d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114d6:	4619      	mov	r1, r3
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7f8 fe57 	bl	800a18c <pbuf_header>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d12b      	bne.n	801153c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80114f2:	4b1f      	ldr	r3, [pc, #124]	; (8011570 <icmp_input+0x1f4>)
 80114f4:	691a      	ldr	r2, [r3, #16]
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2200      	movs	r2, #0
 80114fe:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	2200      	movs	r2, #0
 8011504:	709a      	strb	r2, [r3, #2]
 8011506:	2200      	movs	r2, #0
 8011508:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	22ff      	movs	r2, #255	; 0xff
 801150e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	2200      	movs	r2, #0
 8011514:	729a      	strb	r2, [r3, #10]
 8011516:	2200      	movs	r2, #0
 8011518:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	9302      	str	r3, [sp, #8]
 801151e:	2301      	movs	r3, #1
 8011520:	9301      	str	r3, [sp, #4]
 8011522:	2300      	movs	r3, #0
 8011524:	9300      	str	r3, [sp, #0]
 8011526:	23ff      	movs	r3, #255	; 0xff
 8011528:	2200      	movs	r2, #0
 801152a:	69f9      	ldr	r1, [r7, #28]
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f000 fa5b 	bl	80119e8 <ip4_output_if>
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8011536:	e001      	b.n	801153c <icmp_input+0x1c0>
    break;
 8011538:	bf00      	nop
 801153a:	e000      	b.n	801153e <icmp_input+0x1c2>
    break;
 801153c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7f8 fe48 	bl	800a1d4 <pbuf_free>
  return;
 8011544:	e011      	b.n	801156a <icmp_input+0x1ee>
    goto lenerr;
 8011546:	bf00      	nop
 8011548:	e002      	b.n	8011550 <icmp_input+0x1d4>
    goto lenerr;
 801154a:	bf00      	nop
 801154c:	e000      	b.n	8011550 <icmp_input+0x1d4>
      goto lenerr;
 801154e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7f8 fe3f 	bl	800a1d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011556:	e008      	b.n	801156a <icmp_input+0x1ee>
      goto icmperr;
 8011558:	bf00      	nop
 801155a:	e002      	b.n	8011562 <icmp_input+0x1e6>
      goto icmperr;
 801155c:	bf00      	nop
 801155e:	e000      	b.n	8011562 <icmp_input+0x1e6>
        goto icmperr;
 8011560:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7f8 fe36 	bl	800a1d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011568:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801156a:	3728      	adds	r7, #40	; 0x28
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	2000ce3c 	.word	0x2000ce3c
 8011574:	2000ce50 	.word	0x2000ce50
 8011578:	08017174 	.word	0x08017174
 801157c:	080171ac 	.word	0x080171ac
 8011580:	080171e4 	.word	0x080171e4
 8011584:	0801720c 	.word	0x0801720c

08011588 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	460b      	mov	r3, r1
 8011592:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011594:	78fb      	ldrb	r3, [r7, #3]
 8011596:	461a      	mov	r2, r3
 8011598:	2103      	movs	r1, #3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f000 f814 	bl	80115c8 <icmp_send_response>
}
 80115a0:	bf00      	nop
 80115a2:	3708      	adds	r7, #8
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80115b4:	78fb      	ldrb	r3, [r7, #3]
 80115b6:	461a      	mov	r2, r3
 80115b8:	210b      	movs	r1, #11
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f804 	bl	80115c8 <icmp_send_response>
}
 80115c0:	bf00      	nop
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08c      	sub	sp, #48	; 0x30
 80115cc:	af04      	add	r7, sp, #16
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	460b      	mov	r3, r1
 80115d2:	70fb      	strb	r3, [r7, #3]
 80115d4:	4613      	mov	r3, r2
 80115d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80115d8:	2200      	movs	r2, #0
 80115da:	2124      	movs	r1, #36	; 0x24
 80115dc:	2001      	movs	r0, #1
 80115de:	f7f8 fa87 	bl	8009af0 <pbuf_alloc>
 80115e2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d04c      	beq.n	8011684 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	895b      	ldrh	r3, [r3, #10]
 80115ee:	2b23      	cmp	r3, #35	; 0x23
 80115f0:	d806      	bhi.n	8011600 <icmp_send_response+0x38>
 80115f2:	4b26      	ldr	r3, [pc, #152]	; (801168c <icmp_send_response+0xc4>)
 80115f4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80115f8:	4925      	ldr	r1, [pc, #148]	; (8011690 <icmp_send_response+0xc8>)
 80115fa:	4826      	ldr	r0, [pc, #152]	; (8011694 <icmp_send_response+0xcc>)
 80115fc:	f002 fc46 	bl	8013e8c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	78fa      	ldrb	r2, [r7, #3]
 8011610:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	78ba      	ldrb	r2, [r7, #2]
 8011616:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2200      	movs	r2, #0
 801161c:	711a      	strb	r2, [r3, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2200      	movs	r2, #0
 8011626:	719a      	strb	r2, [r3, #6]
 8011628:	2200      	movs	r2, #0
 801162a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801162c:	69fb      	ldr	r3, [r7, #28]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	f103 0008 	add.w	r0, r3, #8
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	221c      	movs	r2, #28
 801163a:	4619      	mov	r1, r3
 801163c:	f002 fc13 	bl	8013e66 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011646:	f107 030c 	add.w	r3, r7, #12
 801164a:	4618      	mov	r0, r3
 801164c:	f000 f824 	bl	8011698 <ip4_route>
 8011650:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d011      	beq.n	801167c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	2200      	movs	r2, #0
 801165c:	709a      	strb	r2, [r3, #2]
 801165e:	2200      	movs	r2, #0
 8011660:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011662:	f107 020c 	add.w	r2, r7, #12
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	9302      	str	r3, [sp, #8]
 801166a:	2301      	movs	r3, #1
 801166c:	9301      	str	r3, [sp, #4]
 801166e:	2300      	movs	r3, #0
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	23ff      	movs	r3, #255	; 0xff
 8011674:	2100      	movs	r1, #0
 8011676:	69f8      	ldr	r0, [r7, #28]
 8011678:	f000 f9b6 	bl	80119e8 <ip4_output_if>
  }
  pbuf_free(q);
 801167c:	69f8      	ldr	r0, [r7, #28]
 801167e:	f7f8 fda9 	bl	800a1d4 <pbuf_free>
 8011682:	e000      	b.n	8011686 <icmp_send_response+0xbe>
    return;
 8011684:	bf00      	nop
}
 8011686:	3720      	adds	r7, #32
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	08017174 	.word	0x08017174
 8011690:	08017240 	.word	0x08017240
 8011694:	080171e4 	.word	0x080171e4

08011698 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80116a0:	4b30      	ldr	r3, [pc, #192]	; (8011764 <ip4_route+0xcc>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	60fb      	str	r3, [r7, #12]
 80116a6:	e036      	b.n	8011716 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80116ae:	f003 0301 	and.w	r3, r3, #1
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d02b      	beq.n	8011710 <ip4_route+0x78>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80116be:	089b      	lsrs	r3, r3, #2
 80116c0:	f003 0301 	and.w	r3, r3, #1
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d022      	beq.n	8011710 <ip4_route+0x78>
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	3304      	adds	r3, #4
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d01d      	beq.n	8011710 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	3304      	adds	r3, #4
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	405a      	eors	r2, r3
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	3308      	adds	r3, #8
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4013      	ands	r3, r2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	e033      	b.n	8011758 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80116f6:	f003 0302 	and.w	r3, r3, #2
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d108      	bne.n	8011710 <ip4_route+0x78>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	330c      	adds	r3, #12
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	429a      	cmp	r2, r3
 801170a:	d101      	bne.n	8011710 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	e023      	b.n	8011758 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d1c5      	bne.n	80116a8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801171c:	4b12      	ldr	r3, [pc, #72]	; (8011768 <ip4_route+0xd0>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d015      	beq.n	8011750 <ip4_route+0xb8>
 8011724:	4b10      	ldr	r3, [pc, #64]	; (8011768 <ip4_route+0xd0>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801172c:	f003 0301 	and.w	r3, r3, #1
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00d      	beq.n	8011750 <ip4_route+0xb8>
 8011734:	4b0c      	ldr	r3, [pc, #48]	; (8011768 <ip4_route+0xd0>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801173c:	f003 0304 	and.w	r3, r3, #4
 8011740:	2b00      	cmp	r3, #0
 8011742:	d005      	beq.n	8011750 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8011744:	4b08      	ldr	r3, [pc, #32]	; (8011768 <ip4_route+0xd0>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3304      	adds	r3, #4
 801174a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801174c:	2b00      	cmp	r3, #0
 801174e:	d101      	bne.n	8011754 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011750:	2300      	movs	r3, #0
 8011752:	e001      	b.n	8011758 <ip4_route+0xc0>
  }

  return netif_default;
 8011754:	4b04      	ldr	r3, [pc, #16]	; (8011768 <ip4_route+0xd0>)
 8011756:	681b      	ldr	r3, [r3, #0]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	2001053c 	.word	0x2001053c
 8011768:	20010540 	.word	0x20010540

0801176c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	091b      	lsrs	r3, r3, #4
 8011782:	b2db      	uxtb	r3, r3
 8011784:	2b04      	cmp	r3, #4
 8011786:	d004      	beq.n	8011792 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f7f8 fd23 	bl	800a1d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801178e:	2300      	movs	r3, #0
 8011790:	e122      	b.n	80119d8 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	b29b      	uxth	r3, r3
 8011798:	f003 030f 	and.w	r3, r3, #15
 801179c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801179e:	897b      	ldrh	r3, [r7, #10]
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	885b      	ldrh	r3, [r3, #2]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7f7 fb78 	bl	8008ea0 <lwip_htons>
 80117b0:	4603      	mov	r3, r0
 80117b2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	891b      	ldrh	r3, [r3, #8]
 80117b8:	893a      	ldrh	r2, [r7, #8]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d204      	bcs.n	80117c8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80117be:	893b      	ldrh	r3, [r7, #8]
 80117c0:	4619      	mov	r1, r3
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7f8 fb92 	bl	8009eec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	895b      	ldrh	r3, [r3, #10]
 80117cc:	897a      	ldrh	r2, [r7, #10]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d807      	bhi.n	80117e2 <ip4_input+0x76>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	891b      	ldrh	r3, [r3, #8]
 80117d6:	893a      	ldrh	r2, [r7, #8]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d802      	bhi.n	80117e2 <ip4_input+0x76>
 80117dc:	897b      	ldrh	r3, [r7, #10]
 80117de:	2b13      	cmp	r3, #19
 80117e0:	d804      	bhi.n	80117ec <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7f8 fcf6 	bl	800a1d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80117e8:	2300      	movs	r3, #0
 80117ea:	e0f5      	b.n	80119d8 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	691b      	ldr	r3, [r3, #16]
 80117f0:	4a7b      	ldr	r2, [pc, #492]	; (80119e0 <ip4_input+0x274>)
 80117f2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	4a79      	ldr	r2, [pc, #484]	; (80119e0 <ip4_input+0x274>)
 80117fa:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117fc:	4b78      	ldr	r3, [pc, #480]	; (80119e0 <ip4_input+0x274>)
 80117fe:	695b      	ldr	r3, [r3, #20]
 8011800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011804:	2be0      	cmp	r3, #224	; 0xe0
 8011806:	d112      	bne.n	801182e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801180e:	f003 0301 	and.w	r3, r3, #1
 8011812:	b2db      	uxtb	r3, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	d007      	beq.n	8011828 <ip4_input+0xbc>
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	3304      	adds	r3, #4
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d002      	beq.n	8011828 <ip4_input+0xbc>
      netif = inp;
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	613b      	str	r3, [r7, #16]
 8011826:	e041      	b.n	80118ac <ip4_input+0x140>
    } else {
      netif = NULL;
 8011828:	2300      	movs	r3, #0
 801182a:	613b      	str	r3, [r7, #16]
 801182c:	e03e      	b.n	80118ac <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801182e:	2301      	movs	r3, #1
 8011830:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801183c:	f003 0301 	and.w	r3, r3, #1
 8011840:	b2db      	uxtb	r3, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	d014      	beq.n	8011870 <ip4_input+0x104>
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	3304      	adds	r3, #4
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00f      	beq.n	8011870 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011850:	4b63      	ldr	r3, [pc, #396]	; (80119e0 <ip4_input+0x274>)
 8011852:	695a      	ldr	r2, [r3, #20]
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	3304      	adds	r3, #4
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	429a      	cmp	r2, r3
 801185c:	d026      	beq.n	80118ac <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801185e:	4b60      	ldr	r3, [pc, #384]	; (80119e0 <ip4_input+0x274>)
 8011860:	695b      	ldr	r3, [r3, #20]
 8011862:	6939      	ldr	r1, [r7, #16]
 8011864:	4618      	mov	r0, r3
 8011866:	f000 f991 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 801186a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801186c:	2b00      	cmp	r3, #0
 801186e:	d11d      	bne.n	80118ac <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00d      	beq.n	8011892 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011876:	4b5a      	ldr	r3, [pc, #360]	; (80119e0 <ip4_input+0x274>)
 8011878:	695b      	ldr	r3, [r3, #20]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b7f      	cmp	r3, #127	; 0x7f
 801187e:	d102      	bne.n	8011886 <ip4_input+0x11a>
          netif = NULL;
 8011880:	2300      	movs	r3, #0
 8011882:	613b      	str	r3, [r7, #16]
          break;
 8011884:	e012      	b.n	80118ac <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801188a:	4b56      	ldr	r3, [pc, #344]	; (80119e4 <ip4_input+0x278>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	613b      	str	r3, [r7, #16]
 8011890:	e002      	b.n	8011898 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8011898:	693a      	ldr	r2, [r7, #16]
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	429a      	cmp	r2, r3
 801189e:	d102      	bne.n	80118a6 <ip4_input+0x13a>
        netif = netif->next;
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d1c4      	bne.n	8011836 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118ac:	4b4c      	ldr	r3, [pc, #304]	; (80119e0 <ip4_input+0x274>)
 80118ae:	691b      	ldr	r3, [r3, #16]
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f000 f96a 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d105      	bne.n	80118ca <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80118be:	4b48      	ldr	r3, [pc, #288]	; (80119e0 <ip4_input+0x274>)
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118c6:	2be0      	cmp	r3, #224	; 0xe0
 80118c8:	d104      	bne.n	80118d4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7f8 fc82 	bl	800a1d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80118d0:	2300      	movs	r3, #0
 80118d2:	e081      	b.n	80119d8 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d104      	bne.n	80118e4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f7f8 fc7a 	bl	800a1d4 <pbuf_free>
    return ERR_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e079      	b.n	80119d8 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	88db      	ldrh	r3, [r3, #6]
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	461a      	mov	r2, r3
 80118ec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80118f0:	4013      	ands	r3, r2
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00b      	beq.n	801190e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fc8e 	bl	8012218 <ip4_reass>
 80118fc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d101      	bne.n	8011908 <ip4_input+0x19c>
      return ERR_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	e067      	b.n	80119d8 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801190e:	4a34      	ldr	r2, [pc, #208]	; (80119e0 <ip4_input+0x274>)
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011914:	4a32      	ldr	r2, [pc, #200]	; (80119e0 <ip4_input+0x274>)
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801191a:	4a31      	ldr	r2, [pc, #196]	; (80119e0 <ip4_input+0x274>)
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	b29b      	uxth	r3, r3
 8011926:	f003 030f 	and.w	r3, r3, #15
 801192a:	b29b      	uxth	r3, r3
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	b29a      	uxth	r2, r3
 8011930:	4b2b      	ldr	r3, [pc, #172]	; (80119e0 <ip4_input+0x274>)
 8011932:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011934:	897b      	ldrh	r3, [r7, #10]
 8011936:	425b      	negs	r3, r3
 8011938:	b29b      	uxth	r3, r3
 801193a:	b21b      	sxth	r3, r3
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7f8 fc24 	bl	800a18c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	7a5b      	ldrb	r3, [r3, #9]
 8011948:	2b06      	cmp	r3, #6
 801194a:	d009      	beq.n	8011960 <ip4_input+0x1f4>
 801194c:	2b11      	cmp	r3, #17
 801194e:	d002      	beq.n	8011956 <ip4_input+0x1ea>
 8011950:	2b01      	cmp	r3, #1
 8011952:	d00a      	beq.n	801196a <ip4_input+0x1fe>
 8011954:	e00e      	b.n	8011974 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7fe faf1 	bl	800ff40 <udp_input>
      break;
 801195e:	e028      	b.n	80119b2 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7fa fb10 	bl	800bf88 <tcp_input>
      break;
 8011968:	e023      	b.n	80119b2 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801196a:	6839      	ldr	r1, [r7, #0]
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7ff fd05 	bl	801137c <icmp_input>
      break;
 8011972:	e01e      	b.n	80119b2 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011974:	4b1a      	ldr	r3, [pc, #104]	; (80119e0 <ip4_input+0x274>)
 8011976:	695b      	ldr	r3, [r3, #20]
 8011978:	6939      	ldr	r1, [r7, #16]
 801197a:	4618      	mov	r0, r3
 801197c:	f000 f906 	bl	8011b8c <ip4_addr_isbroadcast_u32>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d112      	bne.n	80119ac <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011986:	4b16      	ldr	r3, [pc, #88]	; (80119e0 <ip4_input+0x274>)
 8011988:	695b      	ldr	r3, [r3, #20]
 801198a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801198e:	2be0      	cmp	r3, #224	; 0xe0
 8011990:	d00c      	beq.n	80119ac <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8011992:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011996:	4619      	mov	r1, r3
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7f8 fc09 	bl	800a1b0 <pbuf_header_force>
        p->payload = iphdr;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	697a      	ldr	r2, [r7, #20]
 80119a2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80119a4:	2102      	movs	r1, #2
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fdee 	bl	8011588 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7f8 fc11 	bl	800a1d4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80119b2:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <ip4_input+0x274>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80119b8:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <ip4_input+0x274>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80119be:	4b08      	ldr	r3, [pc, #32]	; (80119e0 <ip4_input+0x274>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80119c4:	4b06      	ldr	r3, [pc, #24]	; (80119e0 <ip4_input+0x274>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80119ca:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <ip4_input+0x274>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80119d0:	4b03      	ldr	r3, [pc, #12]	; (80119e0 <ip4_input+0x274>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	2000ce3c 	.word	0x2000ce3c
 80119e4:	2001053c 	.word	0x2001053c

080119e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b08a      	sub	sp, #40	; 0x28
 80119ec:	af04      	add	r7, sp, #16
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	607a      	str	r2, [r7, #4]
 80119f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d009      	beq.n	8011a14 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d003      	beq.n	8011a0e <ip4_output_if+0x26>
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d102      	bne.n	8011a14 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a10:	3304      	adds	r3, #4
 8011a12:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011a14:	78fa      	ldrb	r2, [r7, #3]
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	9302      	str	r3, [sp, #8]
 8011a1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	4613      	mov	r3, r2
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	6979      	ldr	r1, [r7, #20]
 8011a2c:	68f8      	ldr	r0, [r7, #12]
 8011a2e:	f000 f805 	bl	8011a3c <ip4_output_if_src>
 8011a32:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3718      	adds	r7, #24
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b088      	sub	sp, #32
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
 8011a48:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	89db      	ldrh	r3, [r3, #14]
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d006      	beq.n	8011a60 <ip4_output_if_src+0x24>
 8011a52:	4b48      	ldr	r3, [pc, #288]	; (8011b74 <ip4_output_if_src+0x138>)
 8011a54:	f240 3233 	movw	r2, #819	; 0x333
 8011a58:	4947      	ldr	r1, [pc, #284]	; (8011b78 <ip4_output_if_src+0x13c>)
 8011a5a:	4848      	ldr	r0, [pc, #288]	; (8011b7c <ip4_output_if_src+0x140>)
 8011a5c:	f002 fa16 	bl	8013e8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d060      	beq.n	8011b28 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011a66:	2314      	movs	r3, #20
 8011a68:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011a6a:	2114      	movs	r1, #20
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f7f8 fb8d 	bl	800a18c <pbuf_header>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a78:	f06f 0301 	mvn.w	r3, #1
 8011a7c:	e075      	b.n	8011b6a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	895b      	ldrh	r3, [r3, #10]
 8011a88:	2b13      	cmp	r3, #19
 8011a8a:	d806      	bhi.n	8011a9a <ip4_output_if_src+0x5e>
 8011a8c:	4b39      	ldr	r3, [pc, #228]	; (8011b74 <ip4_output_if_src+0x138>)
 8011a8e:	f240 3261 	movw	r2, #865	; 0x361
 8011a92:	493b      	ldr	r1, [pc, #236]	; (8011b80 <ip4_output_if_src+0x144>)
 8011a94:	4839      	ldr	r0, [pc, #228]	; (8011b7c <ip4_output_if_src+0x140>)
 8011a96:	f002 f9f9 	bl	8013e8c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	78fa      	ldrb	r2, [r7, #3]
 8011a9e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011aa6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011ab0:	8b7b      	ldrh	r3, [r7, #26]
 8011ab2:	089b      	lsrs	r3, r3, #2
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011abc:	b2da      	uxtb	r2, r3
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ac8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	891b      	ldrh	r3, [r3, #8]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f7 f9e6 	bl	8008ea0 <lwip_htons>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	719a      	strb	r2, [r3, #6]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011ae6:	4b27      	ldr	r3, [pc, #156]	; (8011b84 <ip4_output_if_src+0x148>)
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7f7 f9d8 	bl	8008ea0 <lwip_htons>
 8011af0:	4603      	mov	r3, r0
 8011af2:	461a      	mov	r2, r3
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011af8:	4b22      	ldr	r3, [pc, #136]	; (8011b84 <ip4_output_if_src+0x148>)
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	3301      	adds	r3, #1
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	4b20      	ldr	r3, [pc, #128]	; (8011b84 <ip4_output_if_src+0x148>)
 8011b02:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d104      	bne.n	8011b14 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011b0a:	4b1f      	ldr	r3, [pc, #124]	; (8011b88 <ip4_output_if_src+0x14c>)
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	60da      	str	r2, [r3, #12]
 8011b12:	e003      	b.n	8011b1c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	681a      	ldr	r2, [r3, #0]
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	729a      	strb	r2, [r3, #10]
 8011b22:	2200      	movs	r2, #0
 8011b24:	72da      	strb	r2, [r3, #11]
 8011b26:	e008      	b.n	8011b3a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	691b      	ldr	r3, [r3, #16]
 8011b32:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011b34:	f107 0314 	add.w	r3, r7, #20
 8011b38:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00c      	beq.n	8011b5c <ip4_output_if_src+0x120>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	891a      	ldrh	r2, [r3, #8]
 8011b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d906      	bls.n	8011b5c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b52:	68f8      	ldr	r0, [r7, #12]
 8011b54:	f000 fd0a 	bl	801256c <ip4_frag>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	e006      	b.n	8011b6a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5e:	695b      	ldr	r3, [r3, #20]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	68f9      	ldr	r1, [r7, #12]
 8011b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b66:	4798      	blx	r3
 8011b68:	4603      	mov	r3, r0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3720      	adds	r7, #32
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	0801726c 	.word	0x0801726c
 8011b78:	080172a0 	.word	0x080172a0
 8011b7c:	080172ac 	.word	0x080172ac
 8011b80:	080172d4 	.word	0x080172d4
 8011b84:	2000c712 	.word	0x2000c712
 8011b88:	0801778c 	.word	0x0801778c

08011b8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b085      	sub	sp, #20
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba0:	d002      	beq.n	8011ba8 <ip4_addr_isbroadcast_u32+0x1c>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d101      	bne.n	8011bac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e02a      	b.n	8011c02 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8011bb2:	f003 0302 	and.w	r3, r3, #2
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d101      	bne.n	8011bbe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e021      	b.n	8011c02 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d101      	bne.n	8011bce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e019      	b.n	8011c02 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	405a      	eors	r2, r3
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	3308      	adds	r3, #8
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4013      	ands	r3, r2
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10d      	bne.n	8011c00 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	3308      	adds	r3, #8
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	43da      	mvns	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	3308      	adds	r3, #8
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d101      	bne.n	8011c00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e000      	b.n	8011c02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011c00:	2300      	movs	r3, #0
  }
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3714      	adds	r7, #20
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
	...

08011c10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011c1a:	4b12      	ldr	r3, [pc, #72]	; (8011c64 <ip_reass_tmr+0x54>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011c20:	e018      	b.n	8011c54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	7fdb      	ldrb	r3, [r3, #31]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00b      	beq.n	8011c42 <ip_reass_tmr+0x32>
      r->timer--;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	7fdb      	ldrb	r3, [r3, #31]
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	e008      	b.n	8011c54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011c4c:	68b9      	ldr	r1, [r7, #8]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 f80a 	bl	8011c68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d1e3      	bne.n	8011c22 <ip_reass_tmr+0x12>
     }
   }
}
 8011c5a:	bf00      	nop
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	2000c714 	.word	0x2000c714

08011c68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b088      	sub	sp, #32
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011c72:	2300      	movs	r3, #0
 8011c74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011c76:	683a      	ldr	r2, [r7, #0]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d105      	bne.n	8011c8a <ip_reass_free_complete_datagram+0x22>
 8011c7e:	4b45      	ldr	r3, [pc, #276]	; (8011d94 <ip_reass_free_complete_datagram+0x12c>)
 8011c80:	22ab      	movs	r2, #171	; 0xab
 8011c82:	4945      	ldr	r1, [pc, #276]	; (8011d98 <ip_reass_free_complete_datagram+0x130>)
 8011c84:	4845      	ldr	r0, [pc, #276]	; (8011d9c <ip_reass_free_complete_datagram+0x134>)
 8011c86:	f002 f901 	bl	8013e8c <iprintf>
  if (prev != NULL) {
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00a      	beq.n	8011ca6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d005      	beq.n	8011ca6 <ip_reass_free_complete_datagram+0x3e>
 8011c9a:	4b3e      	ldr	r3, [pc, #248]	; (8011d94 <ip_reass_free_complete_datagram+0x12c>)
 8011c9c:	22ad      	movs	r2, #173	; 0xad
 8011c9e:	4940      	ldr	r1, [pc, #256]	; (8011da0 <ip_reass_free_complete_datagram+0x138>)
 8011ca0:	483e      	ldr	r0, [pc, #248]	; (8011d9c <ip_reass_free_complete_datagram+0x134>)
 8011ca2:	f002 f8f3 	bl	8013e8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	889b      	ldrh	r3, [r3, #4]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d12a      	bne.n	8011d0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	6858      	ldr	r0, [r3, #4]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	3308      	adds	r3, #8
 8011cce:	2214      	movs	r2, #20
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f002 f8c8 	bl	8013e66 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	69b8      	ldr	r0, [r7, #24]
 8011cda:	f7ff fc65 	bl	80115a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011cde:	69b8      	ldr	r0, [r7, #24]
 8011ce0:	f7f8 fb12 	bl	800a308 <pbuf_clen>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011ce8:	8bfa      	ldrh	r2, [r7, #30]
 8011cea:	8a7b      	ldrh	r3, [r7, #18]
 8011cec:	4413      	add	r3, r2
 8011cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cf2:	db05      	blt.n	8011d00 <ip_reass_free_complete_datagram+0x98>
 8011cf4:	4b27      	ldr	r3, [pc, #156]	; (8011d94 <ip_reass_free_complete_datagram+0x12c>)
 8011cf6:	22bc      	movs	r2, #188	; 0xbc
 8011cf8:	492a      	ldr	r1, [pc, #168]	; (8011da4 <ip_reass_free_complete_datagram+0x13c>)
 8011cfa:	4828      	ldr	r0, [pc, #160]	; (8011d9c <ip_reass_free_complete_datagram+0x134>)
 8011cfc:	f002 f8c6 	bl	8013e8c <iprintf>
    pbufs_freed += clen;
 8011d00:	8bfa      	ldrh	r2, [r7, #30]
 8011d02:	8a7b      	ldrh	r3, [r7, #18]
 8011d04:	4413      	add	r3, r2
 8011d06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011d08:	69b8      	ldr	r0, [r7, #24]
 8011d0a:	f7f8 fa63 	bl	800a1d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011d14:	e01f      	b.n	8011d56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011d26:	68f8      	ldr	r0, [r7, #12]
 8011d28:	f7f8 faee 	bl	800a308 <pbuf_clen>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d30:	8bfa      	ldrh	r2, [r7, #30]
 8011d32:	8a7b      	ldrh	r3, [r7, #18]
 8011d34:	4413      	add	r3, r2
 8011d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d3a:	db05      	blt.n	8011d48 <ip_reass_free_complete_datagram+0xe0>
 8011d3c:	4b15      	ldr	r3, [pc, #84]	; (8011d94 <ip_reass_free_complete_datagram+0x12c>)
 8011d3e:	22cc      	movs	r2, #204	; 0xcc
 8011d40:	4918      	ldr	r1, [pc, #96]	; (8011da4 <ip_reass_free_complete_datagram+0x13c>)
 8011d42:	4816      	ldr	r0, [pc, #88]	; (8011d9c <ip_reass_free_complete_datagram+0x134>)
 8011d44:	f002 f8a2 	bl	8013e8c <iprintf>
    pbufs_freed += clen;
 8011d48:	8bfa      	ldrh	r2, [r7, #30]
 8011d4a:	8a7b      	ldrh	r3, [r7, #18]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f7f8 fa3f 	bl	800a1d4 <pbuf_free>
  while (p != NULL) {
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1dc      	bne.n	8011d16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011d5c:	6839      	ldr	r1, [r7, #0]
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 f8c2 	bl	8011ee8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011d64:	4b10      	ldr	r3, [pc, #64]	; (8011da8 <ip_reass_free_complete_datagram+0x140>)
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	8bfa      	ldrh	r2, [r7, #30]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d905      	bls.n	8011d7a <ip_reass_free_complete_datagram+0x112>
 8011d6e:	4b09      	ldr	r3, [pc, #36]	; (8011d94 <ip_reass_free_complete_datagram+0x12c>)
 8011d70:	22d2      	movs	r2, #210	; 0xd2
 8011d72:	490e      	ldr	r1, [pc, #56]	; (8011dac <ip_reass_free_complete_datagram+0x144>)
 8011d74:	4809      	ldr	r0, [pc, #36]	; (8011d9c <ip_reass_free_complete_datagram+0x134>)
 8011d76:	f002 f889 	bl	8013e8c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011d7a:	4b0b      	ldr	r3, [pc, #44]	; (8011da8 <ip_reass_free_complete_datagram+0x140>)
 8011d7c:	881a      	ldrh	r2, [r3, #0]
 8011d7e:	8bfb      	ldrh	r3, [r7, #30]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	4b08      	ldr	r3, [pc, #32]	; (8011da8 <ip_reass_free_complete_datagram+0x140>)
 8011d86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011d88:	8bfb      	ldrh	r3, [r7, #30]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3720      	adds	r7, #32
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	08017304 	.word	0x08017304
 8011d98:	08017340 	.word	0x08017340
 8011d9c:	0801734c 	.word	0x0801734c
 8011da0:	08017374 	.word	0x08017374
 8011da4:	08017388 	.word	0x08017388
 8011da8:	2000c718 	.word	0x2000c718
 8011dac:	080173a8 	.word	0x080173a8

08011db0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b08a      	sub	sp, #40	; 0x28
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011dce:	4b28      	ldr	r3, [pc, #160]	; (8011e70 <ip_reass_remove_oldest_datagram+0xc0>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011dd4:	e030      	b.n	8011e38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	695a      	ldr	r2, [r3, #20]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d10c      	bne.n	8011dfc <ip_reass_remove_oldest_datagram+0x4c>
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	699a      	ldr	r2, [r3, #24]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	691b      	ldr	r3, [r3, #16]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d106      	bne.n	8011dfc <ip_reass_remove_oldest_datagram+0x4c>
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	899a      	ldrh	r2, [r3, #12]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	889b      	ldrh	r3, [r3, #4]
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d014      	beq.n	8011e26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011e02:	6a3b      	ldr	r3, [r7, #32]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d104      	bne.n	8011e12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	61bb      	str	r3, [r7, #24]
 8011e10:	e009      	b.n	8011e26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	7fda      	ldrb	r2, [r3, #31]
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	7fdb      	ldrb	r3, [r3, #31]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d803      	bhi.n	8011e26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1cb      	bne.n	8011dd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d008      	beq.n	8011e56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011e44:	69b9      	ldr	r1, [r7, #24]
 8011e46:	6a38      	ldr	r0, [r7, #32]
 8011e48:	f7ff ff0e 	bl	8011c68 <ip_reass_free_complete_datagram>
 8011e4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011e4e:	697a      	ldr	r2, [r7, #20]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	da02      	bge.n	8011e64 <ip_reass_remove_oldest_datagram+0xb4>
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	dcac      	bgt.n	8011dbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011e64:	697b      	ldr	r3, [r7, #20]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3728      	adds	r7, #40	; 0x28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	2000c714 	.word	0x2000c714

08011e74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e7e:	2004      	movs	r0, #4
 8011e80:	f7f7 fbfc 	bl	800967c <memp_malloc>
 8011e84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d110      	bne.n	8011eae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff ff8e 	bl	8011db0 <ip_reass_remove_oldest_datagram>
 8011e94:	4602      	mov	r2, r0
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	dc03      	bgt.n	8011ea4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e9c:	2004      	movs	r0, #4
 8011e9e:	f7f7 fbed 	bl	800967c <memp_malloc>
 8011ea2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d101      	bne.n	8011eae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	e016      	b.n	8011edc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011eae:	2220      	movs	r2, #32
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f001 ffe2 	bl	8013e7c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2203      	movs	r2, #3
 8011ebc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011ebe:	4b09      	ldr	r3, [pc, #36]	; (8011ee4 <ip_reass_enqueue_new_datagram+0x70>)
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011ec6:	4a07      	ldr	r2, [pc, #28]	; (8011ee4 <ip_reass_enqueue_new_datagram+0x70>)
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	2214      	movs	r2, #20
 8011ed2:	6879      	ldr	r1, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f001 ffc6 	bl	8013e66 <memcpy>
  return ipr;
 8011eda:	68fb      	ldr	r3, [r7, #12]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	2000c714 	.word	0x2000c714

08011ee8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ef2:	4b10      	ldr	r3, [pc, #64]	; (8011f34 <ip_reass_dequeue_datagram+0x4c>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d104      	bne.n	8011f06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4a0c      	ldr	r2, [pc, #48]	; (8011f34 <ip_reass_dequeue_datagram+0x4c>)
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	e00d      	b.n	8011f22 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d106      	bne.n	8011f1a <ip_reass_dequeue_datagram+0x32>
 8011f0c:	4b0a      	ldr	r3, [pc, #40]	; (8011f38 <ip_reass_dequeue_datagram+0x50>)
 8011f0e:	f240 1245 	movw	r2, #325	; 0x145
 8011f12:	490a      	ldr	r1, [pc, #40]	; (8011f3c <ip_reass_dequeue_datagram+0x54>)
 8011f14:	480a      	ldr	r0, [pc, #40]	; (8011f40 <ip_reass_dequeue_datagram+0x58>)
 8011f16:	f001 ffb9 	bl	8013e8c <iprintf>
    prev->next = ipr->next;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011f22:	6879      	ldr	r1, [r7, #4]
 8011f24:	2004      	movs	r0, #4
 8011f26:	f7f7 fbfb 	bl	8009720 <memp_free>
}
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	2000c714 	.word	0x2000c714
 8011f38:	08017304 	.word	0x08017304
 8011f3c:	080173c4 	.word	0x080173c4
 8011f40:	0801734c 	.word	0x0801734c

08011f44 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b08c      	sub	sp, #48	; 0x30
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011f50:	2300      	movs	r3, #0
 8011f52:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011f54:	2301      	movs	r3, #1
 8011f56:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	885b      	ldrh	r3, [r3, #2]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7f6 ff9b 	bl	8008ea0 <lwip_htons>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	f003 030f 	and.w	r3, r3, #15
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	88db      	ldrh	r3, [r3, #6]
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7f6 ff89 	bl	8008ea0 <lwip_htons>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	701a      	strb	r2, [r3, #0]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	705a      	strb	r2, [r3, #1]
 8011faa:	2200      	movs	r2, #0
 8011fac:	709a      	strb	r2, [r3, #2]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb4:	8b3a      	ldrh	r2, [r7, #24]
 8011fb6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011fb8:	8b3a      	ldrh	r2, [r7, #24]
 8011fba:	8b7b      	ldrh	r3, [r7, #26]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fca:	e061      	b.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd4:	889b      	ldrh	r3, [r3, #4]
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	889b      	ldrh	r3, [r3, #4]
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d232      	bcs.n	8012048 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fe6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d01f      	beq.n	801202e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff0:	889b      	ldrh	r3, [r3, #4]
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff6:	88db      	ldrh	r3, [r3, #6]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	f0c0 80e3 	bcc.w	80121c6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	88db      	ldrh	r3, [r3, #6]
 8012004:	b29a      	uxth	r2, r3
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	889b      	ldrh	r3, [r3, #4]
 801200a:	b29b      	uxth	r3, r3
 801200c:	429a      	cmp	r2, r3
 801200e:	f200 80da 	bhi.w	80121c6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201a:	88db      	ldrh	r3, [r3, #6]
 801201c:	b29a      	uxth	r2, r3
 801201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012020:	889b      	ldrh	r3, [r3, #4]
 8012022:	b29b      	uxth	r3, r3
 8012024:	429a      	cmp	r2, r3
 8012026:	d037      	beq.n	8012098 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801202c:	e034      	b.n	8012098 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012030:	88db      	ldrh	r3, [r3, #6]
 8012032:	b29a      	uxth	r2, r3
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	889b      	ldrh	r3, [r3, #4]
 8012038:	b29b      	uxth	r3, r3
 801203a:	429a      	cmp	r2, r3
 801203c:	f200 80c5 	bhi.w	80121ca <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	68ba      	ldr	r2, [r7, #8]
 8012044:	605a      	str	r2, [r3, #4]
      break;
 8012046:	e027      	b.n	8012098 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8012048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204a:	889b      	ldrh	r3, [r3, #4]
 801204c:	b29a      	uxth	r2, r3
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	889b      	ldrh	r3, [r3, #4]
 8012052:	b29b      	uxth	r3, r3
 8012054:	429a      	cmp	r2, r3
 8012056:	f000 80ba 	beq.w	80121ce <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205c:	889b      	ldrh	r3, [r3, #4]
 801205e:	b29a      	uxth	r2, r3
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	88db      	ldrh	r3, [r3, #6]
 8012064:	b29b      	uxth	r3, r3
 8012066:	429a      	cmp	r2, r3
 8012068:	f0c0 80b3 	bcc.w	80121d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206e:	2b00      	cmp	r3, #0
 8012070:	d009      	beq.n	8012086 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012074:	88db      	ldrh	r3, [r3, #6]
 8012076:	b29a      	uxth	r2, r3
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	889b      	ldrh	r3, [r3, #4]
 801207c:	b29b      	uxth	r3, r3
 801207e:	429a      	cmp	r2, r3
 8012080:	d001      	beq.n	8012086 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012092:	2b00      	cmp	r3, #0
 8012094:	d19a      	bne.n	8011fcc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8012096:	e000      	b.n	801209a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8012098:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209c:	2b00      	cmp	r3, #0
 801209e:	d12d      	bne.n	80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80120a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d01c      	beq.n	80120e0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80120a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a8:	88db      	ldrh	r3, [r3, #6]
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ae:	889b      	ldrh	r3, [r3, #4]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d906      	bls.n	80120c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80120b6:	4b51      	ldr	r3, [pc, #324]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80120b8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80120bc:	4950      	ldr	r1, [pc, #320]	; (8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80120be:	4851      	ldr	r0, [pc, #324]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80120c0:	f001 fee4 	bl	8013e8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80120c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	88db      	ldrh	r3, [r3, #6]
 80120ce:	b29a      	uxth	r2, r3
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	889b      	ldrh	r3, [r3, #4]
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d010      	beq.n	80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80120da:	2300      	movs	r3, #0
 80120dc:	623b      	str	r3, [r7, #32]
 80120de:	e00d      	b.n	80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d006      	beq.n	80120f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80120e8:	4b44      	ldr	r3, [pc, #272]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80120ea:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80120ee:	4946      	ldr	r1, [pc, #280]	; (8012208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80120f0:	4844      	ldr	r0, [pc, #272]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80120f2:	f001 fecb 	bl	8013e8c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	68ba      	ldr	r2, [r7, #8]
 80120fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d105      	bne.n	801210e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	7f9b      	ldrb	r3, [r3, #30]
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d059      	beq.n	80121c2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801210e:	6a3b      	ldr	r3, [r7, #32]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d04f      	beq.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d006      	beq.n	801212a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	889b      	ldrh	r3, [r3, #4]
 8012124:	b29b      	uxth	r3, r3
 8012126:	2b00      	cmp	r3, #0
 8012128:	d002      	beq.n	8012130 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	623b      	str	r3, [r7, #32]
 801212e:	e041      	b.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012132:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801213a:	e012      	b.n	8012162 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	88db      	ldrh	r3, [r3, #6]
 8012146:	b29a      	uxth	r2, r3
 8012148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214a:	889b      	ldrh	r3, [r3, #4]
 801214c:	b29b      	uxth	r3, r3
 801214e:	429a      	cmp	r2, r3
 8012150:	d002      	beq.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	623b      	str	r3, [r7, #32]
            break;
 8012156:	e007      	b.n	8012168 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1e9      	bne.n	801213c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012168:	6a3b      	ldr	r3, [r7, #32]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d022      	beq.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d106      	bne.n	8012184 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8012176:	4b21      	ldr	r3, [pc, #132]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012178:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801217c:	4923      	ldr	r1, [pc, #140]	; (801220c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801217e:	4821      	ldr	r0, [pc, #132]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012180:	f001 fe84 	bl	8013e8c <iprintf>
          LWIP_ASSERT("sanity check",
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801218c:	429a      	cmp	r2, r3
 801218e:	d106      	bne.n	801219e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012190:	4b1a      	ldr	r3, [pc, #104]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012192:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012196:	491d      	ldr	r1, [pc, #116]	; (801220c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012198:	481a      	ldr	r0, [pc, #104]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801219a:	f001 fe77 	bl	8013e8c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d006      	beq.n	80121b4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80121a6:	4b15      	ldr	r3, [pc, #84]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80121a8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80121ac:	4918      	ldr	r1, [pc, #96]	; (8012210 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80121ae:	4815      	ldr	r0, [pc, #84]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80121b0:	f001 fe6c 	bl	8013e8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80121b4:	6a3b      	ldr	r3, [r7, #32]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	bf14      	ite	ne
 80121ba:	2301      	movne	r3, #1
 80121bc:	2300      	moveq	r3, #0
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	e018      	b.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80121c2:	2300      	movs	r3, #0
 80121c4:	e016      	b.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80121c6:	bf00      	nop
 80121c8:	e004      	b.n	80121d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80121ca:	bf00      	nop
 80121cc:	e002      	b.n	80121d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80121ce:	bf00      	nop
 80121d0:	e000      	b.n	80121d4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80121d2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80121d4:	68b8      	ldr	r0, [r7, #8]
 80121d6:	f7f8 f897 	bl	800a308 <pbuf_clen>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	4b0d      	ldr	r3, [pc, #52]	; (8012214 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80121e0:	881b      	ldrh	r3, [r3, #0]
 80121e2:	1a9b      	subs	r3, r3, r2
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	4b0b      	ldr	r3, [pc, #44]	; (8012214 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80121e8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80121ea:	68b8      	ldr	r0, [r7, #8]
 80121ec:	f7f7 fff2 	bl	800a1d4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121f0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3730      	adds	r7, #48	; 0x30
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	08017304 	.word	0x08017304
 8012200:	080173e0 	.word	0x080173e0
 8012204:	0801734c 	.word	0x0801734c
 8012208:	08017400 	.word	0x08017400
 801220c:	08017438 	.word	0x08017438
 8012210:	08017448 	.word	0x08017448
 8012214:	2000c718 	.word	0x2000c718

08012218 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b08e      	sub	sp, #56	; 0x38
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8012226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	f003 030f 	and.w	r3, r3, #15
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	2b14      	cmp	r3, #20
 8012232:	f040 8131 	bne.w	8012498 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	88db      	ldrh	r3, [r3, #6]
 801223a:	b29b      	uxth	r3, r3
 801223c:	4618      	mov	r0, r3
 801223e:	f7f6 fe2f 	bl	8008ea0 <lwip_htons>
 8012242:	4603      	mov	r3, r0
 8012244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012248:	b29b      	uxth	r3, r3
 801224a:	00db      	lsls	r3, r3, #3
 801224c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	885b      	ldrh	r3, [r3, #2]
 8012252:	b29b      	uxth	r3, r3
 8012254:	4618      	mov	r0, r3
 8012256:	f7f6 fe23 	bl	8008ea0 <lwip_htons>
 801225a:	4603      	mov	r3, r0
 801225c:	461a      	mov	r2, r3
 801225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	b29b      	uxth	r3, r3
 8012264:	f003 030f 	and.w	r3, r3, #15
 8012268:	b29b      	uxth	r3, r3
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	b29b      	uxth	r3, r3
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7f8 f848 	bl	800a308 <pbuf_clen>
 8012278:	4603      	mov	r3, r0
 801227a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801227c:	4b8d      	ldr	r3, [pc, #564]	; (80124b4 <ip4_reass+0x29c>)
 801227e:	881b      	ldrh	r3, [r3, #0]
 8012280:	461a      	mov	r2, r3
 8012282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012284:	4413      	add	r3, r2
 8012286:	2b0a      	cmp	r3, #10
 8012288:	dd10      	ble.n	80122ac <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801228a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801228c:	4619      	mov	r1, r3
 801228e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012290:	f7ff fd8e 	bl	8011db0 <ip_reass_remove_oldest_datagram>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	f000 8100 	beq.w	801249c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801229c:	4b85      	ldr	r3, [pc, #532]	; (80124b4 <ip4_reass+0x29c>)
 801229e:	881b      	ldrh	r3, [r3, #0]
 80122a0:	461a      	mov	r2, r3
 80122a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122a4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80122a6:	2b0a      	cmp	r3, #10
 80122a8:	f300 80f8 	bgt.w	801249c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80122ac:	4b82      	ldr	r3, [pc, #520]	; (80124b8 <ip4_reass+0x2a0>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	633b      	str	r3, [r7, #48]	; 0x30
 80122b2:	e015      	b.n	80122e0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b6:	695a      	ldr	r2, [r3, #20]
 80122b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d10c      	bne.n	80122da <ip4_reass+0xc2>
 80122c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c2:	699a      	ldr	r2, [r3, #24]
 80122c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c6:	691b      	ldr	r3, [r3, #16]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d106      	bne.n	80122da <ip4_reass+0xc2>
 80122cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ce:	899a      	ldrh	r2, [r3, #12]
 80122d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d2:	889b      	ldrh	r3, [r3, #4]
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d006      	beq.n	80122e8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	633b      	str	r3, [r7, #48]	; 0x30
 80122e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e6      	bne.n	80122b4 <ip4_reass+0x9c>
 80122e6:	e000      	b.n	80122ea <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80122e8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d109      	bne.n	8012304 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80122f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122f2:	4619      	mov	r1, r3
 80122f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122f6:	f7ff fdbd 	bl	8011e74 <ip_reass_enqueue_new_datagram>
 80122fa:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80122fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d11c      	bne.n	801233c <ip4_reass+0x124>
      goto nullreturn;
 8012302:	e0ce      	b.n	80124a2 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012306:	88db      	ldrh	r3, [r3, #6]
 8012308:	b29b      	uxth	r3, r3
 801230a:	4618      	mov	r0, r3
 801230c:	f7f6 fdc8 	bl	8008ea0 <lwip_htons>
 8012310:	4603      	mov	r3, r0
 8012312:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012316:	2b00      	cmp	r3, #0
 8012318:	d110      	bne.n	801233c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231c:	89db      	ldrh	r3, [r3, #14]
 801231e:	4618      	mov	r0, r3
 8012320:	f7f6 fdbe 	bl	8008ea0 <lwip_htons>
 8012324:	4603      	mov	r3, r0
 8012326:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801232a:	2b00      	cmp	r3, #0
 801232c:	d006      	beq.n	801233c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	3308      	adds	r3, #8
 8012332:	2214      	movs	r2, #20
 8012334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012336:	4618      	mov	r0, r3
 8012338:	f001 fd95 	bl	8013e66 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233e:	88db      	ldrh	r3, [r3, #6]
 8012340:	b29b      	uxth	r3, r3
 8012342:	f003 0320 	and.w	r3, r3, #32
 8012346:	2b00      	cmp	r3, #0
 8012348:	bf0c      	ite	eq
 801234a:	2301      	moveq	r3, #1
 801234c:	2300      	movne	r3, #0
 801234e:	b2db      	uxtb	r3, r3
 8012350:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00e      	beq.n	8012376 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8012358:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801235a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801235c:	4413      	add	r3, r2
 801235e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012360:	8b7a      	ldrh	r2, [r7, #26]
 8012362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012364:	429a      	cmp	r2, r3
 8012366:	f0c0 8099 	bcc.w	801249c <ip4_reass+0x284>
 801236a:	8b7b      	ldrh	r3, [r7, #26]
 801236c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012370:	4293      	cmp	r3, r2
 8012372:	f200 8093 	bhi.w	801249c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012376:	69fa      	ldr	r2, [r7, #28]
 8012378:	6879      	ldr	r1, [r7, #4]
 801237a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801237c:	f7ff fde2 	bl	8011f44 <ip_reass_chain_frag_into_datagram_and_validate>
 8012380:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012388:	f000 808a 	beq.w	80124a0 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801238c:	4b49      	ldr	r3, [pc, #292]	; (80124b4 <ip4_reass+0x29c>)
 801238e:	881a      	ldrh	r2, [r3, #0]
 8012390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012392:	4413      	add	r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	4b47      	ldr	r3, [pc, #284]	; (80124b4 <ip4_reass+0x29c>)
 8012398:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00d      	beq.n	80123bc <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80123a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123a4:	4413      	add	r3, r2
 80123a6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80123a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123aa:	8a7a      	ldrh	r2, [r7, #18]
 80123ac:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80123ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b0:	7f9b      	ldrb	r3, [r3, #30]
 80123b2:	f043 0301 	orr.w	r3, r3, #1
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ba:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d168      	bne.n	8012494 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80123c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c4:	8b9b      	ldrh	r3, [r3, #28]
 80123c6:	3314      	adds	r3, #20
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123cc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80123e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e2:	3308      	adds	r3, #8
 80123e4:	2214      	movs	r2, #20
 80123e6:	4619      	mov	r1, r3
 80123e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ea:	f001 fd3c 	bl	8013e66 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	8b9b      	ldrh	r3, [r3, #28]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f6 fd54 	bl	8008ea0 <lwip_htons>
 80123f8:	4603      	mov	r3, r0
 80123fa:	461a      	mov	r2, r3
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012402:	2200      	movs	r2, #0
 8012404:	719a      	strb	r2, [r3, #6]
 8012406:	2200      	movs	r2, #0
 8012408:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	2200      	movs	r2, #0
 801240e:	729a      	strb	r2, [r3, #10]
 8012410:	2200      	movs	r2, #0
 8012412:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801241a:	e00e      	b.n	801243a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012422:	f06f 0113 	mvn.w	r1, #19
 8012426:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012428:	f7f7 feb0 	bl	800a18c <pbuf_header>
      pbuf_cat(p, r);
 801242c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7f7 ffaa 	bl	800a388 <pbuf_cat>
      r = iprh->next_pbuf;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1ed      	bne.n	801241c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012440:	4b1d      	ldr	r3, [pc, #116]	; (80124b8 <ip4_reass+0x2a0>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012446:	429a      	cmp	r2, r3
 8012448:	d102      	bne.n	8012450 <ip4_reass+0x238>
      ipr_prev = NULL;
 801244a:	2300      	movs	r3, #0
 801244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801244e:	e010      	b.n	8012472 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012450:	4b19      	ldr	r3, [pc, #100]	; (80124b8 <ip4_reass+0x2a0>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012456:	e007      	b.n	8012468 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8012458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801245e:	429a      	cmp	r2, r3
 8012460:	d006      	beq.n	8012470 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1f4      	bne.n	8012458 <ip4_reass+0x240>
 801246e:	e000      	b.n	8012472 <ip4_reass+0x25a>
          break;
 8012470:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012476:	f7ff fd37 	bl	8011ee8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7f7 ff44 	bl	800a308 <pbuf_clen>
 8012480:	4603      	mov	r3, r0
 8012482:	461a      	mov	r2, r3
 8012484:	4b0b      	ldr	r3, [pc, #44]	; (80124b4 <ip4_reass+0x29c>)
 8012486:	881b      	ldrh	r3, [r3, #0]
 8012488:	1a9b      	subs	r3, r3, r2
 801248a:	b29a      	uxth	r2, r3
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <ip4_reass+0x29c>)
 801248e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	e00a      	b.n	80124aa <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012494:	2300      	movs	r3, #0
 8012496:	e008      	b.n	80124aa <ip4_reass+0x292>
    goto nullreturn;
 8012498:	bf00      	nop
 801249a:	e002      	b.n	80124a2 <ip4_reass+0x28a>

nullreturn:
 801249c:	bf00      	nop
 801249e:	e000      	b.n	80124a2 <ip4_reass+0x28a>
    goto nullreturn;
 80124a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7f7 fe96 	bl	800a1d4 <pbuf_free>
  return NULL;
 80124a8:	2300      	movs	r3, #0
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3738      	adds	r7, #56	; 0x38
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	2000c718 	.word	0x2000c718
 80124b8:	2000c714 	.word	0x2000c714

080124bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80124c0:	2005      	movs	r0, #5
 80124c2:	f7f7 f8db 	bl	800967c <memp_malloc>
 80124c6:	4603      	mov	r3, r0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	bd80      	pop	{r7, pc}

080124cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d106      	bne.n	80124e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80124da:	4b07      	ldr	r3, [pc, #28]	; (80124f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80124dc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80124e0:	4906      	ldr	r1, [pc, #24]	; (80124fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80124e2:	4807      	ldr	r0, [pc, #28]	; (8012500 <ip_frag_free_pbuf_custom_ref+0x34>)
 80124e4:	f001 fcd2 	bl	8013e8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	2005      	movs	r0, #5
 80124ec:	f7f7 f918 	bl	8009720 <memp_free>
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	08017304 	.word	0x08017304
 80124fc:	0801746c 	.word	0x0801746c
 8012500:	0801734c 	.word	0x0801734c

08012504 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d106      	bne.n	8012524 <ipfrag_free_pbuf_custom+0x20>
 8012516:	4b11      	ldr	r3, [pc, #68]	; (801255c <ipfrag_free_pbuf_custom+0x58>)
 8012518:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801251c:	4910      	ldr	r1, [pc, #64]	; (8012560 <ipfrag_free_pbuf_custom+0x5c>)
 801251e:	4811      	ldr	r0, [pc, #68]	; (8012564 <ipfrag_free_pbuf_custom+0x60>)
 8012520:	f001 fcb4 	bl	8013e8c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012524:	68fa      	ldr	r2, [r7, #12]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	429a      	cmp	r2, r3
 801252a:	d006      	beq.n	801253a <ipfrag_free_pbuf_custom+0x36>
 801252c:	4b0b      	ldr	r3, [pc, #44]	; (801255c <ipfrag_free_pbuf_custom+0x58>)
 801252e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012532:	490d      	ldr	r1, [pc, #52]	; (8012568 <ipfrag_free_pbuf_custom+0x64>)
 8012534:	480b      	ldr	r0, [pc, #44]	; (8012564 <ipfrag_free_pbuf_custom+0x60>)
 8012536:	f001 fca9 	bl	8013e8c <iprintf>
  if (pcr->original != NULL) {
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	695b      	ldr	r3, [r3, #20]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d004      	beq.n	801254c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	695b      	ldr	r3, [r3, #20]
 8012546:	4618      	mov	r0, r3
 8012548:	f7f7 fe44 	bl	800a1d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff ffbd 	bl	80124cc <ip_frag_free_pbuf_custom_ref>
}
 8012552:	bf00      	nop
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	08017304 	.word	0x08017304
 8012560:	08017478 	.word	0x08017478
 8012564:	0801734c 	.word	0x0801734c
 8012568:	08017484 	.word	0x08017484

0801256c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b092      	sub	sp, #72	; 0x48
 8012570:	af02      	add	r7, sp, #8
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012578:	2300      	movs	r3, #0
 801257a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012580:	3b14      	subs	r3, #20
 8012582:	2b00      	cmp	r3, #0
 8012584:	da00      	bge.n	8012588 <ip4_frag+0x1c>
 8012586:	3307      	adds	r3, #7
 8012588:	10db      	asrs	r3, r3, #3
 801258a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801258c:	2314      	movs	r3, #20
 801258e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8012596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012598:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	f003 030f 	and.w	r3, r3, #15
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	2b14      	cmp	r3, #20
 80125a6:	d009      	beq.n	80125bc <ip4_frag+0x50>
 80125a8:	4b79      	ldr	r3, [pc, #484]	; (8012790 <ip4_frag+0x224>)
 80125aa:	f240 22e1 	movw	r2, #737	; 0x2e1
 80125ae:	4979      	ldr	r1, [pc, #484]	; (8012794 <ip4_frag+0x228>)
 80125b0:	4879      	ldr	r0, [pc, #484]	; (8012798 <ip4_frag+0x22c>)
 80125b2:	f001 fc6b 	bl	8013e8c <iprintf>
 80125b6:	f06f 0305 	mvn.w	r3, #5
 80125ba:	e0e5      	b.n	8012788 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80125bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125be:	88db      	ldrh	r3, [r3, #6]
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7f6 fc6c 	bl	8008ea0 <lwip_htons>
 80125c8:	4603      	mov	r3, r0
 80125ca:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80125cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80125ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125d2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80125d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80125d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d009      	beq.n	80125f2 <ip4_frag+0x86>
 80125de:	4b6c      	ldr	r3, [pc, #432]	; (8012790 <ip4_frag+0x224>)
 80125e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80125e4:	496d      	ldr	r1, [pc, #436]	; (801279c <ip4_frag+0x230>)
 80125e6:	486c      	ldr	r0, [pc, #432]	; (8012798 <ip4_frag+0x22c>)
 80125e8:	f001 fc50 	bl	8013e8c <iprintf>
 80125ec:	f06f 0305 	mvn.w	r3, #5
 80125f0:	e0ca      	b.n	8012788 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	891b      	ldrh	r3, [r3, #8]
 80125f6:	3b14      	subs	r3, #20
 80125f8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80125fa:	e0bc      	b.n	8012776 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80125fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80125fe:	00da      	lsls	r2, r3, #3
 8012600:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012602:	4293      	cmp	r3, r2
 8012604:	bfa8      	it	ge
 8012606:	4613      	movge	r3, r2
 8012608:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801260a:	2200      	movs	r2, #0
 801260c:	2114      	movs	r1, #20
 801260e:	2002      	movs	r0, #2
 8012610:	f7f7 fa6e 	bl	8009af0 <pbuf_alloc>
 8012614:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012616:	6a3b      	ldr	r3, [r7, #32]
 8012618:	2b00      	cmp	r3, #0
 801261a:	f000 80b2 	beq.w	8012782 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	895b      	ldrh	r3, [r3, #10]
 8012622:	2b13      	cmp	r3, #19
 8012624:	d806      	bhi.n	8012634 <ip4_frag+0xc8>
 8012626:	4b5a      	ldr	r3, [pc, #360]	; (8012790 <ip4_frag+0x224>)
 8012628:	f240 3209 	movw	r2, #777	; 0x309
 801262c:	495c      	ldr	r1, [pc, #368]	; (80127a0 <ip4_frag+0x234>)
 801262e:	485a      	ldr	r0, [pc, #360]	; (8012798 <ip4_frag+0x22c>)
 8012630:	f001 fc2c 	bl	8013e8c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012634:	6a3b      	ldr	r3, [r7, #32]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	2214      	movs	r2, #20
 801263a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801263c:	4618      	mov	r0, r3
 801263e:	f001 fc12 	bl	8013e66 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8012648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801264a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801264c:	e04f      	b.n	80126ee <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	895a      	ldrh	r2, [r3, #10]
 8012652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012654:	1ad3      	subs	r3, r2, r3
 8012656:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012658:	8b7a      	ldrh	r2, [r7, #26]
 801265a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801265c:	4293      	cmp	r3, r2
 801265e:	bf28      	it	cs
 8012660:	4613      	movcs	r3, r2
 8012662:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012666:	2b00      	cmp	r3, #0
 8012668:	d105      	bne.n	8012676 <ip4_frag+0x10a>
        poff = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	60fb      	str	r3, [r7, #12]
        continue;
 8012674:	e03b      	b.n	80126ee <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012676:	f7ff ff21 	bl	80124bc <ip_frag_alloc_pbuf_custom_ref>
 801267a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012682:	6a38      	ldr	r0, [r7, #32]
 8012684:	f7f7 fda6 	bl	800a1d4 <pbuf_free>
        goto memerr;
 8012688:	e07c      	b.n	8012784 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801268a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012692:	4413      	add	r3, r2
 8012694:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8012696:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012698:	9201      	str	r2, [sp, #4]
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4603      	mov	r3, r0
 801269e:	2202      	movs	r2, #2
 80126a0:	2004      	movs	r0, #4
 80126a2:	f7f7 fbb9 	bl	8009e18 <pbuf_alloced_custom>
 80126a6:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d106      	bne.n	80126bc <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80126ae:	6978      	ldr	r0, [r7, #20]
 80126b0:	f7ff ff0c 	bl	80124cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80126b4:	6a38      	ldr	r0, [r7, #32]
 80126b6:	f7f7 fd8d 	bl	800a1d4 <pbuf_free>
        goto memerr;
 80126ba:	e063      	b.n	8012784 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f7f7 fe3b 	bl	800a338 <pbuf_ref>
      pcr->original = p;
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	68fa      	ldr	r2, [r7, #12]
 80126c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	4a36      	ldr	r2, [pc, #216]	; (80127a4 <ip4_frag+0x238>)
 80126cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80126ce:	6939      	ldr	r1, [r7, #16]
 80126d0:	6a38      	ldr	r0, [r7, #32]
 80126d2:	f7f7 fe59 	bl	800a388 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80126d6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80126d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80126de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d004      	beq.n	80126ee <ip4_frag+0x182>
        poff = 0;
 80126e4:	2300      	movs	r3, #0
 80126e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80126ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d1ac      	bne.n	801264e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80126f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80126f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126f8:	4413      	add	r3, r2
 80126fa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80126fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012702:	3b14      	subs	r3, #20
 8012704:	429a      	cmp	r2, r3
 8012706:	bfd4      	ite	le
 8012708:	2301      	movle	r3, #1
 801270a:	2300      	movgt	r3, #0
 801270c:	b2db      	uxtb	r3, r3
 801270e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012710:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012712:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012716:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d103      	bne.n	8012726 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801271e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012724:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012726:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012728:	4618      	mov	r0, r3
 801272a:	f7f6 fbb9 	bl	8008ea0 <lwip_htons>
 801272e:	4603      	mov	r3, r0
 8012730:	461a      	mov	r2, r3
 8012732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012734:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8012736:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012738:	3314      	adds	r3, #20
 801273a:	b29b      	uxth	r3, r3
 801273c:	4618      	mov	r0, r3
 801273e:	f7f6 fbaf 	bl	8008ea0 <lwip_htons>
 8012742:	4603      	mov	r3, r0
 8012744:	461a      	mov	r2, r3
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274c:	2200      	movs	r2, #0
 801274e:	729a      	strb	r2, [r3, #10]
 8012750:	2200      	movs	r2, #0
 8012752:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	695b      	ldr	r3, [r3, #20]
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	6a39      	ldr	r1, [r7, #32]
 801275c:	68b8      	ldr	r0, [r7, #8]
 801275e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012760:	6a38      	ldr	r0, [r7, #32]
 8012762:	f7f7 fd37 	bl	800a1d4 <pbuf_free>
    left -= fragsize;
 8012766:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801276e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012770:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012772:	4413      	add	r3, r2
 8012774:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8012776:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012778:	2b00      	cmp	r3, #0
 801277a:	f47f af3f 	bne.w	80125fc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801277e:	2300      	movs	r3, #0
 8012780:	e002      	b.n	8012788 <ip4_frag+0x21c>
      goto memerr;
 8012782:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012788:	4618      	mov	r0, r3
 801278a:	3740      	adds	r7, #64	; 0x40
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	08017304 	.word	0x08017304
 8012794:	08017490 	.word	0x08017490
 8012798:	0801734c 	.word	0x0801734c
 801279c:	080174b8 	.word	0x080174b8
 80127a0:	080174d4 	.word	0x080174d4
 80127a4:	08012505 	.word	0x08012505

080127a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80127b2:	230e      	movs	r3, #14
 80127b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	895b      	ldrh	r3, [r3, #10]
 80127ba:	2b0e      	cmp	r3, #14
 80127bc:	d977      	bls.n	80128ae <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	7b1a      	ldrb	r2, [r3, #12]
 80127c8:	7b5b      	ldrb	r3, [r3, #13]
 80127ca:	021b      	lsls	r3, r3, #8
 80127cc:	4313      	orrs	r3, r2
 80127ce:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f003 0301 	and.w	r3, r3, #1
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d023      	beq.n	8012824 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d10f      	bne.n	8012804 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	785b      	ldrb	r3, [r3, #1]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d11b      	bne.n	8012824 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80127f0:	2b5e      	cmp	r3, #94	; 0x5e
 80127f2:	d117      	bne.n	8012824 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7b5b      	ldrb	r3, [r3, #13]
 80127f8:	f043 0310 	orr.w	r3, r3, #16
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	735a      	strb	r2, [r3, #13]
 8012802:	e00f      	b.n	8012824 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	2206      	movs	r2, #6
 8012808:	4930      	ldr	r1, [pc, #192]	; (80128cc <ethernet_input+0x124>)
 801280a:	4618      	mov	r0, r3
 801280c:	f001 fb1c 	bl	8013e48 <memcmp>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d106      	bne.n	8012824 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	7b5b      	ldrb	r3, [r3, #13]
 801281a:	f043 0308 	orr.w	r3, r3, #8
 801281e:	b2da      	uxtb	r2, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	2b08      	cmp	r3, #8
 8012828:	d003      	beq.n	8012832 <ethernet_input+0x8a>
 801282a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801282e:	d01e      	beq.n	801286e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012830:	e044      	b.n	80128bc <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012838:	f003 0308 	and.w	r3, r3, #8
 801283c:	2b00      	cmp	r3, #0
 801283e:	d038      	beq.n	80128b2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	895b      	ldrh	r3, [r3, #10]
 8012844:	461a      	mov	r2, r3
 8012846:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801284a:	429a      	cmp	r2, r3
 801284c:	db33      	blt.n	80128b6 <ethernet_input+0x10e>
 801284e:	8afb      	ldrh	r3, [r7, #22]
 8012850:	425b      	negs	r3, r3
 8012852:	b29b      	uxth	r3, r3
 8012854:	b21b      	sxth	r3, r3
 8012856:	4619      	mov	r1, r3
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7f7 fc97 	bl	800a18c <pbuf_header>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d128      	bne.n	80128b6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7fe ff80 	bl	801176c <ip4_input>
      break;
 801286c:	e01d      	b.n	80128aa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012874:	f003 0308 	and.w	r3, r3, #8
 8012878:	2b00      	cmp	r3, #0
 801287a:	d01e      	beq.n	80128ba <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	895b      	ldrh	r3, [r3, #10]
 8012880:	461a      	mov	r2, r3
 8012882:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012886:	429a      	cmp	r2, r3
 8012888:	db15      	blt.n	80128b6 <ethernet_input+0x10e>
 801288a:	8afb      	ldrh	r3, [r7, #22]
 801288c:	425b      	negs	r3, r3
 801288e:	b29b      	uxth	r3, r3
 8012890:	b21b      	sxth	r3, r3
 8012892:	4619      	mov	r1, r3
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7f7 fc79 	bl	800a18c <pbuf_header>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d10a      	bne.n	80128b6 <ethernet_input+0x10e>
        etharp_input(p, netif);
 80128a0:	6839      	ldr	r1, [r7, #0]
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f7fe f94e 	bl	8010b44 <etharp_input>
      break;
 80128a8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e00a      	b.n	80128c4 <ethernet_input+0x11c>
    goto free_and_return;
 80128ae:	bf00      	nop
 80128b0:	e004      	b.n	80128bc <ethernet_input+0x114>
        goto free_and_return;
 80128b2:	bf00      	nop
 80128b4:	e002      	b.n	80128bc <ethernet_input+0x114>

free_and_return:
 80128b6:	bf00      	nop
 80128b8:	e000      	b.n	80128bc <ethernet_input+0x114>
        goto free_and_return;
 80128ba:	bf00      	nop
  pbuf_free(p);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7f7 fc89 	bl	800a1d4 <pbuf_free>
  return ERR_OK;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3718      	adds	r7, #24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	08017790 	.word	0x08017790

080128d0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b086      	sub	sp, #24
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80128de:	8c3b      	ldrh	r3, [r7, #32]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7f6 fadd 	bl	8008ea0 <lwip_htons>
 80128e6:	4603      	mov	r3, r0
 80128e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80128ea:	210e      	movs	r1, #14
 80128ec:	68b8      	ldr	r0, [r7, #8]
 80128ee:	f7f7 fc4d 	bl	800a18c <pbuf_header>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d125      	bne.n	8012944 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	8afa      	ldrh	r2, [r7, #22]
 8012902:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	2206      	movs	r2, #6
 8012908:	6839      	ldr	r1, [r7, #0]
 801290a:	4618      	mov	r0, r3
 801290c:	f001 faab 	bl	8013e66 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	3306      	adds	r3, #6
 8012914:	2206      	movs	r2, #6
 8012916:	6879      	ldr	r1, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	f001 faa4 	bl	8013e66 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012924:	2b06      	cmp	r3, #6
 8012926:	d006      	beq.n	8012936 <ethernet_output+0x66>
 8012928:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <ethernet_output+0x84>)
 801292a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801292e:	490a      	ldr	r1, [pc, #40]	; (8012958 <ethernet_output+0x88>)
 8012930:	480a      	ldr	r0, [pc, #40]	; (801295c <ethernet_output+0x8c>)
 8012932:	f001 faab 	bl	8013e8c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	68b9      	ldr	r1, [r7, #8]
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	4798      	blx	r3
 8012940:	4603      	mov	r3, r0
 8012942:	e002      	b.n	801294a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012944:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012946:	f06f 0301 	mvn.w	r3, #1
}
 801294a:	4618      	mov	r0, r3
 801294c:	3718      	adds	r7, #24
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	080174f4 	.word	0x080174f4
 8012958:	0801752c 	.word	0x0801752c
 801295c:	08017560 	.word	0x08017560

08012960 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	60bb      	str	r3, [r7, #8]
 801296e:	2304      	movs	r3, #4
 8012970:	60fb      	str	r3, [r7, #12]
 8012972:	2300      	movs	r3, #0
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	2300      	movs	r3, #0
 8012978:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801297a:	f107 0308 	add.w	r3, r7, #8
 801297e:	2100      	movs	r1, #0
 8012980:	4618      	mov	r0, r3
 8012982:	f7f0 f960 	bl	8002c46 <osMessageCreate>
 8012986:	4602      	mov	r2, r0
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012994:	f04f 33ff 	mov.w	r3, #4294967295
 8012998:	e000      	b.n	801299c <sys_mbox_new+0x3c>

  return ERR_OK;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	3718      	adds	r7, #24
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7f0 fa25 	bl	8002e00 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7f0 fa36 	bl	8002e2c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80129c0:	bf00      	nop
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80129d2:	bf00      	nop
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	6839      	ldr	r1, [r7, #0]
 80129da:	f04f 32ff 	mov.w	r2, #4294967295
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f0 f95a 	bl	8002c98 <osMessagePut>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1f4      	bne.n	80129d4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b084      	sub	sp, #16
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	6839      	ldr	r1, [r7, #0]
 8012a02:	2200      	movs	r2, #0
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f0 f947 	bl	8002c98 <osMessagePut>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d102      	bne.n	8012a16 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012a10:	2300      	movs	r3, #0
 8012a12:	73fb      	strb	r3, [r7, #15]
 8012a14:	e001      	b.n	8012a1a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012a16:	23ff      	movs	r3, #255	; 0xff
 8012a18:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b08c      	sub	sp, #48	; 0x30
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	61f8      	str	r0, [r7, #28]
 8012a2e:	61b9      	str	r1, [r7, #24]
 8012a30:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012a32:	f7ef ff26 	bl	8002882 <osKernelSysTick>
 8012a36:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d017      	beq.n	8012a6e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	6819      	ldr	r1, [r3, #0]
 8012a42:	f107 0320 	add.w	r3, r7, #32
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f0 f965 	bl	8002d18 <osMessageGet>

    if(event.status == osEventMessage)
 8012a4e:	6a3b      	ldr	r3, [r7, #32]
 8012a50:	2b10      	cmp	r3, #16
 8012a52:	d109      	bne.n	8012a68 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	461a      	mov	r2, r3
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012a5c:	f7ef ff11 	bl	8002882 <osKernelSysTick>
 8012a60:	4602      	mov	r2, r0
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	e019      	b.n	8012a9c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012a68:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6c:	e016      	b.n	8012a9c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	6819      	ldr	r1, [r3, #0]
 8012a72:	463b      	mov	r3, r7
 8012a74:	f04f 32ff 	mov.w	r2, #4294967295
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7f0 f94d 	bl	8002d18 <osMessageGet>
 8012a7e:	f107 0320 	add.w	r3, r7, #32
 8012a82:	463a      	mov	r2, r7
 8012a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012a92:	f7ef fef6 	bl	8002882 <osKernelSysTick>
 8012a96:	4602      	mov	r2, r0
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3730      	adds	r7, #48	; 0x30
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b086      	sub	sp, #24
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6819      	ldr	r1, [r3, #0]
 8012ab2:	f107 030c 	add.w	r3, r7, #12
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7f0 f92d 	bl	8002d18 <osMessageGet>

  if(event.status == osEventMessage)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2b10      	cmp	r3, #16
 8012ac2:	d105      	bne.n	8012ad0 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8012acc:	2300      	movs	r3, #0
 8012ace:	e001      	b.n	8012ad4 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8012ad0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d101      	bne.n	8012af0 <sys_mbox_valid+0x14>
    return 0;
 8012aec:	2300      	movs	r3, #0
 8012aee:	e000      	b.n	8012af2 <sys_mbox_valid+0x16>
  else
    return 1;
 8012af0:	2301      	movs	r3, #1
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	601a      	str	r2, [r3, #0]
}
 8012b0c:	bf00      	nop
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	460b      	mov	r3, r1
 8012b22:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8012b24:	2300      	movs	r3, #0
 8012b26:	60bb      	str	r3, [r7, #8]
 8012b28:	2300      	movs	r3, #0
 8012b2a:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8012b2c:	f107 0308 	add.w	r3, r7, #8
 8012b30:	2101      	movs	r1, #1
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ef ffbc 	bl	8002ab0 <osSemaphoreCreate>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012b46:	f04f 33ff 	mov.w	r3, #4294967295
 8012b4a:	e009      	b.n	8012b60 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8012b4c:	78fb      	ldrb	r3, [r7, #3]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d105      	bne.n	8012b5e <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2100      	movs	r1, #0
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7ef ffdd 	bl	8002b18 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8012b72:	f7ef fe86 	bl	8002882 <osKernelSysTick>
 8012b76:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d011      	beq.n	8012ba2 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	6839      	ldr	r1, [r7, #0]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ef ffc7 	bl	8002b18 <osSemaphoreWait>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d105      	bne.n	8012b9c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8012b90:	f7ef fe77 	bl	8002882 <osKernelSysTick>
 8012b94:	4602      	mov	r2, r0
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	e012      	b.n	8012bc2 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba0:	e00f      	b.n	8012bc2 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8012ba2:	bf00      	nop
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ef ffb3 	bl	8002b18 <osSemaphoreWait>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d1f5      	bne.n	8012ba4 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8012bb8:	f7ef fe63 	bl	8002882 <osKernelSysTick>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}

08012bca <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b082      	sub	sp, #8
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7ef ffec 	bl	8002bb4 <osSemaphoreRelease>
}
 8012bdc:	bf00      	nop
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7f0 f815 	bl	8002c20 <osSemaphoreDelete>
}
 8012bf6:	bf00      	nop
 8012bf8:	3708      	adds	r7, #8
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}

08012bfe <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8012bfe:	b480      	push	{r7}
 8012c00:	b083      	sub	sp, #12
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d101      	bne.n	8012c12 <sys_sem_valid+0x14>
    return 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	e000      	b.n	8012c14 <sys_sem_valid+0x16>
  else
    return 1;
 8012c12:	2301      	movs	r3, #1
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	370c      	adds	r7, #12
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr

08012c20 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	601a      	str	r2, [r3, #0]
}
 8012c2e:	bf00      	nop
 8012c30:	370c      	adds	r7, #12
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr
	...

08012c3c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012c40:	4803      	ldr	r0, [pc, #12]	; (8012c50 <sys_init+0x14>)
 8012c42:	f7ef fe99 	bl	8002978 <osMutexCreate>
 8012c46:	4602      	mov	r2, r0
 8012c48:	4b02      	ldr	r3, [pc, #8]	; (8012c54 <sys_init+0x18>)
 8012c4a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012c4c:	bf00      	nop
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	080177a0 	.word	0x080177a0
 8012c54:	2001056c 	.word	0x2001056c

08012c58 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012c60:	2300      	movs	r3, #0
 8012c62:	60bb      	str	r3, [r7, #8]
 8012c64:	2300      	movs	r3, #0
 8012c66:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012c68:	f107 0308 	add.w	r3, r7, #8
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ef fe83 	bl	8002978 <osMutexCreate>
 8012c72:	4602      	mov	r2, r0
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012c80:	f04f 33ff 	mov.w	r3, #4294967295
 8012c84:	e000      	b.n	8012c88 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3710      	adds	r7, #16
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ef fe81 	bl	80029a8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012ca6:	bf00      	nop
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}

08012cae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b082      	sub	sp, #8
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ef fec2 	bl	8002a44 <osMutexRelease>
}
 8012cc0:	bf00      	nop
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08c      	sub	sp, #48	; 0x30
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	607a      	str	r2, [r7, #4]
 8012cd4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012cd6:	f107 0314 	add.w	r3, r7, #20
 8012cda:	2200      	movs	r2, #0
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	605a      	str	r2, [r3, #4]
 8012ce0:	609a      	str	r2, [r3, #8]
 8012ce2:	60da      	str	r2, [r3, #12]
 8012ce4:	611a      	str	r2, [r3, #16]
 8012ce6:	615a      	str	r2, [r3, #20]
 8012ce8:	619a      	str	r2, [r3, #24]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	617b      	str	r3, [r7, #20]
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	61bb      	str	r3, [r7, #24]
 8012cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf4:	b21b      	sxth	r3, r3
 8012cf6:	83bb      	strh	r3, [r7, #28]
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012cfc:	f107 0314 	add.w	r3, r7, #20
 8012d00:	6879      	ldr	r1, [r7, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ef fdcd 	bl	80028a2 <osThreadCreate>
 8012d08:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3730      	adds	r7, #48	; 0x30
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
	...

08012d14 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012d18:	4b04      	ldr	r3, [pc, #16]	; (8012d2c <sys_arch_protect+0x18>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7ef fe41 	bl	80029a8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012d26:	2301      	movs	r3, #1
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	2001056c 	.word	0x2001056c

08012d30 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012d38:	4b04      	ldr	r3, [pc, #16]	; (8012d4c <sys_arch_unprotect+0x1c>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7ef fe81 	bl	8002a44 <osMutexRelease>
}
 8012d42:	bf00      	nop
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	2001056c 	.word	0x2001056c

08012d50 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08e      	sub	sp, #56	; 0x38
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	601a      	str	r2, [r3, #0]
 8012d60:	605a      	str	r2, [r3, #4]
 8012d62:	609a      	str	r2, [r3, #8]
 8012d64:	60da      	str	r2, [r3, #12]
 8012d66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a4e      	ldr	r2, [pc, #312]	; (8012ea8 <HAL_ETH_MspInit+0x158>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	f040 8095 	bne.w	8012e9e <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8012d74:	2300      	movs	r3, #0
 8012d76:	623b      	str	r3, [r7, #32]
 8012d78:	4b4c      	ldr	r3, [pc, #304]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d7c:	4a4b      	ldr	r2, [pc, #300]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012d82:	6313      	str	r3, [r2, #48]	; 0x30
 8012d84:	4b49      	ldr	r3, [pc, #292]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d8c:	623b      	str	r3, [r7, #32]
 8012d8e:	6a3b      	ldr	r3, [r7, #32]
 8012d90:	2300      	movs	r3, #0
 8012d92:	61fb      	str	r3, [r7, #28]
 8012d94:	4b45      	ldr	r3, [pc, #276]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d98:	4a44      	ldr	r2, [pc, #272]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8012da0:	4b42      	ldr	r3, [pc, #264]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012da8:	61fb      	str	r3, [r7, #28]
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	2300      	movs	r3, #0
 8012dae:	61bb      	str	r3, [r7, #24]
 8012db0:	4b3e      	ldr	r3, [pc, #248]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db4:	4a3d      	ldr	r2, [pc, #244]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012db6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012dba:	6313      	str	r3, [r2, #48]	; 0x30
 8012dbc:	4b3b      	ldr	r3, [pc, #236]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012dc4:	61bb      	str	r3, [r7, #24]
 8012dc6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012dc8:	2300      	movs	r3, #0
 8012dca:	617b      	str	r3, [r7, #20]
 8012dcc:	4b37      	ldr	r3, [pc, #220]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd0:	4a36      	ldr	r2, [pc, #216]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dd2:	f043 0304 	orr.w	r3, r3, #4
 8012dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8012dd8:	4b34      	ldr	r3, [pc, #208]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ddc:	f003 0304 	and.w	r3, r3, #4
 8012de0:	617b      	str	r3, [r7, #20]
 8012de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012de4:	2300      	movs	r3, #0
 8012de6:	613b      	str	r3, [r7, #16]
 8012de8:	4b30      	ldr	r3, [pc, #192]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dec:	4a2f      	ldr	r2, [pc, #188]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012dee:	f043 0301 	orr.w	r3, r3, #1
 8012df2:	6313      	str	r3, [r2, #48]	; 0x30
 8012df4:	4b2d      	ldr	r3, [pc, #180]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df8:	f003 0301 	and.w	r3, r3, #1
 8012dfc:	613b      	str	r3, [r7, #16]
 8012dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012e00:	2300      	movs	r3, #0
 8012e02:	60fb      	str	r3, [r7, #12]
 8012e04:	4b29      	ldr	r3, [pc, #164]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e08:	4a28      	ldr	r2, [pc, #160]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012e0a:	f043 0302 	orr.w	r3, r3, #2
 8012e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8012e10:	4b26      	ldr	r3, [pc, #152]	; (8012eac <HAL_ETH_MspInit+0x15c>)
 8012e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e14:	f003 0302 	and.w	r3, r3, #2
 8012e18:	60fb      	str	r3, [r7, #12]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PB8     ------> ETH_TXD3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8012e1c:	233e      	movs	r3, #62	; 0x3e
 8012e1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e20:	2302      	movs	r3, #2
 8012e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e24:	2300      	movs	r3, #0
 8012e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e28:	2303      	movs	r3, #3
 8012e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012e2c:	230b      	movs	r3, #11
 8012e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e34:	4619      	mov	r1, r3
 8012e36:	481e      	ldr	r0, [pc, #120]	; (8012eb0 <HAL_ETH_MspInit+0x160>)
 8012e38:	f7ee fcf2 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012e3c:	238f      	movs	r3, #143	; 0x8f
 8012e3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e40:	2302      	movs	r3, #2
 8012e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e44:	2300      	movs	r3, #0
 8012e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e48:	2303      	movs	r3, #3
 8012e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012e4c:	230b      	movs	r3, #11
 8012e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e54:	4619      	mov	r1, r3
 8012e56:	4817      	ldr	r0, [pc, #92]	; (8012eb4 <HAL_ETH_MspInit+0x164>)
 8012e58:	f7ee fce2 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12 
 8012e5c:	f643 1303 	movw	r3, #14595	; 0x3903
 8012e60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e62:	2302      	movs	r3, #2
 8012e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e66:	2300      	movs	r3, #0
 8012e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012e6e:	230b      	movs	r3, #11
 8012e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e76:	4619      	mov	r1, r3
 8012e78:	480f      	ldr	r0, [pc, #60]	; (8012eb8 <HAL_ETH_MspInit+0x168>)
 8012e7a:	f7ee fcd1 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8012e7e:	2200      	movs	r2, #0
 8012e80:	2105      	movs	r1, #5
 8012e82:	203d      	movs	r0, #61	; 0x3d
 8012e84:	f7ed fc90 	bl	80007a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8012e88:	203d      	movs	r0, #61	; 0x3d
 8012e8a:	f7ed fca9 	bl	80007e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8012e8e:	2200      	movs	r2, #0
 8012e90:	2105      	movs	r1, #5
 8012e92:	203e      	movs	r0, #62	; 0x3e
 8012e94:	f7ed fc88 	bl	80007a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8012e98:	203e      	movs	r0, #62	; 0x3e
 8012e9a:	f7ed fca1 	bl	80007e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8012e9e:	bf00      	nop
 8012ea0:	3738      	adds	r7, #56	; 0x38
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	40028000 	.word	0x40028000
 8012eac:	40023800 	.word	0x40023800
 8012eb0:	40020800 	.word	0x40020800
 8012eb4:	40020000 	.word	0x40020000
 8012eb8:	40020400 	.word	0x40020400

08012ebc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8012ec4:	4b04      	ldr	r3, [pc, #16]	; (8012ed8 <HAL_ETH_RxCpltCallback+0x1c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7ef fe73 	bl	8002bb4 <osSemaphoreRelease>
}
 8012ece:	bf00      	nop
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2000c71c 	.word	0x2000c71c

08012edc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8012edc:	b5b0      	push	{r4, r5, r7, lr}
 8012ede:	b090      	sub	sp, #64	; 0x40
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8012ee8:	4b60      	ldr	r3, [pc, #384]	; (801306c <low_level_init+0x190>)
 8012eea:	4a61      	ldr	r2, [pc, #388]	; (8013070 <low_level_init+0x194>)
 8012eec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8012eee:	4b5f      	ldr	r3, [pc, #380]	; (801306c <low_level_init+0x190>)
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8012ef4:	4b5d      	ldr	r3, [pc, #372]	; (801306c <low_level_init+0x190>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8012efa:	2300      	movs	r3, #0
 8012efc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8012f00:	2380      	movs	r3, #128	; 0x80
 8012f02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8012f06:	23e1      	movs	r3, #225	; 0xe1
 8012f08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8012f12:	2300      	movs	r3, #0
 8012f14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8012f1e:	4a53      	ldr	r2, [pc, #332]	; (801306c <low_level_init+0x190>)
 8012f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012f24:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8012f26:	4b51      	ldr	r3, [pc, #324]	; (801306c <low_level_init+0x190>)
 8012f28:	2201      	movs	r2, #1
 8012f2a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8012f2c:	4b4f      	ldr	r3, [pc, #316]	; (801306c <low_level_init+0x190>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8012f32:	4b4e      	ldr	r3, [pc, #312]	; (801306c <low_level_init+0x190>)
 8012f34:	2200      	movs	r2, #0
 8012f36:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8012f38:	484c      	ldr	r0, [pc, #304]	; (801306c <low_level_init+0x190>)
 8012f3a:	f7ed fc5f 	bl	80007fc <HAL_ETH_Init>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8012f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d108      	bne.n	8012f5e <low_level_init+0x82>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012f52:	f043 0304 	orr.w	r3, r3, #4
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8012f5e:	2304      	movs	r3, #4
 8012f60:	4a44      	ldr	r2, [pc, #272]	; (8013074 <low_level_init+0x198>)
 8012f62:	4945      	ldr	r1, [pc, #276]	; (8013078 <low_level_init+0x19c>)
 8012f64:	4841      	ldr	r0, [pc, #260]	; (801306c <low_level_init+0x190>)
 8012f66:	f7ed fde7 	bl	8000b38 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8012f6a:	2304      	movs	r3, #4
 8012f6c:	4a43      	ldr	r2, [pc, #268]	; (801307c <low_level_init+0x1a0>)
 8012f6e:	4944      	ldr	r1, [pc, #272]	; (8013080 <low_level_init+0x1a4>)
 8012f70:	483e      	ldr	r0, [pc, #248]	; (801306c <low_level_init+0x190>)
 8012f72:	f7ed fe4a 	bl	8000c0a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2206      	movs	r2, #6
 8012f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012f7e:	4b3b      	ldr	r3, [pc, #236]	; (801306c <low_level_init+0x190>)
 8012f80:	695b      	ldr	r3, [r3, #20]
 8012f82:	781a      	ldrb	r2, [r3, #0]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012f8a:	4b38      	ldr	r3, [pc, #224]	; (801306c <low_level_init+0x190>)
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	785a      	ldrb	r2, [r3, #1]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012f96:	4b35      	ldr	r3, [pc, #212]	; (801306c <low_level_init+0x190>)
 8012f98:	695b      	ldr	r3, [r3, #20]
 8012f9a:	789a      	ldrb	r2, [r3, #2]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8012fa2:	4b32      	ldr	r3, [pc, #200]	; (801306c <low_level_init+0x190>)
 8012fa4:	695b      	ldr	r3, [r3, #20]
 8012fa6:	78da      	ldrb	r2, [r3, #3]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012fae:	4b2f      	ldr	r3, [pc, #188]	; (801306c <low_level_init+0x190>)
 8012fb0:	695b      	ldr	r3, [r3, #20]
 8012fb2:	791a      	ldrb	r2, [r3, #4]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012fba:	4b2c      	ldr	r3, [pc, #176]	; (801306c <low_level_init+0x190>)
 8012fbc:	695b      	ldr	r3, [r3, #20]
 8012fbe:	795a      	ldrb	r2, [r3, #5]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012fcc:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012fd4:	f043 030a 	orr.w	r3, r3, #10
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012fec:	2101      	movs	r1, #1
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ef fd5e 	bl	8002ab0 <osSemaphoreCreate>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	4b23      	ldr	r3, [pc, #140]	; (8013084 <low_level_init+0x1a8>)
 8012ff8:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8012ffa:	4b23      	ldr	r3, [pc, #140]	; (8013088 <low_level_init+0x1ac>)
 8012ffc:	f107 040c 	add.w	r4, r7, #12
 8013000:	461d      	mov	r5, r3
 8013002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801300a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801300e:	f107 030c 	add.w	r3, r7, #12
 8013012:	6879      	ldr	r1, [r7, #4]
 8013014:	4618      	mov	r0, r3
 8013016:	f7ef fc44 	bl	80028a2 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 801301a:	4814      	ldr	r0, [pc, #80]	; (801306c <low_level_init+0x190>)
 801301c:	f7ee f91d 	bl	800125a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8013020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013024:	461a      	mov	r2, r3
 8013026:	2111      	movs	r1, #17
 8013028:	4810      	ldr	r0, [pc, #64]	; (801306c <low_level_init+0x190>)
 801302a:	f7ee f848 	bl	80010be <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 801302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013030:	f043 0303 	orr.w	r3, r3, #3
 8013034:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8013036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013038:	461a      	mov	r2, r3
 801303a:	2111      	movs	r1, #17
 801303c:	480b      	ldr	r0, [pc, #44]	; (801306c <low_level_init+0x190>)
 801303e:	f7ee f8a6 	bl	800118e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8013042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013046:	461a      	mov	r2, r3
 8013048:	2112      	movs	r1, #18
 801304a:	4808      	ldr	r0, [pc, #32]	; (801306c <low_level_init+0x190>)
 801304c:	f7ee f837 	bl	80010be <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 8013050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013052:	f043 0320 	orr.w	r3, r3, #32
 8013056:	63bb      	str	r3, [r7, #56]	; 0x38
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	461a      	mov	r2, r3
 801305c:	2112      	movs	r1, #18
 801305e:	4803      	ldr	r0, [pc, #12]	; (801306c <low_level_init+0x190>)
 8013060:	f7ee f895 	bl	800118e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8013064:	bf00      	nop
 8013066:	3740      	adds	r7, #64	; 0x40
 8013068:	46bd      	mov	sp, r7
 801306a:	bdb0      	pop	{r4, r5, r7, pc}
 801306c:	20011e40 	.word	0x20011e40
 8013070:	40028000 	.word	0x40028000
 8013074:	20011e88 	.word	0x20011e88
 8013078:	20010570 	.word	0x20010570
 801307c:	200105f0 	.word	0x200105f0
 8013080:	20011dc0 	.word	0x20011dc0
 8013084:	2000c71c 	.word	0x2000c71c
 8013088:	08017590 	.word	0x08017590

0801308c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b08a      	sub	sp, #40	; 0x28
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013096:	4b4b      	ldr	r3, [pc, #300]	; (80131c4 <low_level_output+0x138>)
 8013098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801309a:	689b      	ldr	r3, [r3, #8]
 801309c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801309e:	2300      	movs	r3, #0
 80130a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80130a2:	2300      	movs	r3, #0
 80130a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80130a6:	2300      	movs	r3, #0
 80130a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80130aa:	2300      	movs	r3, #0
 80130ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80130ae:	4b45      	ldr	r3, [pc, #276]	; (80131c4 <low_level_output+0x138>)
 80130b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80130b4:	2300      	movs	r3, #0
 80130b6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	623b      	str	r3, [r7, #32]
 80130bc:	e05a      	b.n	8013174 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	da03      	bge.n	80130ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80130c6:	23f8      	movs	r3, #248	; 0xf8
 80130c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80130cc:	e05c      	b.n	8013188 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80130ce:	6a3b      	ldr	r3, [r7, #32]
 80130d0:	895b      	ldrh	r3, [r3, #10]
 80130d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80130d8:	e02f      	b.n	801313a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80130da:	69fa      	ldr	r2, [r7, #28]
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	18d0      	adds	r0, r2, r3
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	685a      	ldr	r2, [r3, #4]
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	18d1      	adds	r1, r2, r3
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80130ee:	3304      	adds	r3, #4
 80130f0:	461a      	mov	r2, r3
 80130f2:	f000 feb8 	bl	8013e66 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80130fc:	69bb      	ldr	r3, [r7, #24]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	da03      	bge.n	801310c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8013104:	23f8      	movs	r3, #248	; 0xf8
 8013106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801310a:	e03d      	b.n	8013188 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	689b      	ldr	r3, [r3, #8]
 8013110:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8013112:	693a      	ldr	r2, [r7, #16]
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	4413      	add	r3, r2
 8013118:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801311c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801311e:	68ba      	ldr	r2, [r7, #8]
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	1ad3      	subs	r3, r2, r3
 8013124:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013128:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801312a:	697a      	ldr	r2, [r7, #20]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	1ad3      	subs	r3, r2, r3
 8013130:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013134:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8013136:	2300      	movs	r3, #0
 8013138:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801313a:	68fa      	ldr	r2, [r7, #12]
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	4413      	add	r3, r2
 8013140:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013144:	4293      	cmp	r3, r2
 8013146:	d8c8      	bhi.n	80130da <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013148:	69fa      	ldr	r2, [r7, #28]
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	18d0      	adds	r0, r2, r3
 801314e:	6a3b      	ldr	r3, [r7, #32]
 8013150:	685a      	ldr	r2, [r3, #4]
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	4413      	add	r3, r2
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	4619      	mov	r1, r3
 801315a:	f000 fe84 	bl	8013e66 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801315e:	693a      	ldr	r2, [r7, #16]
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	4413      	add	r3, r2
 8013164:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	4413      	add	r3, r2
 801316c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801316e:	6a3b      	ldr	r3, [r7, #32]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	623b      	str	r3, [r7, #32]
 8013174:	6a3b      	ldr	r3, [r7, #32]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1a1      	bne.n	80130be <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801317a:	6979      	ldr	r1, [r7, #20]
 801317c:	4811      	ldr	r0, [pc, #68]	; (80131c4 <low_level_output+0x138>)
 801317e:	f7ed fdb1 	bl	8000ce4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013188:	4b0e      	ldr	r3, [pc, #56]	; (80131c4 <low_level_output+0x138>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013190:	3314      	adds	r3, #20
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f003 0320 	and.w	r3, r3, #32
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00d      	beq.n	80131b8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801319c:	4b09      	ldr	r3, [pc, #36]	; (80131c4 <low_level_output+0x138>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131a4:	3314      	adds	r3, #20
 80131a6:	2220      	movs	r2, #32
 80131a8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80131aa:	4b06      	ldr	r3, [pc, #24]	; (80131c4 <low_level_output+0x138>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131b2:	3304      	adds	r3, #4
 80131b4:	2200      	movs	r2, #0
 80131b6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80131b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3728      	adds	r7, #40	; 0x28
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	20011e40 	.word	0x20011e40

080131c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b08c      	sub	sp, #48	; 0x30
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80131d0:	2300      	movs	r3, #0
 80131d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80131d4:	2300      	movs	r3, #0
 80131d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80131dc:	2300      	movs	r3, #0
 80131de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80131e8:	2300      	movs	r3, #0
 80131ea:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80131ec:	484e      	ldr	r0, [pc, #312]	; (8013328 <low_level_input+0x160>)
 80131ee:	f7ed fe63 	bl	8000eb8 <HAL_ETH_GetReceivedFrame_IT>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <low_level_input+0x34>
    return NULL;
 80131f8:	2300      	movs	r3, #0
 80131fa:	e091      	b.n	8013320 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80131fc:	4b4a      	ldr	r3, [pc, #296]	; (8013328 <low_level_input+0x160>)
 80131fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013200:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013202:	4b49      	ldr	r3, [pc, #292]	; (8013328 <low_level_input+0x160>)
 8013204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013206:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8013208:	89fb      	ldrh	r3, [r7, #14]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d006      	beq.n	801321c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801320e:	89fb      	ldrh	r3, [r7, #14]
 8013210:	2203      	movs	r2, #3
 8013212:	4619      	mov	r1, r3
 8013214:	2004      	movs	r0, #4
 8013216:	f7f6 fc6b 	bl	8009af0 <pbuf_alloc>
 801321a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 801321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321e:	2b00      	cmp	r3, #0
 8013220:	d04b      	beq.n	80132ba <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013222:	4b41      	ldr	r3, [pc, #260]	; (8013328 <low_level_input+0x160>)
 8013224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013226:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013228:	2300      	movs	r3, #0
 801322a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013230:	e040      	b.n	80132b4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8013232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013234:	895b      	ldrh	r3, [r3, #10]
 8013236:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8013238:	2300      	movs	r3, #0
 801323a:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801323c:	e021      	b.n	8013282 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013240:	685a      	ldr	r2, [r3, #4]
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	18d0      	adds	r0, r2, r3
 8013246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	18d1      	adds	r1, r2, r3
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8013252:	3304      	adds	r3, #4
 8013254:	461a      	mov	r2, r3
 8013256:	f000 fe06 	bl	8013e66 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013260:	6a3b      	ldr	r3, [r7, #32]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013266:	69fa      	ldr	r2, [r7, #28]
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	4413      	add	r3, r2
 801326c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013270:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013272:	69ba      	ldr	r2, [r7, #24]
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	1ad3      	subs	r3, r2, r3
 8013278:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801327c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801327e:	2300      	movs	r3, #0
 8013280:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	4413      	add	r3, r2
 8013288:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801328c:	4293      	cmp	r3, r2
 801328e:	d8d6      	bhi.n	801323e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	685a      	ldr	r2, [r3, #4]
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	18d0      	adds	r0, r2, r3
 8013298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	4413      	add	r3, r2
 801329e:	697a      	ldr	r2, [r7, #20]
 80132a0:	4619      	mov	r1, r3
 80132a2:	f000 fde0 	bl	8013e66 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80132a6:	69fa      	ldr	r2, [r7, #28]
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	4413      	add	r3, r2
 80132ac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80132ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80132b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d1bb      	bne.n	8013232 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80132ba:	4b1b      	ldr	r3, [pc, #108]	; (8013328 <low_level_input+0x160>)
 80132bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132be:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80132c0:	2300      	movs	r3, #0
 80132c2:	613b      	str	r3, [r7, #16]
 80132c4:	e00b      	b.n	80132de <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80132c6:	6a3b      	ldr	r3, [r7, #32]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80132d2:	6a3b      	ldr	r3, [r7, #32]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	3301      	adds	r3, #1
 80132dc:	613b      	str	r3, [r7, #16]
 80132de:	4b12      	ldr	r3, [pc, #72]	; (8013328 <low_level_input+0x160>)
 80132e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e2:	693a      	ldr	r2, [r7, #16]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d3ee      	bcc.n	80132c6 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80132e8:	4b0f      	ldr	r3, [pc, #60]	; (8013328 <low_level_input+0x160>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80132ee:	4b0e      	ldr	r3, [pc, #56]	; (8013328 <low_level_input+0x160>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132f6:	3314      	adds	r3, #20
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d00d      	beq.n	801331e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013302:	4b09      	ldr	r3, [pc, #36]	; (8013328 <low_level_input+0x160>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801330a:	3314      	adds	r3, #20
 801330c:	2280      	movs	r2, #128	; 0x80
 801330e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8013310:	4b05      	ldr	r3, [pc, #20]	; (8013328 <low_level_input+0x160>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013318:	3308      	adds	r3, #8
 801331a:	2200      	movs	r2, #0
 801331c:	601a      	str	r2, [r3, #0]
  }
  return p;
 801331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013320:	4618      	mov	r0, r3
 8013322:	3730      	adds	r7, #48	; 0x30
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	20011e40 	.word	0x20011e40

0801332c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013338:	4b0f      	ldr	r3, [pc, #60]	; (8013378 <ethernetif_input+0x4c>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f04f 31ff 	mov.w	r1, #4294967295
 8013340:	4618      	mov	r0, r3
 8013342:	f7ef fbe9 	bl	8002b18 <osSemaphoreWait>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1f5      	bne.n	8013338 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 801334c:	68f8      	ldr	r0, [r7, #12]
 801334e:	f7ff ff3b 	bl	80131c8 <low_level_input>
 8013352:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00a      	beq.n	8013370 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	691b      	ldr	r3, [r3, #16]
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	68b8      	ldr	r0, [r7, #8]
 8013362:	4798      	blx	r3
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d002      	beq.n	8013370 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 801336a:	68b8      	ldr	r0, [r7, #8]
 801336c:	f7f6 ff32 	bl	800a1d4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d1ea      	bne.n	801334c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013376:	e7df      	b.n	8013338 <ethernetif_input+0xc>
 8013378:	2000c71c 	.word	0x2000c71c

0801337c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d106      	bne.n	8013398 <ethernetif_init+0x1c>
 801338a:	4b0e      	ldr	r3, [pc, #56]	; (80133c4 <ethernetif_init+0x48>)
 801338c:	f240 2241 	movw	r2, #577	; 0x241
 8013390:	490d      	ldr	r1, [pc, #52]	; (80133c8 <ethernetif_init+0x4c>)
 8013392:	480e      	ldr	r0, [pc, #56]	; (80133cc <ethernetif_init+0x50>)
 8013394:	f000 fd7a 	bl	8013e8c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2273      	movs	r2, #115	; 0x73
 801339c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2274      	movs	r2, #116	; 0x74
 80133a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4a09      	ldr	r2, [pc, #36]	; (80133d0 <ethernetif_init+0x54>)
 80133ac:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	4a08      	ldr	r2, [pc, #32]	; (80133d4 <ethernetif_init+0x58>)
 80133b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff fd91 	bl	8012edc <low_level_init>

  return ERR_OK;
 80133ba:	2300      	movs	r3, #0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	080175ac 	.word	0x080175ac
 80133c8:	080175c0 	.word	0x080175c0
 80133cc:	080175d0 	.word	0x080175d0
 80133d0:	08010d8d 	.word	0x08010d8d
 80133d4:	0801308d 	.word	0x0801308d

080133d8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80133dc:	f7ed f8fe 	bl	80005dc <HAL_GetTick>
 80133e0:	4603      	mov	r3, r0
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	bd80      	pop	{r7, pc}
	...

080133e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80133e8:	b480      	push	{r7}
 80133ea:	b085      	sub	sp, #20
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	60b9      	str	r1, [r7, #8]
 80133f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	4a07      	ldr	r2, [pc, #28]	; (8013414 <vApplicationGetIdleTaskMemory+0x2c>)
 80133f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	4a06      	ldr	r2, [pc, #24]	; (8013418 <vApplicationGetIdleTaskMemory+0x30>)
 80133fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2280      	movs	r2, #128	; 0x80
 8013404:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8013406:	bf00      	nop
 8013408:	3714      	adds	r7, #20
 801340a:	46bd      	mov	sp, r7
 801340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013410:	4770      	bx	lr
 8013412:	bf00      	nop
 8013414:	2000c720 	.word	0x2000c720
 8013418:	2000c774 	.word	0x2000c774

0801341c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8013422:	4b8c      	ldr	r3, [pc, #560]	; (8013654 <MX_LWIP_Init+0x238>)
 8013424:	22a9      	movs	r2, #169	; 0xa9
 8013426:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8013428:	4b8a      	ldr	r3, [pc, #552]	; (8013654 <MX_LWIP_Init+0x238>)
 801342a:	22fe      	movs	r2, #254	; 0xfe
 801342c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 123;
 801342e:	4b89      	ldr	r3, [pc, #548]	; (8013654 <MX_LWIP_Init+0x238>)
 8013430:	227b      	movs	r2, #123	; 0x7b
 8013432:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8013434:	4b87      	ldr	r3, [pc, #540]	; (8013654 <MX_LWIP_Init+0x238>)
 8013436:	227b      	movs	r2, #123	; 0x7b
 8013438:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801343a:	4b87      	ldr	r3, [pc, #540]	; (8013658 <MX_LWIP_Init+0x23c>)
 801343c:	22ff      	movs	r2, #255	; 0xff
 801343e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8013440:	4b85      	ldr	r3, [pc, #532]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013442:	22ff      	movs	r2, #255	; 0xff
 8013444:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8013446:	4b84      	ldr	r3, [pc, #528]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013448:	22ff      	movs	r2, #255	; 0xff
 801344a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801344c:	4b82      	ldr	r3, [pc, #520]	; (8013658 <MX_LWIP_Init+0x23c>)
 801344e:	2200      	movs	r2, #0
 8013450:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8013452:	4b82      	ldr	r3, [pc, #520]	; (801365c <MX_LWIP_Init+0x240>)
 8013454:	2200      	movs	r2, #0
 8013456:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8013458:	4b80      	ldr	r3, [pc, #512]	; (801365c <MX_LWIP_Init+0x240>)
 801345a:	2200      	movs	r2, #0
 801345c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 801345e:	4b7f      	ldr	r3, [pc, #508]	; (801365c <MX_LWIP_Init+0x240>)
 8013460:	2200      	movs	r2, #0
 8013462:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8013464:	4b7d      	ldr	r3, [pc, #500]	; (801365c <MX_LWIP_Init+0x240>)
 8013466:	2200      	movs	r2, #0
 8013468:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801346a:	2100      	movs	r1, #0
 801346c:	2000      	movs	r0, #0
 801346e:	f7f5 fccd 	bl	8008e0c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013472:	4b78      	ldr	r3, [pc, #480]	; (8013654 <MX_LWIP_Init+0x238>)
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	061a      	lsls	r2, r3, #24
 8013478:	4b76      	ldr	r3, [pc, #472]	; (8013654 <MX_LWIP_Init+0x238>)
 801347a:	785b      	ldrb	r3, [r3, #1]
 801347c:	041b      	lsls	r3, r3, #16
 801347e:	431a      	orrs	r2, r3
 8013480:	4b74      	ldr	r3, [pc, #464]	; (8013654 <MX_LWIP_Init+0x238>)
 8013482:	789b      	ldrb	r3, [r3, #2]
 8013484:	021b      	lsls	r3, r3, #8
 8013486:	4313      	orrs	r3, r2
 8013488:	4a72      	ldr	r2, [pc, #456]	; (8013654 <MX_LWIP_Init+0x238>)
 801348a:	78d2      	ldrb	r2, [r2, #3]
 801348c:	4313      	orrs	r3, r2
 801348e:	061a      	lsls	r2, r3, #24
 8013490:	4b70      	ldr	r3, [pc, #448]	; (8013654 <MX_LWIP_Init+0x238>)
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	0619      	lsls	r1, r3, #24
 8013496:	4b6f      	ldr	r3, [pc, #444]	; (8013654 <MX_LWIP_Init+0x238>)
 8013498:	785b      	ldrb	r3, [r3, #1]
 801349a:	041b      	lsls	r3, r3, #16
 801349c:	4319      	orrs	r1, r3
 801349e:	4b6d      	ldr	r3, [pc, #436]	; (8013654 <MX_LWIP_Init+0x238>)
 80134a0:	789b      	ldrb	r3, [r3, #2]
 80134a2:	021b      	lsls	r3, r3, #8
 80134a4:	430b      	orrs	r3, r1
 80134a6:	496b      	ldr	r1, [pc, #428]	; (8013654 <MX_LWIP_Init+0x238>)
 80134a8:	78c9      	ldrb	r1, [r1, #3]
 80134aa:	430b      	orrs	r3, r1
 80134ac:	021b      	lsls	r3, r3, #8
 80134ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80134b2:	431a      	orrs	r2, r3
 80134b4:	4b67      	ldr	r3, [pc, #412]	; (8013654 <MX_LWIP_Init+0x238>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	0619      	lsls	r1, r3, #24
 80134ba:	4b66      	ldr	r3, [pc, #408]	; (8013654 <MX_LWIP_Init+0x238>)
 80134bc:	785b      	ldrb	r3, [r3, #1]
 80134be:	041b      	lsls	r3, r3, #16
 80134c0:	4319      	orrs	r1, r3
 80134c2:	4b64      	ldr	r3, [pc, #400]	; (8013654 <MX_LWIP_Init+0x238>)
 80134c4:	789b      	ldrb	r3, [r3, #2]
 80134c6:	021b      	lsls	r3, r3, #8
 80134c8:	430b      	orrs	r3, r1
 80134ca:	4962      	ldr	r1, [pc, #392]	; (8013654 <MX_LWIP_Init+0x238>)
 80134cc:	78c9      	ldrb	r1, [r1, #3]
 80134ce:	430b      	orrs	r3, r1
 80134d0:	0a1b      	lsrs	r3, r3, #8
 80134d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80134d6:	431a      	orrs	r2, r3
 80134d8:	4b5e      	ldr	r3, [pc, #376]	; (8013654 <MX_LWIP_Init+0x238>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	0619      	lsls	r1, r3, #24
 80134de:	4b5d      	ldr	r3, [pc, #372]	; (8013654 <MX_LWIP_Init+0x238>)
 80134e0:	785b      	ldrb	r3, [r3, #1]
 80134e2:	041b      	lsls	r3, r3, #16
 80134e4:	4319      	orrs	r1, r3
 80134e6:	4b5b      	ldr	r3, [pc, #364]	; (8013654 <MX_LWIP_Init+0x238>)
 80134e8:	789b      	ldrb	r3, [r3, #2]
 80134ea:	021b      	lsls	r3, r3, #8
 80134ec:	430b      	orrs	r3, r1
 80134ee:	4959      	ldr	r1, [pc, #356]	; (8013654 <MX_LWIP_Init+0x238>)
 80134f0:	78c9      	ldrb	r1, [r1, #3]
 80134f2:	430b      	orrs	r3, r1
 80134f4:	0e1b      	lsrs	r3, r3, #24
 80134f6:	4313      	orrs	r3, r2
 80134f8:	4a59      	ldr	r2, [pc, #356]	; (8013660 <MX_LWIP_Init+0x244>)
 80134fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80134fc:	4b56      	ldr	r3, [pc, #344]	; (8013658 <MX_LWIP_Init+0x23c>)
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	061a      	lsls	r2, r3, #24
 8013502:	4b55      	ldr	r3, [pc, #340]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013504:	785b      	ldrb	r3, [r3, #1]
 8013506:	041b      	lsls	r3, r3, #16
 8013508:	431a      	orrs	r2, r3
 801350a:	4b53      	ldr	r3, [pc, #332]	; (8013658 <MX_LWIP_Init+0x23c>)
 801350c:	789b      	ldrb	r3, [r3, #2]
 801350e:	021b      	lsls	r3, r3, #8
 8013510:	4313      	orrs	r3, r2
 8013512:	4a51      	ldr	r2, [pc, #324]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013514:	78d2      	ldrb	r2, [r2, #3]
 8013516:	4313      	orrs	r3, r2
 8013518:	061a      	lsls	r2, r3, #24
 801351a:	4b4f      	ldr	r3, [pc, #316]	; (8013658 <MX_LWIP_Init+0x23c>)
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	0619      	lsls	r1, r3, #24
 8013520:	4b4d      	ldr	r3, [pc, #308]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013522:	785b      	ldrb	r3, [r3, #1]
 8013524:	041b      	lsls	r3, r3, #16
 8013526:	4319      	orrs	r1, r3
 8013528:	4b4b      	ldr	r3, [pc, #300]	; (8013658 <MX_LWIP_Init+0x23c>)
 801352a:	789b      	ldrb	r3, [r3, #2]
 801352c:	021b      	lsls	r3, r3, #8
 801352e:	430b      	orrs	r3, r1
 8013530:	4949      	ldr	r1, [pc, #292]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013532:	78c9      	ldrb	r1, [r1, #3]
 8013534:	430b      	orrs	r3, r1
 8013536:	021b      	lsls	r3, r3, #8
 8013538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801353c:	431a      	orrs	r2, r3
 801353e:	4b46      	ldr	r3, [pc, #280]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	0619      	lsls	r1, r3, #24
 8013544:	4b44      	ldr	r3, [pc, #272]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013546:	785b      	ldrb	r3, [r3, #1]
 8013548:	041b      	lsls	r3, r3, #16
 801354a:	4319      	orrs	r1, r3
 801354c:	4b42      	ldr	r3, [pc, #264]	; (8013658 <MX_LWIP_Init+0x23c>)
 801354e:	789b      	ldrb	r3, [r3, #2]
 8013550:	021b      	lsls	r3, r3, #8
 8013552:	430b      	orrs	r3, r1
 8013554:	4940      	ldr	r1, [pc, #256]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013556:	78c9      	ldrb	r1, [r1, #3]
 8013558:	430b      	orrs	r3, r1
 801355a:	0a1b      	lsrs	r3, r3, #8
 801355c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013560:	431a      	orrs	r2, r3
 8013562:	4b3d      	ldr	r3, [pc, #244]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	0619      	lsls	r1, r3, #24
 8013568:	4b3b      	ldr	r3, [pc, #236]	; (8013658 <MX_LWIP_Init+0x23c>)
 801356a:	785b      	ldrb	r3, [r3, #1]
 801356c:	041b      	lsls	r3, r3, #16
 801356e:	4319      	orrs	r1, r3
 8013570:	4b39      	ldr	r3, [pc, #228]	; (8013658 <MX_LWIP_Init+0x23c>)
 8013572:	789b      	ldrb	r3, [r3, #2]
 8013574:	021b      	lsls	r3, r3, #8
 8013576:	430b      	orrs	r3, r1
 8013578:	4937      	ldr	r1, [pc, #220]	; (8013658 <MX_LWIP_Init+0x23c>)
 801357a:	78c9      	ldrb	r1, [r1, #3]
 801357c:	430b      	orrs	r3, r1
 801357e:	0e1b      	lsrs	r3, r3, #24
 8013580:	4313      	orrs	r3, r2
 8013582:	4a38      	ldr	r2, [pc, #224]	; (8013664 <MX_LWIP_Init+0x248>)
 8013584:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013586:	4b35      	ldr	r3, [pc, #212]	; (801365c <MX_LWIP_Init+0x240>)
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	061a      	lsls	r2, r3, #24
 801358c:	4b33      	ldr	r3, [pc, #204]	; (801365c <MX_LWIP_Init+0x240>)
 801358e:	785b      	ldrb	r3, [r3, #1]
 8013590:	041b      	lsls	r3, r3, #16
 8013592:	431a      	orrs	r2, r3
 8013594:	4b31      	ldr	r3, [pc, #196]	; (801365c <MX_LWIP_Init+0x240>)
 8013596:	789b      	ldrb	r3, [r3, #2]
 8013598:	021b      	lsls	r3, r3, #8
 801359a:	4313      	orrs	r3, r2
 801359c:	4a2f      	ldr	r2, [pc, #188]	; (801365c <MX_LWIP_Init+0x240>)
 801359e:	78d2      	ldrb	r2, [r2, #3]
 80135a0:	4313      	orrs	r3, r2
 80135a2:	061a      	lsls	r2, r3, #24
 80135a4:	4b2d      	ldr	r3, [pc, #180]	; (801365c <MX_LWIP_Init+0x240>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	0619      	lsls	r1, r3, #24
 80135aa:	4b2c      	ldr	r3, [pc, #176]	; (801365c <MX_LWIP_Init+0x240>)
 80135ac:	785b      	ldrb	r3, [r3, #1]
 80135ae:	041b      	lsls	r3, r3, #16
 80135b0:	4319      	orrs	r1, r3
 80135b2:	4b2a      	ldr	r3, [pc, #168]	; (801365c <MX_LWIP_Init+0x240>)
 80135b4:	789b      	ldrb	r3, [r3, #2]
 80135b6:	021b      	lsls	r3, r3, #8
 80135b8:	430b      	orrs	r3, r1
 80135ba:	4928      	ldr	r1, [pc, #160]	; (801365c <MX_LWIP_Init+0x240>)
 80135bc:	78c9      	ldrb	r1, [r1, #3]
 80135be:	430b      	orrs	r3, r1
 80135c0:	021b      	lsls	r3, r3, #8
 80135c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80135c6:	431a      	orrs	r2, r3
 80135c8:	4b24      	ldr	r3, [pc, #144]	; (801365c <MX_LWIP_Init+0x240>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	0619      	lsls	r1, r3, #24
 80135ce:	4b23      	ldr	r3, [pc, #140]	; (801365c <MX_LWIP_Init+0x240>)
 80135d0:	785b      	ldrb	r3, [r3, #1]
 80135d2:	041b      	lsls	r3, r3, #16
 80135d4:	4319      	orrs	r1, r3
 80135d6:	4b21      	ldr	r3, [pc, #132]	; (801365c <MX_LWIP_Init+0x240>)
 80135d8:	789b      	ldrb	r3, [r3, #2]
 80135da:	021b      	lsls	r3, r3, #8
 80135dc:	430b      	orrs	r3, r1
 80135de:	491f      	ldr	r1, [pc, #124]	; (801365c <MX_LWIP_Init+0x240>)
 80135e0:	78c9      	ldrb	r1, [r1, #3]
 80135e2:	430b      	orrs	r3, r1
 80135e4:	0a1b      	lsrs	r3, r3, #8
 80135e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80135ea:	431a      	orrs	r2, r3
 80135ec:	4b1b      	ldr	r3, [pc, #108]	; (801365c <MX_LWIP_Init+0x240>)
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	0619      	lsls	r1, r3, #24
 80135f2:	4b1a      	ldr	r3, [pc, #104]	; (801365c <MX_LWIP_Init+0x240>)
 80135f4:	785b      	ldrb	r3, [r3, #1]
 80135f6:	041b      	lsls	r3, r3, #16
 80135f8:	4319      	orrs	r1, r3
 80135fa:	4b18      	ldr	r3, [pc, #96]	; (801365c <MX_LWIP_Init+0x240>)
 80135fc:	789b      	ldrb	r3, [r3, #2]
 80135fe:	021b      	lsls	r3, r3, #8
 8013600:	430b      	orrs	r3, r1
 8013602:	4916      	ldr	r1, [pc, #88]	; (801365c <MX_LWIP_Init+0x240>)
 8013604:	78c9      	ldrb	r1, [r1, #3]
 8013606:	430b      	orrs	r3, r1
 8013608:	0e1b      	lsrs	r3, r3, #24
 801360a:	4313      	orrs	r3, r2
 801360c:	4a16      	ldr	r2, [pc, #88]	; (8013668 <MX_LWIP_Init+0x24c>)
 801360e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013610:	4b16      	ldr	r3, [pc, #88]	; (801366c <MX_LWIP_Init+0x250>)
 8013612:	9302      	str	r3, [sp, #8]
 8013614:	4b16      	ldr	r3, [pc, #88]	; (8013670 <MX_LWIP_Init+0x254>)
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	2300      	movs	r3, #0
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	4b12      	ldr	r3, [pc, #72]	; (8013668 <MX_LWIP_Init+0x24c>)
 801361e:	4a11      	ldr	r2, [pc, #68]	; (8013664 <MX_LWIP_Init+0x248>)
 8013620:	490f      	ldr	r1, [pc, #60]	; (8013660 <MX_LWIP_Init+0x244>)
 8013622:	4814      	ldr	r0, [pc, #80]	; (8013674 <MX_LWIP_Init+0x258>)
 8013624:	f7f6 f8ae 	bl	8009784 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013628:	4812      	ldr	r0, [pc, #72]	; (8013674 <MX_LWIP_Init+0x258>)
 801362a:	f7f6 f98b 	bl	8009944 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801362e:	4b11      	ldr	r3, [pc, #68]	; (8013674 <MX_LWIP_Init+0x258>)
 8013630:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013634:	089b      	lsrs	r3, r3, #2
 8013636:	f003 0301 	and.w	r3, r3, #1
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2b00      	cmp	r3, #0
 801363e:	d003      	beq.n	8013648 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013640:	480c      	ldr	r0, [pc, #48]	; (8013674 <MX_LWIP_Init+0x258>)
 8013642:	f7f6 f98f 	bl	8009964 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013646:	e002      	b.n	801364e <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8013648:	480a      	ldr	r0, [pc, #40]	; (8013674 <MX_LWIP_Init+0x258>)
 801364a:	f7f6 f9cf 	bl	80099ec <netif_set_down>
}
 801364e:	bf00      	nop
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	20013694 	.word	0x20013694
 8013658:	20013690 	.word	0x20013690
 801365c:	20013658 	.word	0x20013658
 8013660:	2001368c 	.word	0x2001368c
 8013664:	20013698 	.word	0x20013698
 8013668:	2001369c 	.word	0x2001369c
 801366c:	08008d09 	.word	0x08008d09
 8013670:	0801337d 	.word	0x0801337d
 8013674:	2001365c 	.word	0x2001365c

08013678 <main>:

/**
 * @brief The application entry point.
 * @retval int
 */
int main(void) {
 8013678:	b5b0      	push	{r4, r5, r7, lr}
 801367a:	b088      	sub	sp, #32
 801367c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 801367e:	f7ec ff77 	bl	8000570 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8013682:	f000 f81b 	bl	80136bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8013686:	f000 f883 	bl	8013790 <MX_GPIO_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 801368a:	4b0a      	ldr	r3, [pc, #40]	; (80136b4 <main+0x3c>)
 801368c:	1d3c      	adds	r4, r7, #4
 801368e:	461d      	mov	r5, r3
 8013690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801369c:	1d3b      	adds	r3, r7, #4
 801369e:	2100      	movs	r1, #0
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7ef f8fe 	bl	80028a2 <osThreadCreate>
 80136a6:	4602      	mov	r2, r0
 80136a8:	4b03      	ldr	r3, [pc, #12]	; (80136b8 <main+0x40>)
 80136aa:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80136ac:	f7ef f8e2 	bl	8002874 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80136b0:	e7fe      	b.n	80136b0 <main+0x38>
 80136b2:	bf00      	nop
 80136b4:	08017604 	.word	0x08017604
 80136b8:	200136b8 	.word	0x200136b8

080136bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80136bc:	b580      	push	{r7, lr}
 80136be:	b094      	sub	sp, #80	; 0x50
 80136c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80136c2:	f107 0320 	add.w	r3, r7, #32
 80136c6:	2230      	movs	r2, #48	; 0x30
 80136c8:	2100      	movs	r1, #0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f000 fbd6 	bl	8013e7c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80136d0:	f107 030c 	add.w	r3, r7, #12
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
 80136d8:	605a      	str	r2, [r3, #4]
 80136da:	609a      	str	r2, [r3, #8]
 80136dc:	60da      	str	r2, [r3, #12]
 80136de:	611a      	str	r2, [r3, #16]

	/** Configure the

	 main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80136e0:	2300      	movs	r3, #0
 80136e2:	60bb      	str	r3, [r7, #8]
 80136e4:	4b28      	ldr	r3, [pc, #160]	; (8013788 <SystemClock_Config+0xcc>)
 80136e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136e8:	4a27      	ldr	r2, [pc, #156]	; (8013788 <SystemClock_Config+0xcc>)
 80136ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ee:	6413      	str	r3, [r2, #64]	; 0x40
 80136f0:	4b25      	ldr	r3, [pc, #148]	; (8013788 <SystemClock_Config+0xcc>)
 80136f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136f8:	60bb      	str	r3, [r7, #8]
 80136fa:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80136fc:	2300      	movs	r3, #0
 80136fe:	607b      	str	r3, [r7, #4]
 8013700:	4b22      	ldr	r3, [pc, #136]	; (801378c <SystemClock_Config+0xd0>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	4a21      	ldr	r2, [pc, #132]	; (801378c <SystemClock_Config+0xd0>)
 8013706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801370a:	6013      	str	r3, [r2, #0]
 801370c:	4b1f      	ldr	r3, [pc, #124]	; (801378c <SystemClock_Config+0xd0>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013714:	607b      	str	r3, [r7, #4]
 8013716:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013718:	2302      	movs	r3, #2
 801371a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801371c:	2301      	movs	r3, #1
 801371e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8013720:	2310      	movs	r3, #16
 8013722:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013724:	2302      	movs	r3, #2
 8013726:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013728:	2300      	movs	r3, #0
 801372a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 801372c:	2308      	movs	r3, #8
 801372e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8013730:	23a8      	movs	r3, #168	; 0xa8
 8013732:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013734:	2302      	movs	r3, #2
 8013736:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8013738:	2304      	movs	r3, #4
 801373a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 801373c:	f107 0320 	add.w	r3, r7, #32
 8013740:	4618      	mov	r0, r3
 8013742:	f7ee fa07 	bl	8001b54 <HAL_RCC_OscConfig>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <SystemClock_Config+0x94>
		Error_Handler();
 801374c:	f000 f996 	bl	8013a7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8013750:	230f      	movs	r3, #15
 8013752:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013754:	2302      	movs	r3, #2
 8013756:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013758:	2300      	movs	r3, #0
 801375a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801375c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013760:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013766:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8013768:	f107 030c 	add.w	r3, r7, #12
 801376c:	2105      	movs	r1, #5
 801376e:	4618      	mov	r0, r3
 8013770:	f7ee fc32 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8013774:	4603      	mov	r3, r0
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <SystemClock_Config+0xc2>
		Error_Handler();
 801377a:	f000 f97f 	bl	8013a7c <Error_Handler>
	}
}
 801377e:	bf00      	nop
 8013780:	3750      	adds	r7, #80	; 0x50
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	40023800 	.word	0x40023800
 801378c:	40007000 	.word	0x40007000

08013790 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8013796:	2300      	movs	r3, #0
 8013798:	60fb      	str	r3, [r7, #12]
 801379a:	4b1e      	ldr	r3, [pc, #120]	; (8013814 <MX_GPIO_Init+0x84>)
 801379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801379e:	4a1d      	ldr	r2, [pc, #116]	; (8013814 <MX_GPIO_Init+0x84>)
 80137a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137a4:	6313      	str	r3, [r2, #48]	; 0x30
 80137a6:	4b1b      	ldr	r3, [pc, #108]	; (8013814 <MX_GPIO_Init+0x84>)
 80137a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137ae:	60fb      	str	r3, [r7, #12]
 80137b0:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80137b2:	2300      	movs	r3, #0
 80137b4:	60bb      	str	r3, [r7, #8]
 80137b6:	4b17      	ldr	r3, [pc, #92]	; (8013814 <MX_GPIO_Init+0x84>)
 80137b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ba:	4a16      	ldr	r2, [pc, #88]	; (8013814 <MX_GPIO_Init+0x84>)
 80137bc:	f043 0304 	orr.w	r3, r3, #4
 80137c0:	6313      	str	r3, [r2, #48]	; 0x30
 80137c2:	4b14      	ldr	r3, [pc, #80]	; (8013814 <MX_GPIO_Init+0x84>)
 80137c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c6:	f003 0304 	and.w	r3, r3, #4
 80137ca:	60bb      	str	r3, [r7, #8]
 80137cc:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80137ce:	2300      	movs	r3, #0
 80137d0:	607b      	str	r3, [r7, #4]
 80137d2:	4b10      	ldr	r3, [pc, #64]	; (8013814 <MX_GPIO_Init+0x84>)
 80137d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137d6:	4a0f      	ldr	r2, [pc, #60]	; (8013814 <MX_GPIO_Init+0x84>)
 80137d8:	f043 0301 	orr.w	r3, r3, #1
 80137dc:	6313      	str	r3, [r2, #48]	; 0x30
 80137de:	4b0d      	ldr	r3, [pc, #52]	; (8013814 <MX_GPIO_Init+0x84>)
 80137e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e2:	f003 0301 	and.w	r3, r3, #1
 80137e6:	607b      	str	r3, [r7, #4]
 80137e8:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80137ea:	2300      	movs	r3, #0
 80137ec:	603b      	str	r3, [r7, #0]
 80137ee:	4b09      	ldr	r3, [pc, #36]	; (8013814 <MX_GPIO_Init+0x84>)
 80137f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137f2:	4a08      	ldr	r2, [pc, #32]	; (8013814 <MX_GPIO_Init+0x84>)
 80137f4:	f043 0302 	orr.w	r3, r3, #2
 80137f8:	6313      	str	r3, [r2, #48]	; 0x30
 80137fa:	4b06      	ldr	r3, [pc, #24]	; (8013814 <MX_GPIO_Init+0x84>)
 80137fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137fe:	f003 0302 	and.w	r3, r3, #2
 8013802:	603b      	str	r3, [r7, #0]
 8013804:	683b      	ldr	r3, [r7, #0]
	;

}
 8013806:	bf00      	nop
 8013808:	3714      	adds	r7, #20
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr
 8013812:	bf00      	nop
 8013814:	40023800 	.word	0x40023800

08013818 <client_socket_thread1>:
  struct sockaddr_in remotehost;
  socklen_t sockaddrsize;
  int accept_sock;
} struct_client_socket;
struct_client_socket client_socket01,client_socket02;
static void client_socket_thread1(void const * argument) {
 8013818:	b580      	push	{r7, lr}
 801381a:	b086      	sub	sp, #24
 801381c:	af02      	add	r7, sp, #8
 801381e:	6078      	str	r0, [r7, #4]

	static char data[566];
	char data1[4];
	data1[0]='f';
 8013820:	2366      	movs	r3, #102	; 0x66
 8013822:	723b      	strb	r3, [r7, #8]
	data1[1]='u';
 8013824:	2375      	movs	r3, #117	; 0x75
 8013826:	727b      	strb	r3, [r7, #9]
	data1[2]='c';
 8013828:	2363      	movs	r3, #99	; 0x63
 801382a:	72bb      	strb	r3, [r7, #10]
	data1[3]='k';
 801382c:	236b      	movs	r3, #107	; 0x6b
 801382e:	72fb      	strb	r3, [r7, #11]
	//remotehost = arg_client_socket->remotehost;
	//sockaddrsize  = arg_client_socket->sockaddrsize;
	//accept_sock = arg_client_socket->accept_sock;
	while (1)
	{
		a=recv( client_socket01.accept_sock,data, sizeof(data), 0);
 8013830:	4b15      	ldr	r3, [pc, #84]	; (8013888 <client_socket_thread1+0x70>)
 8013832:	6958      	ldr	r0, [r3, #20]
 8013834:	2300      	movs	r3, #0
 8013836:	f240 2236 	movw	r2, #566	; 0x236
 801383a:	4914      	ldr	r1, [pc, #80]	; (801388c <client_socket_thread1+0x74>)
 801383c:	f7f4 ff2c 	bl	8008698 <lwip_recv>
 8013840:	60f8      	str	r0, [r7, #12]
		//while( (recv( accept_sock,data, sizeof(data), 0))==ERR_OK)
		//{
			sendto(client_socket01.accept_sock,data1,sizeof(data1),0,(struct sockaddr *)&client_socket01.remotehost, client_socket01.sockaddrsize);
 8013842:	4b11      	ldr	r3, [pc, #68]	; (8013888 <client_socket_thread1+0x70>)
 8013844:	6958      	ldr	r0, [r3, #20]
 8013846:	4b10      	ldr	r3, [pc, #64]	; (8013888 <client_socket_thread1+0x70>)
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	f107 0108 	add.w	r1, r7, #8
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	4b0d      	ldr	r3, [pc, #52]	; (8013888 <client_socket_thread1+0x70>)
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	2300      	movs	r3, #0
 8013856:	2204      	movs	r2, #4
 8013858:	f7f4 ff98 	bl	800878c <lwip_sendto>
		//}
			if(a==0)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d1e6      	bne.n	8013830 <client_socket_thread1+0x18>
			{

		 close(client_socket01.accept_sock);
 8013862:	4b09      	ldr	r3, [pc, #36]	; (8013888 <client_socket_thread1+0x70>)
 8013864:	695b      	ldr	r3, [r3, #20]
 8013866:	4618      	mov	r0, r3
 8013868:	f7f4 fca2 	bl	80081b0 <lwip_close>
		 memset(&client_socket01, 0 , sizeof(client_socket01));
 801386c:	2218      	movs	r2, #24
 801386e:	2100      	movs	r1, #0
 8013870:	4805      	ldr	r0, [pc, #20]	; (8013888 <client_socket_thread1+0x70>)
 8013872:	f000 fb03 	bl	8013e7c <memset>
		 osThreadTerminate(handle1);
 8013876:	4b06      	ldr	r3, [pc, #24]	; (8013890 <client_socket_thread1+0x78>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	4618      	mov	r0, r3
 801387c:	f7ef f85d 	bl	800293a <osThreadTerminate>
			osThreadYield();
 8013880:	f7ef f868 	bl	8002954 <osThreadYield>
		a=recv( client_socket01.accept_sock,data, sizeof(data), 0);
 8013884:	e7d4      	b.n	8013830 <client_socket_thread1+0x18>
 8013886:	bf00      	nop
 8013888:	200136c4 	.word	0x200136c4
 801388c:	2000c974 	.word	0x2000c974
 8013890:	200136c0 	.word	0x200136c0

08013894 <client_socket_thread2>:
			}
	}
}

static void client_socket_thread2(void const * argument) {
 8013894:	b580      	push	{r7, lr}
 8013896:	b086      	sub	sp, #24
 8013898:	af02      	add	r7, sp, #8
 801389a:	6078      	str	r0, [r7, #4]

static 	char data[566];


	char data1[4];
	data1[0]='f';
 801389c:	2366      	movs	r3, #102	; 0x66
 801389e:	723b      	strb	r3, [r7, #8]
	data1[1]='u';
 80138a0:	2375      	movs	r3, #117	; 0x75
 80138a2:	727b      	strb	r3, [r7, #9]
	data1[2]='c';
 80138a4:	2363      	movs	r3, #99	; 0x63
 80138a6:	72bb      	strb	r3, [r7, #10]
	data1[3]='k';
 80138a8:	236b      	movs	r3, #107	; 0x6b
 80138aa:	72fb      	strb	r3, [r7, #11]
//	remotehost = arg_client_socket->remotehost;
//	sockaddrsize  = arg_client_socket->sockaddrsize;
//	accept_sock = arg_client_socket->accept_sock;
	while (1)
	{
		a=recv( client_socket02.accept_sock,data, sizeof(data), 0);
 80138ac:	4b15      	ldr	r3, [pc, #84]	; (8013904 <client_socket_thread2+0x70>)
 80138ae:	6958      	ldr	r0, [r3, #20]
 80138b0:	2300      	movs	r3, #0
 80138b2:	f240 2236 	movw	r2, #566	; 0x236
 80138b6:	4914      	ldr	r1, [pc, #80]	; (8013908 <client_socket_thread2+0x74>)
 80138b8:	f7f4 feee 	bl	8008698 <lwip_recv>
 80138bc:	60f8      	str	r0, [r7, #12]
		//while( (recv( accept_sock,data, sizeof(data), 0))==ERR_OK)
		//{
			sendto(client_socket02.accept_sock,data1,sizeof(data1),0,(struct sockaddr *)&client_socket02.remotehost, client_socket02.sockaddrsize);
 80138be:	4b11      	ldr	r3, [pc, #68]	; (8013904 <client_socket_thread2+0x70>)
 80138c0:	6958      	ldr	r0, [r3, #20]
 80138c2:	4b10      	ldr	r3, [pc, #64]	; (8013904 <client_socket_thread2+0x70>)
 80138c4:	691b      	ldr	r3, [r3, #16]
 80138c6:	f107 0108 	add.w	r1, r7, #8
 80138ca:	9301      	str	r3, [sp, #4]
 80138cc:	4b0d      	ldr	r3, [pc, #52]	; (8013904 <client_socket_thread2+0x70>)
 80138ce:	9300      	str	r3, [sp, #0]
 80138d0:	2300      	movs	r3, #0
 80138d2:	2204      	movs	r2, #4
 80138d4:	f7f4 ff5a 	bl	800878c <lwip_sendto>
		//}
			if(a==0)
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1e6      	bne.n	80138ac <client_socket_thread2+0x18>
			{
		 close(client_socket02.accept_sock);
 80138de:	4b09      	ldr	r3, [pc, #36]	; (8013904 <client_socket_thread2+0x70>)
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f4 fc64 	bl	80081b0 <lwip_close>
			memset(&client_socket02, 0 , sizeof(client_socket02));
 80138e8:	2218      	movs	r2, #24
 80138ea:	2100      	movs	r1, #0
 80138ec:	4805      	ldr	r0, [pc, #20]	; (8013904 <client_socket_thread2+0x70>)
 80138ee:	f000 fac5 	bl	8013e7c <memset>

		 osThreadTerminate(handle2);
 80138f2:	4b06      	ldr	r3, [pc, #24]	; (801390c <client_socket_thread2+0x78>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ef f81f 	bl	800293a <osThreadTerminate>
			osThreadYield();
 80138fc:	f7ef f82a 	bl	8002954 <osThreadYield>
		a=recv( client_socket02.accept_sock,data, sizeof(data), 0);
 8013900:	e7d4      	b.n	80138ac <client_socket_thread2+0x18>
 8013902:	bf00      	nop
 8013904:	200136a0 	.word	0x200136a0
 8013908:	2000cbac 	.word	0x2000cbac
 801390c:	200136bc 	.word	0x200136bc

08013910 <StartDefaultTask>:
 defaultTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8013910:	b590      	push	{r4, r7, lr}
 8013912:	b091      	sub	sp, #68	; 0x44
 8013914:	af02      	add	r7, sp, #8
 8013916:	6078      	str	r0, [r7, #4]

	/* init code for LWIP */
	MX_LWIP_Init();
 8013918:	f7ff fd80 	bl	801341c <MX_LWIP_Init>

	/* USER CODE BEGIN 5 */
	int sock, accept_sock;
	 socklen_t sockaddrsize;
	  struct sockaddr_in address, remotehost;
	 if ((sock = socket(AF_INET,SOCK_STREAM, 0)) >= 0)
 801391c:	2200      	movs	r2, #0
 801391e:	2101      	movs	r1, #1
 8013920:	2002      	movs	r0, #2
 8013922:	f7f4 ffe7 	bl	80088f4 <lwip_socket>
 8013926:	6378      	str	r0, [r7, #52]	; 0x34
 8013928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801392a:	2b00      	cmp	r3, #0
 801392c:	f2c0 8082 	blt.w	8013a34 <StartDefaultTask+0x124>
	   {
	     address.sin_family = AF_INET;
 8013930:	2302      	movs	r3, #2
 8013932:	777b      	strb	r3, [r7, #29]
	     address.sin_addr.s_addr = INADDR_ANY;
 8013934:	2300      	movs	r3, #0
 8013936:	623b      	str	r3, [r7, #32]
	     address.sin_port = htons(80);
 8013938:	2050      	movs	r0, #80	; 0x50
 801393a:	f7f5 fab1 	bl	8008ea0 <lwip_htons>
 801393e:	4603      	mov	r3, r0
 8013940:	83fb      	strh	r3, [r7, #30]
	     if (bind(sock, (struct sockaddr *)&address, sizeof (address)) ==  0)
 8013942:	f107 031c 	add.w	r3, r7, #28
 8013946:	2210      	movs	r2, #16
 8013948:	4619      	mov	r1, r3
 801394a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801394c:	f7f4 fbb6 	bl	80080bc <lwip_bind>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d16b      	bne.n	8013a2e <StartDefaultTask+0x11e>
	     {
	     	listen(sock, 2);
 8013956:	2102      	movs	r1, #2
 8013958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801395a:	f7f4 fc83 	bl	8008264 <lwip_listen>
	       for(;;)
	       {



	         accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 801395e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013962:	f107 030c 	add.w	r3, r7, #12
 8013966:	4619      	mov	r1, r3
 8013968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801396a:	f7f4 fa55 	bl	8007e18 <lwip_accept>
 801396e:	6338      	str	r0, [r7, #48]	; 0x30

	/* Infinite loop */
	         if(accept_sock == 1 )
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	2b01      	cmp	r3, #1
 8013974:	d12b      	bne.n	80139ce <StartDefaultTask+0xbe>
	         {
	        	 client_socket01.accept_sock = accept_sock;
 8013976:	4a31      	ldr	r2, [pc, #196]	; (8013a3c <StartDefaultTask+0x12c>)
 8013978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397a:	6153      	str	r3, [r2, #20]
	        	 client_socket01.remotehost = remotehost;
 801397c:	4b2f      	ldr	r3, [pc, #188]	; (8013a3c <StartDefaultTask+0x12c>)
 801397e:	461c      	mov	r4, r3
 8013980:	f107 030c 	add.w	r3, r7, #12
 8013984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        	 client_socket01.sockaddrsize = sockaddrsize;
 801398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398c:	4a2b      	ldr	r2, [pc, #172]	; (8013a3c <StartDefaultTask+0x12c>)
 801398e:	6113      	str	r3, [r2, #16]
	        	 handle1 = sys_thread_new("client_socket_thread", (lwip_thread_fn)client_socket_thread1, (void*)&client_socket01, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8013990:	2300      	movs	r3, #0
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013998:	4a28      	ldr	r2, [pc, #160]	; (8013a3c <StartDefaultTask+0x12c>)
 801399a:	4929      	ldr	r1, [pc, #164]	; (8013a40 <StartDefaultTask+0x130>)
 801399c:	4829      	ldr	r0, [pc, #164]	; (8013a44 <StartDefaultTask+0x134>)
 801399e:	f7ff f993 	bl	8012cc8 <sys_thread_new>
 80139a2:	4602      	mov	r2, r0
 80139a4:	4b28      	ldr	r3, [pc, #160]	; (8013a48 <StartDefaultTask+0x138>)
 80139a6:	601a      	str	r2, [r3, #0]
	        	// if (client_socket02.accept_sock ==2 )
	        	if (client_socket02.accept_sock == 2)
 80139a8:	4b28      	ldr	r3, [pc, #160]	; (8013a4c <StartDefaultTask+0x13c>)
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	d10e      	bne.n	80139ce <StartDefaultTask+0xbe>
	        	 {
	        		 close(client_socket02.accept_sock);
 80139b0:	4b26      	ldr	r3, [pc, #152]	; (8013a4c <StartDefaultTask+0x13c>)
 80139b2:	695b      	ldr	r3, [r3, #20]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7f4 fbfb 	bl	80081b0 <lwip_close>
		        		memset(&client_socket02, 0 , sizeof(client_socket02));
 80139ba:	2218      	movs	r2, #24
 80139bc:	2100      	movs	r1, #0
 80139be:	4823      	ldr	r0, [pc, #140]	; (8013a4c <StartDefaultTask+0x13c>)
 80139c0:	f000 fa5c 	bl	8013e7c <memset>

	        		 osThreadTerminate(handle2);
 80139c4:	4b22      	ldr	r3, [pc, #136]	; (8013a50 <StartDefaultTask+0x140>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ee ffb6 	bl	800293a <osThreadTerminate>
	        	 }
	         }

	         if(accept_sock == 2 )
 80139ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d1c4      	bne.n	801395e <StartDefaultTask+0x4e>
	         {
	        	 client_socket02.accept_sock = accept_sock;
 80139d4:	4a1d      	ldr	r2, [pc, #116]	; (8013a4c <StartDefaultTask+0x13c>)
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	6153      	str	r3, [r2, #20]
	        	 client_socket02.remotehost = remotehost;
 80139da:	4b1c      	ldr	r3, [pc, #112]	; (8013a4c <StartDefaultTask+0x13c>)
 80139dc:	461c      	mov	r4, r3
 80139de:	f107 030c 	add.w	r3, r7, #12
 80139e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80139e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        	 client_socket02.sockaddrsize = sockaddrsize;
 80139e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ea:	4a18      	ldr	r2, [pc, #96]	; (8013a4c <StartDefaultTask+0x13c>)
 80139ec:	6113      	str	r3, [r2, #16]
	        	 handle2 = 	 sys_thread_new("client_socket_thread", (lwip_thread_fn)client_socket_thread2, (void*)&client_socket02, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 80139ee:	2300      	movs	r3, #0
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139f6:	4a15      	ldr	r2, [pc, #84]	; (8013a4c <StartDefaultTask+0x13c>)
 80139f8:	4916      	ldr	r1, [pc, #88]	; (8013a54 <StartDefaultTask+0x144>)
 80139fa:	4812      	ldr	r0, [pc, #72]	; (8013a44 <StartDefaultTask+0x134>)
 80139fc:	f7ff f964 	bl	8012cc8 <sys_thread_new>
 8013a00:	4602      	mov	r2, r0
 8013a02:	4b13      	ldr	r3, [pc, #76]	; (8013a50 <StartDefaultTask+0x140>)
 8013a04:	601a      	str	r2, [r3, #0]
	        	// if (client_socket01.accept_sock ==1 )
	        	 if (client_socket01.accept_sock == 1)
 8013a06:	4b0d      	ldr	r3, [pc, #52]	; (8013a3c <StartDefaultTask+0x12c>)
 8013a08:	695b      	ldr	r3, [r3, #20]
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d1a7      	bne.n	801395e <StartDefaultTask+0x4e>
	        	 {
	        		 close(client_socket01.accept_sock);
 8013a0e:	4b0b      	ldr	r3, [pc, #44]	; (8013a3c <StartDefaultTask+0x12c>)
 8013a10:	695b      	ldr	r3, [r3, #20]
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7f4 fbcc 	bl	80081b0 <lwip_close>
	     			memset(&client_socket01, 0 , sizeof(client_socket01));
 8013a18:	2218      	movs	r2, #24
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	4807      	ldr	r0, [pc, #28]	; (8013a3c <StartDefaultTask+0x12c>)
 8013a1e:	f000 fa2d 	bl	8013e7c <memset>

	        		 osThreadTerminate(handle1);
 8013a22:	4b09      	ldr	r3, [pc, #36]	; (8013a48 <StartDefaultTask+0x138>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ee ff87 	bl	800293a <osThreadTerminate>
	         accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 8013a2c:	e797      	b.n	801395e <StartDefaultTask+0x4e>
	         }
	       }
	            }
	            else
	            {
	              close(sock);
 8013a2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013a30:	f7f4 fbbe 	bl	80081b0 <lwip_close>
	              return;
	            }
	          }
	/* USER CODE END 5 */
}
 8013a34:	373c      	adds	r7, #60	; 0x3c
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd90      	pop	{r4, r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	200136c4 	.word	0x200136c4
 8013a40:	08013819 	.word	0x08013819
 8013a44:	08017620 	.word	0x08017620
 8013a48:	200136c0 	.word	0x200136c0
 8013a4c:	200136a0 	.word	0x200136a0
 8013a50:	200136bc 	.word	0x200136bc
 8013a54:	08013895 	.word	0x08013895

08013a58 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	4a04      	ldr	r2, [pc, #16]	; (8013a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013a66:	4293      	cmp	r3, r2
 8013a68:	d101      	bne.n	8013a6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8013a6a:	f7ec fda3 	bl	80005b4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8013a6e:	bf00      	nop
 8013a70:	3708      	adds	r7, #8
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	40010000 	.word	0x40010000

08013a7c <Error_Handler>:

/**
 * @brief This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8013a7c:	b480      	push	{r7}
 8013a7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8013a80:	bf00      	nop
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr
	...

08013a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013a92:	2300      	movs	r3, #0
 8013a94:	607b      	str	r3, [r7, #4]
 8013a96:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <HAL_MspInit+0x54>)
 8013a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a9a:	4a11      	ldr	r2, [pc, #68]	; (8013ae0 <HAL_MspInit+0x54>)
 8013a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8013aa2:	4b0f      	ldr	r3, [pc, #60]	; (8013ae0 <HAL_MspInit+0x54>)
 8013aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013aaa:	607b      	str	r3, [r7, #4]
 8013aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013aae:	2300      	movs	r3, #0
 8013ab0:	603b      	str	r3, [r7, #0]
 8013ab2:	4b0b      	ldr	r3, [pc, #44]	; (8013ae0 <HAL_MspInit+0x54>)
 8013ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab6:	4a0a      	ldr	r2, [pc, #40]	; (8013ae0 <HAL_MspInit+0x54>)
 8013ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013abc:	6413      	str	r3, [r2, #64]	; 0x40
 8013abe:	4b08      	ldr	r3, [pc, #32]	; (8013ae0 <HAL_MspInit+0x54>)
 8013ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ac6:	603b      	str	r3, [r7, #0]
 8013ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013aca:	2200      	movs	r2, #0
 8013acc:	210f      	movs	r1, #15
 8013ace:	f06f 0001 	mvn.w	r0, #1
 8013ad2:	f7ec fe69 	bl	80007a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013ad6:	bf00      	nop
 8013ad8:	3708      	adds	r7, #8
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	40023800 	.word	0x40023800

08013ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b08c      	sub	sp, #48	; 0x30
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013aec:	2300      	movs	r3, #0
 8013aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013af0:	2300      	movs	r3, #0
 8013af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8013af4:	2200      	movs	r2, #0
 8013af6:	6879      	ldr	r1, [r7, #4]
 8013af8:	2019      	movs	r0, #25
 8013afa:	f7ec fe55 	bl	80007a8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8013afe:	2019      	movs	r0, #25
 8013b00:	f7ec fe6e 	bl	80007e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013b04:	2300      	movs	r3, #0
 8013b06:	60fb      	str	r3, [r7, #12]
 8013b08:	4b1f      	ldr	r3, [pc, #124]	; (8013b88 <HAL_InitTick+0xa4>)
 8013b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b0c:	4a1e      	ldr	r2, [pc, #120]	; (8013b88 <HAL_InitTick+0xa4>)
 8013b0e:	f043 0301 	orr.w	r3, r3, #1
 8013b12:	6453      	str	r3, [r2, #68]	; 0x44
 8013b14:	4b1c      	ldr	r3, [pc, #112]	; (8013b88 <HAL_InitTick+0xa4>)
 8013b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b18:	f003 0301 	and.w	r3, r3, #1
 8013b1c:	60fb      	str	r3, [r7, #12]
 8013b1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013b20:	f107 0210 	add.w	r2, r7, #16
 8013b24:	f107 0314 	add.w	r3, r7, #20
 8013b28:	4611      	mov	r1, r2
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7ee fc08 	bl	8002340 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8013b30:	f7ee fbf2 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8013b34:	4603      	mov	r3, r0
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8013b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3c:	4a13      	ldr	r2, [pc, #76]	; (8013b8c <HAL_InitTick+0xa8>)
 8013b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013b42:	0c9b      	lsrs	r3, r3, #18
 8013b44:	3b01      	subs	r3, #1
 8013b46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8013b48:	4b11      	ldr	r3, [pc, #68]	; (8013b90 <HAL_InitTick+0xac>)
 8013b4a:	4a12      	ldr	r2, [pc, #72]	; (8013b94 <HAL_InitTick+0xb0>)
 8013b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8013b4e:	4b10      	ldr	r3, [pc, #64]	; (8013b90 <HAL_InitTick+0xac>)
 8013b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8013b56:	4a0e      	ldr	r2, [pc, #56]	; (8013b90 <HAL_InitTick+0xac>)
 8013b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8013b5c:	4b0c      	ldr	r3, [pc, #48]	; (8013b90 <HAL_InitTick+0xac>)
 8013b5e:	2200      	movs	r2, #0
 8013b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013b62:	4b0b      	ldr	r3, [pc, #44]	; (8013b90 <HAL_InitTick+0xac>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8013b68:	4809      	ldr	r0, [pc, #36]	; (8013b90 <HAL_InitTick+0xac>)
 8013b6a:	f7ee fc1b 	bl	80023a4 <HAL_TIM_Base_Init>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d104      	bne.n	8013b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8013b74:	4806      	ldr	r0, [pc, #24]	; (8013b90 <HAL_InitTick+0xac>)
 8013b76:	f7ee fc4a 	bl	800240e <HAL_TIM_Base_Start_IT>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	e000      	b.n	8013b80 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8013b7e:	2301      	movs	r3, #1
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3730      	adds	r7, #48	; 0x30
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	40023800 	.word	0x40023800
 8013b8c:	431bde83 	.word	0x431bde83
 8013b90:	200136dc 	.word	0x200136dc
 8013b94:	40010000 	.word	0x40010000

08013b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013b9c:	bf00      	nop
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr

08013ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013ba6:	b480      	push	{r7}
 8013ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013baa:	e7fe      	b.n	8013baa <HardFault_Handler+0x4>

08013bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013bac:	b480      	push	{r7}
 8013bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013bb0:	e7fe      	b.n	8013bb0 <MemManage_Handler+0x4>

08013bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013bb6:	e7fe      	b.n	8013bb6 <BusFault_Handler+0x4>

08013bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013bbc:	e7fe      	b.n	8013bbc <UsageFault_Handler+0x4>

08013bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013bbe:	b480      	push	{r7}
 8013bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013bc2:	bf00      	nop
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013bd0:	4802      	ldr	r0, [pc, #8]	; (8013bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8013bd2:	f7ee fc40 	bl	8002456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8013bd6:	bf00      	nop
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	200136dc 	.word	0x200136dc

08013be0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8013be4:	4802      	ldr	r0, [pc, #8]	; (8013bf0 <ETH_IRQHandler+0x10>)
 8013be6:	f7ed f9ef 	bl	8000fc8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8013bea:	bf00      	nop
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	20011e40 	.word	0x20011e40

08013bf4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8013bf8:	4802      	ldr	r0, [pc, #8]	; (8013c04 <ETH_WKUP_IRQHandler+0x10>)
 8013bfa:	f7ed f9e5 	bl	8000fc8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8013bfe:	bf00      	nop
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	20011e40 	.word	0x20011e40

08013c08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b086      	sub	sp, #24
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013c14:	2300      	movs	r3, #0
 8013c16:	617b      	str	r3, [r7, #20]
 8013c18:	e00a      	b.n	8013c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8013c1a:	f3af 8000 	nop.w
 8013c1e:	4601      	mov	r1, r0
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	1c5a      	adds	r2, r3, #1
 8013c24:	60ba      	str	r2, [r7, #8]
 8013c26:	b2ca      	uxtb	r2, r1
 8013c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013c2a:	697b      	ldr	r3, [r7, #20]
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
 8013c30:	697a      	ldr	r2, [r7, #20]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	dbf0      	blt.n	8013c1a <_read+0x12>
	}

return len;
 8013c38:	687b      	ldr	r3, [r7, #4]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b086      	sub	sp, #24
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	60f8      	str	r0, [r7, #12]
 8013c4a:	60b9      	str	r1, [r7, #8]
 8013c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013c4e:	2300      	movs	r3, #0
 8013c50:	617b      	str	r3, [r7, #20]
 8013c52:	e009      	b.n	8013c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	1c5a      	adds	r2, r3, #1
 8013c58:	60ba      	str	r2, [r7, #8]
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	3301      	adds	r3, #1
 8013c66:	617b      	str	r3, [r7, #20]
 8013c68:	697a      	ldr	r2, [r7, #20]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	dbf1      	blt.n	8013c54 <_write+0x12>
	}
	return len;
 8013c70:	687b      	ldr	r3, [r7, #4]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3718      	adds	r7, #24
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <_close>:

int _close(int file)
{
 8013c7a:	b480      	push	{r7}
 8013c7c:	b083      	sub	sp, #12
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
	return -1;
 8013c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	370c      	adds	r7, #12
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr

08013c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013c92:	b480      	push	{r7}
 8013c94:	b083      	sub	sp, #12
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
 8013c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <_isatty>:

int _isatty(int file)
{
 8013cb2:	b480      	push	{r7}
 8013cb4:	b083      	sub	sp, #12
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8013cba:	2301      	movs	r3, #1
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b085      	sub	sp, #20
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3714      	adds	r7, #20
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
	...

08013ce4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8013cec:	4b11      	ldr	r3, [pc, #68]	; (8013d34 <_sbrk+0x50>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <_sbrk+0x16>
		heap_end = &end;
 8013cf4:	4b0f      	ldr	r3, [pc, #60]	; (8013d34 <_sbrk+0x50>)
 8013cf6:	4a10      	ldr	r2, [pc, #64]	; (8013d38 <_sbrk+0x54>)
 8013cf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8013cfa:	4b0e      	ldr	r3, [pc, #56]	; (8013d34 <_sbrk+0x50>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8013d00:	4b0c      	ldr	r3, [pc, #48]	; (8013d34 <_sbrk+0x50>)
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	4413      	add	r3, r2
 8013d08:	466a      	mov	r2, sp
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d905      	bls.n	8013d1a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8013d0e:	4b0b      	ldr	r3, [pc, #44]	; (8013d3c <_sbrk+0x58>)
 8013d10:	220c      	movs	r2, #12
 8013d12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8013d14:	f04f 33ff 	mov.w	r3, #4294967295
 8013d18:	e006      	b.n	8013d28 <_sbrk+0x44>
	}

	heap_end += incr;
 8013d1a:	4b06      	ldr	r3, [pc, #24]	; (8013d34 <_sbrk+0x50>)
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4413      	add	r3, r2
 8013d22:	4a04      	ldr	r2, [pc, #16]	; (8013d34 <_sbrk+0x50>)
 8013d24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8013d26:	68fb      	ldr	r3, [r7, #12]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3714      	adds	r7, #20
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr
 8013d34:	2000cde4 	.word	0x2000cde4
 8013d38:	20013720 	.word	0x20013720
 8013d3c:	20010568 	.word	0x20010568

08013d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013d40:	b480      	push	{r7}
 8013d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013d44:	4b16      	ldr	r3, [pc, #88]	; (8013da0 <SystemInit+0x60>)
 8013d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d4a:	4a15      	ldr	r2, [pc, #84]	; (8013da0 <SystemInit+0x60>)
 8013d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013d54:	4b13      	ldr	r3, [pc, #76]	; (8013da4 <SystemInit+0x64>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4a12      	ldr	r2, [pc, #72]	; (8013da4 <SystemInit+0x64>)
 8013d5a:	f043 0301 	orr.w	r3, r3, #1
 8013d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013d60:	4b10      	ldr	r3, [pc, #64]	; (8013da4 <SystemInit+0x64>)
 8013d62:	2200      	movs	r2, #0
 8013d64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013d66:	4b0f      	ldr	r3, [pc, #60]	; (8013da4 <SystemInit+0x64>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	4a0e      	ldr	r2, [pc, #56]	; (8013da4 <SystemInit+0x64>)
 8013d6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8013d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013d76:	4b0b      	ldr	r3, [pc, #44]	; (8013da4 <SystemInit+0x64>)
 8013d78:	4a0b      	ldr	r2, [pc, #44]	; (8013da8 <SystemInit+0x68>)
 8013d7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013d7c:	4b09      	ldr	r3, [pc, #36]	; (8013da4 <SystemInit+0x64>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a08      	ldr	r2, [pc, #32]	; (8013da4 <SystemInit+0x64>)
 8013d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013d86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013d88:	4b06      	ldr	r3, [pc, #24]	; (8013da4 <SystemInit+0x64>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013d8e:	4b04      	ldr	r3, [pc, #16]	; (8013da0 <SystemInit+0x60>)
 8013d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013d94:	609a      	str	r2, [r3, #8]
#endif
}
 8013d96:	bf00      	nop
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr
 8013da0:	e000ed00 	.word	0xe000ed00
 8013da4:	40023800 	.word	0x40023800
 8013da8:	24003010 	.word	0x24003010

08013dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013de4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013db2:	e003      	b.n	8013dbc <LoopCopyDataInit>

08013db4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013db4:	4b0c      	ldr	r3, [pc, #48]	; (8013de8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013dba:	3104      	adds	r1, #4

08013dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013dbc:	480b      	ldr	r0, [pc, #44]	; (8013dec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013dbe:	4b0c      	ldr	r3, [pc, #48]	; (8013df0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013dc4:	d3f6      	bcc.n	8013db4 <CopyDataInit>
  ldr  r2, =_sbss
 8013dc6:	4a0b      	ldr	r2, [pc, #44]	; (8013df4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013dc8:	e002      	b.n	8013dd0 <LoopFillZerobss>

08013dca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013dcc:	f842 3b04 	str.w	r3, [r2], #4

08013dd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013dd0:	4b09      	ldr	r3, [pc, #36]	; (8013df8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013dd4:	d3f9      	bcc.n	8013dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013dd6:	f7ff ffb3 	bl	8013d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013dda:	f000 f811 	bl	8013e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013dde:	f7ff fc4b 	bl	8013678 <main>
  bx  lr    
 8013de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013de4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8013de8:	08017868 	.word	0x08017868
  ldr  r0, =_sdata
 8013dec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013df0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8013df4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8013df8:	2001371c 	.word	0x2001371c

08013dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013dfc:	e7fe      	b.n	8013dfc <ADC_IRQHandler>
	...

08013e00 <__libc_init_array>:
 8013e00:	b570      	push	{r4, r5, r6, lr}
 8013e02:	4e0d      	ldr	r6, [pc, #52]	; (8013e38 <__libc_init_array+0x38>)
 8013e04:	4c0d      	ldr	r4, [pc, #52]	; (8013e3c <__libc_init_array+0x3c>)
 8013e06:	1ba4      	subs	r4, r4, r6
 8013e08:	10a4      	asrs	r4, r4, #2
 8013e0a:	2500      	movs	r5, #0
 8013e0c:	42a5      	cmp	r5, r4
 8013e0e:	d109      	bne.n	8013e24 <__libc_init_array+0x24>
 8013e10:	4e0b      	ldr	r6, [pc, #44]	; (8013e40 <__libc_init_array+0x40>)
 8013e12:	4c0c      	ldr	r4, [pc, #48]	; (8013e44 <__libc_init_array+0x44>)
 8013e14:	f000 ff1e 	bl	8014c54 <_init>
 8013e18:	1ba4      	subs	r4, r4, r6
 8013e1a:	10a4      	asrs	r4, r4, #2
 8013e1c:	2500      	movs	r5, #0
 8013e1e:	42a5      	cmp	r5, r4
 8013e20:	d105      	bne.n	8013e2e <__libc_init_array+0x2e>
 8013e22:	bd70      	pop	{r4, r5, r6, pc}
 8013e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e28:	4798      	blx	r3
 8013e2a:	3501      	adds	r5, #1
 8013e2c:	e7ee      	b.n	8013e0c <__libc_init_array+0xc>
 8013e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e32:	4798      	blx	r3
 8013e34:	3501      	adds	r5, #1
 8013e36:	e7f2      	b.n	8013e1e <__libc_init_array+0x1e>
 8013e38:	08017860 	.word	0x08017860
 8013e3c:	08017860 	.word	0x08017860
 8013e40:	08017860 	.word	0x08017860
 8013e44:	08017864 	.word	0x08017864

08013e48 <memcmp>:
 8013e48:	b530      	push	{r4, r5, lr}
 8013e4a:	2400      	movs	r4, #0
 8013e4c:	42a2      	cmp	r2, r4
 8013e4e:	d101      	bne.n	8013e54 <memcmp+0xc>
 8013e50:	2000      	movs	r0, #0
 8013e52:	e007      	b.n	8013e64 <memcmp+0x1c>
 8013e54:	5d03      	ldrb	r3, [r0, r4]
 8013e56:	3401      	adds	r4, #1
 8013e58:	190d      	adds	r5, r1, r4
 8013e5a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013e5e:	42ab      	cmp	r3, r5
 8013e60:	d0f4      	beq.n	8013e4c <memcmp+0x4>
 8013e62:	1b58      	subs	r0, r3, r5
 8013e64:	bd30      	pop	{r4, r5, pc}

08013e66 <memcpy>:
 8013e66:	b510      	push	{r4, lr}
 8013e68:	1e43      	subs	r3, r0, #1
 8013e6a:	440a      	add	r2, r1
 8013e6c:	4291      	cmp	r1, r2
 8013e6e:	d100      	bne.n	8013e72 <memcpy+0xc>
 8013e70:	bd10      	pop	{r4, pc}
 8013e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e7a:	e7f7      	b.n	8013e6c <memcpy+0x6>

08013e7c <memset>:
 8013e7c:	4402      	add	r2, r0
 8013e7e:	4603      	mov	r3, r0
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d100      	bne.n	8013e86 <memset+0xa>
 8013e84:	4770      	bx	lr
 8013e86:	f803 1b01 	strb.w	r1, [r3], #1
 8013e8a:	e7f9      	b.n	8013e80 <memset+0x4>

08013e8c <iprintf>:
 8013e8c:	b40f      	push	{r0, r1, r2, r3}
 8013e8e:	4b0a      	ldr	r3, [pc, #40]	; (8013eb8 <iprintf+0x2c>)
 8013e90:	b513      	push	{r0, r1, r4, lr}
 8013e92:	681c      	ldr	r4, [r3, #0]
 8013e94:	b124      	cbz	r4, 8013ea0 <iprintf+0x14>
 8013e96:	69a3      	ldr	r3, [r4, #24]
 8013e98:	b913      	cbnz	r3, 8013ea0 <iprintf+0x14>
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	f000 f84e 	bl	8013f3c <__sinit>
 8013ea0:	ab05      	add	r3, sp, #20
 8013ea2:	9a04      	ldr	r2, [sp, #16]
 8013ea4:	68a1      	ldr	r1, [r4, #8]
 8013ea6:	9301      	str	r3, [sp, #4]
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f000 f955 	bl	8014158 <_vfiprintf_r>
 8013eae:	b002      	add	sp, #8
 8013eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eb4:	b004      	add	sp, #16
 8013eb6:	4770      	bx	lr
 8013eb8:	20000018 	.word	0x20000018

08013ebc <std>:
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	b510      	push	{r4, lr}
 8013ec0:	4604      	mov	r4, r0
 8013ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8013ec6:	6083      	str	r3, [r0, #8]
 8013ec8:	8181      	strh	r1, [r0, #12]
 8013eca:	6643      	str	r3, [r0, #100]	; 0x64
 8013ecc:	81c2      	strh	r2, [r0, #14]
 8013ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ed2:	6183      	str	r3, [r0, #24]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	2208      	movs	r2, #8
 8013ed8:	305c      	adds	r0, #92	; 0x5c
 8013eda:	f7ff ffcf 	bl	8013e7c <memset>
 8013ede:	4b05      	ldr	r3, [pc, #20]	; (8013ef4 <std+0x38>)
 8013ee0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ee2:	4b05      	ldr	r3, [pc, #20]	; (8013ef8 <std+0x3c>)
 8013ee4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ee6:	4b05      	ldr	r3, [pc, #20]	; (8013efc <std+0x40>)
 8013ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013eea:	4b05      	ldr	r3, [pc, #20]	; (8013f00 <std+0x44>)
 8013eec:	6224      	str	r4, [r4, #32]
 8013eee:	6323      	str	r3, [r4, #48]	; 0x30
 8013ef0:	bd10      	pop	{r4, pc}
 8013ef2:	bf00      	nop
 8013ef4:	080146b5 	.word	0x080146b5
 8013ef8:	080146d7 	.word	0x080146d7
 8013efc:	0801470f 	.word	0x0801470f
 8013f00:	08014733 	.word	0x08014733

08013f04 <_cleanup_r>:
 8013f04:	4901      	ldr	r1, [pc, #4]	; (8013f0c <_cleanup_r+0x8>)
 8013f06:	f000 b885 	b.w	8014014 <_fwalk_reent>
 8013f0a:	bf00      	nop
 8013f0c:	08014a0d 	.word	0x08014a0d

08013f10 <__sfmoreglue>:
 8013f10:	b570      	push	{r4, r5, r6, lr}
 8013f12:	1e4a      	subs	r2, r1, #1
 8013f14:	2568      	movs	r5, #104	; 0x68
 8013f16:	4355      	muls	r5, r2
 8013f18:	460e      	mov	r6, r1
 8013f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f1e:	f000 f897 	bl	8014050 <_malloc_r>
 8013f22:	4604      	mov	r4, r0
 8013f24:	b140      	cbz	r0, 8013f38 <__sfmoreglue+0x28>
 8013f26:	2100      	movs	r1, #0
 8013f28:	e9c0 1600 	strd	r1, r6, [r0]
 8013f2c:	300c      	adds	r0, #12
 8013f2e:	60a0      	str	r0, [r4, #8]
 8013f30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013f34:	f7ff ffa2 	bl	8013e7c <memset>
 8013f38:	4620      	mov	r0, r4
 8013f3a:	bd70      	pop	{r4, r5, r6, pc}

08013f3c <__sinit>:
 8013f3c:	6983      	ldr	r3, [r0, #24]
 8013f3e:	b510      	push	{r4, lr}
 8013f40:	4604      	mov	r4, r0
 8013f42:	bb33      	cbnz	r3, 8013f92 <__sinit+0x56>
 8013f44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013f48:	6503      	str	r3, [r0, #80]	; 0x50
 8013f4a:	4b12      	ldr	r3, [pc, #72]	; (8013f94 <__sinit+0x58>)
 8013f4c:	4a12      	ldr	r2, [pc, #72]	; (8013f98 <__sinit+0x5c>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	6282      	str	r2, [r0, #40]	; 0x28
 8013f52:	4298      	cmp	r0, r3
 8013f54:	bf04      	itt	eq
 8013f56:	2301      	moveq	r3, #1
 8013f58:	6183      	streq	r3, [r0, #24]
 8013f5a:	f000 f81f 	bl	8013f9c <__sfp>
 8013f5e:	6060      	str	r0, [r4, #4]
 8013f60:	4620      	mov	r0, r4
 8013f62:	f000 f81b 	bl	8013f9c <__sfp>
 8013f66:	60a0      	str	r0, [r4, #8]
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f000 f817 	bl	8013f9c <__sfp>
 8013f6e:	2200      	movs	r2, #0
 8013f70:	60e0      	str	r0, [r4, #12]
 8013f72:	2104      	movs	r1, #4
 8013f74:	6860      	ldr	r0, [r4, #4]
 8013f76:	f7ff ffa1 	bl	8013ebc <std>
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	2109      	movs	r1, #9
 8013f7e:	68a0      	ldr	r0, [r4, #8]
 8013f80:	f7ff ff9c 	bl	8013ebc <std>
 8013f84:	2202      	movs	r2, #2
 8013f86:	2112      	movs	r1, #18
 8013f88:	68e0      	ldr	r0, [r4, #12]
 8013f8a:	f7ff ff97 	bl	8013ebc <std>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	61a3      	str	r3, [r4, #24]
 8013f92:	bd10      	pop	{r4, pc}
 8013f94:	080177c0 	.word	0x080177c0
 8013f98:	08013f05 	.word	0x08013f05

08013f9c <__sfp>:
 8013f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9e:	4b1b      	ldr	r3, [pc, #108]	; (801400c <__sfp+0x70>)
 8013fa0:	681e      	ldr	r6, [r3, #0]
 8013fa2:	69b3      	ldr	r3, [r6, #24]
 8013fa4:	4607      	mov	r7, r0
 8013fa6:	b913      	cbnz	r3, 8013fae <__sfp+0x12>
 8013fa8:	4630      	mov	r0, r6
 8013faa:	f7ff ffc7 	bl	8013f3c <__sinit>
 8013fae:	3648      	adds	r6, #72	; 0x48
 8013fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	d503      	bpl.n	8013fc0 <__sfp+0x24>
 8013fb8:	6833      	ldr	r3, [r6, #0]
 8013fba:	b133      	cbz	r3, 8013fca <__sfp+0x2e>
 8013fbc:	6836      	ldr	r6, [r6, #0]
 8013fbe:	e7f7      	b.n	8013fb0 <__sfp+0x14>
 8013fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013fc4:	b16d      	cbz	r5, 8013fe2 <__sfp+0x46>
 8013fc6:	3468      	adds	r4, #104	; 0x68
 8013fc8:	e7f4      	b.n	8013fb4 <__sfp+0x18>
 8013fca:	2104      	movs	r1, #4
 8013fcc:	4638      	mov	r0, r7
 8013fce:	f7ff ff9f 	bl	8013f10 <__sfmoreglue>
 8013fd2:	6030      	str	r0, [r6, #0]
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d1f1      	bne.n	8013fbc <__sfp+0x20>
 8013fd8:	230c      	movs	r3, #12
 8013fda:	603b      	str	r3, [r7, #0]
 8013fdc:	4604      	mov	r4, r0
 8013fde:	4620      	mov	r0, r4
 8013fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe2:	4b0b      	ldr	r3, [pc, #44]	; (8014010 <__sfp+0x74>)
 8013fe4:	6665      	str	r5, [r4, #100]	; 0x64
 8013fe6:	e9c4 5500 	strd	r5, r5, [r4]
 8013fea:	60a5      	str	r5, [r4, #8]
 8013fec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013ff0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013ff4:	2208      	movs	r2, #8
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ffc:	f7ff ff3e 	bl	8013e7c <memset>
 8014000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014008:	e7e9      	b.n	8013fde <__sfp+0x42>
 801400a:	bf00      	nop
 801400c:	080177c0 	.word	0x080177c0
 8014010:	ffff0001 	.word	0xffff0001

08014014 <_fwalk_reent>:
 8014014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014018:	4680      	mov	r8, r0
 801401a:	4689      	mov	r9, r1
 801401c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014020:	2600      	movs	r6, #0
 8014022:	b914      	cbnz	r4, 801402a <_fwalk_reent+0x16>
 8014024:	4630      	mov	r0, r6
 8014026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801402a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801402e:	3f01      	subs	r7, #1
 8014030:	d501      	bpl.n	8014036 <_fwalk_reent+0x22>
 8014032:	6824      	ldr	r4, [r4, #0]
 8014034:	e7f5      	b.n	8014022 <_fwalk_reent+0xe>
 8014036:	89ab      	ldrh	r3, [r5, #12]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d907      	bls.n	801404c <_fwalk_reent+0x38>
 801403c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014040:	3301      	adds	r3, #1
 8014042:	d003      	beq.n	801404c <_fwalk_reent+0x38>
 8014044:	4629      	mov	r1, r5
 8014046:	4640      	mov	r0, r8
 8014048:	47c8      	blx	r9
 801404a:	4306      	orrs	r6, r0
 801404c:	3568      	adds	r5, #104	; 0x68
 801404e:	e7ee      	b.n	801402e <_fwalk_reent+0x1a>

08014050 <_malloc_r>:
 8014050:	b570      	push	{r4, r5, r6, lr}
 8014052:	1ccd      	adds	r5, r1, #3
 8014054:	f025 0503 	bic.w	r5, r5, #3
 8014058:	3508      	adds	r5, #8
 801405a:	2d0c      	cmp	r5, #12
 801405c:	bf38      	it	cc
 801405e:	250c      	movcc	r5, #12
 8014060:	2d00      	cmp	r5, #0
 8014062:	4606      	mov	r6, r0
 8014064:	db01      	blt.n	801406a <_malloc_r+0x1a>
 8014066:	42a9      	cmp	r1, r5
 8014068:	d903      	bls.n	8014072 <_malloc_r+0x22>
 801406a:	230c      	movs	r3, #12
 801406c:	6033      	str	r3, [r6, #0]
 801406e:	2000      	movs	r0, #0
 8014070:	bd70      	pop	{r4, r5, r6, pc}
 8014072:	f000 fd6b 	bl	8014b4c <__malloc_lock>
 8014076:	4a21      	ldr	r2, [pc, #132]	; (80140fc <_malloc_r+0xac>)
 8014078:	6814      	ldr	r4, [r2, #0]
 801407a:	4621      	mov	r1, r4
 801407c:	b991      	cbnz	r1, 80140a4 <_malloc_r+0x54>
 801407e:	4c20      	ldr	r4, [pc, #128]	; (8014100 <_malloc_r+0xb0>)
 8014080:	6823      	ldr	r3, [r4, #0]
 8014082:	b91b      	cbnz	r3, 801408c <_malloc_r+0x3c>
 8014084:	4630      	mov	r0, r6
 8014086:	f000 fb05 	bl	8014694 <_sbrk_r>
 801408a:	6020      	str	r0, [r4, #0]
 801408c:	4629      	mov	r1, r5
 801408e:	4630      	mov	r0, r6
 8014090:	f000 fb00 	bl	8014694 <_sbrk_r>
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d124      	bne.n	80140e2 <_malloc_r+0x92>
 8014098:	230c      	movs	r3, #12
 801409a:	6033      	str	r3, [r6, #0]
 801409c:	4630      	mov	r0, r6
 801409e:	f000 fd56 	bl	8014b4e <__malloc_unlock>
 80140a2:	e7e4      	b.n	801406e <_malloc_r+0x1e>
 80140a4:	680b      	ldr	r3, [r1, #0]
 80140a6:	1b5b      	subs	r3, r3, r5
 80140a8:	d418      	bmi.n	80140dc <_malloc_r+0x8c>
 80140aa:	2b0b      	cmp	r3, #11
 80140ac:	d90f      	bls.n	80140ce <_malloc_r+0x7e>
 80140ae:	600b      	str	r3, [r1, #0]
 80140b0:	50cd      	str	r5, [r1, r3]
 80140b2:	18cc      	adds	r4, r1, r3
 80140b4:	4630      	mov	r0, r6
 80140b6:	f000 fd4a 	bl	8014b4e <__malloc_unlock>
 80140ba:	f104 000b 	add.w	r0, r4, #11
 80140be:	1d23      	adds	r3, r4, #4
 80140c0:	f020 0007 	bic.w	r0, r0, #7
 80140c4:	1ac3      	subs	r3, r0, r3
 80140c6:	d0d3      	beq.n	8014070 <_malloc_r+0x20>
 80140c8:	425a      	negs	r2, r3
 80140ca:	50e2      	str	r2, [r4, r3]
 80140cc:	e7d0      	b.n	8014070 <_malloc_r+0x20>
 80140ce:	428c      	cmp	r4, r1
 80140d0:	684b      	ldr	r3, [r1, #4]
 80140d2:	bf16      	itet	ne
 80140d4:	6063      	strne	r3, [r4, #4]
 80140d6:	6013      	streq	r3, [r2, #0]
 80140d8:	460c      	movne	r4, r1
 80140da:	e7eb      	b.n	80140b4 <_malloc_r+0x64>
 80140dc:	460c      	mov	r4, r1
 80140de:	6849      	ldr	r1, [r1, #4]
 80140e0:	e7cc      	b.n	801407c <_malloc_r+0x2c>
 80140e2:	1cc4      	adds	r4, r0, #3
 80140e4:	f024 0403 	bic.w	r4, r4, #3
 80140e8:	42a0      	cmp	r0, r4
 80140ea:	d005      	beq.n	80140f8 <_malloc_r+0xa8>
 80140ec:	1a21      	subs	r1, r4, r0
 80140ee:	4630      	mov	r0, r6
 80140f0:	f000 fad0 	bl	8014694 <_sbrk_r>
 80140f4:	3001      	adds	r0, #1
 80140f6:	d0cf      	beq.n	8014098 <_malloc_r+0x48>
 80140f8:	6025      	str	r5, [r4, #0]
 80140fa:	e7db      	b.n	80140b4 <_malloc_r+0x64>
 80140fc:	2000cde8 	.word	0x2000cde8
 8014100:	2000cdec 	.word	0x2000cdec

08014104 <__sfputc_r>:
 8014104:	6893      	ldr	r3, [r2, #8]
 8014106:	3b01      	subs	r3, #1
 8014108:	2b00      	cmp	r3, #0
 801410a:	b410      	push	{r4}
 801410c:	6093      	str	r3, [r2, #8]
 801410e:	da08      	bge.n	8014122 <__sfputc_r+0x1e>
 8014110:	6994      	ldr	r4, [r2, #24]
 8014112:	42a3      	cmp	r3, r4
 8014114:	db01      	blt.n	801411a <__sfputc_r+0x16>
 8014116:	290a      	cmp	r1, #10
 8014118:	d103      	bne.n	8014122 <__sfputc_r+0x1e>
 801411a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801411e:	f000 bb0d 	b.w	801473c <__swbuf_r>
 8014122:	6813      	ldr	r3, [r2, #0]
 8014124:	1c58      	adds	r0, r3, #1
 8014126:	6010      	str	r0, [r2, #0]
 8014128:	7019      	strb	r1, [r3, #0]
 801412a:	4608      	mov	r0, r1
 801412c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014130:	4770      	bx	lr

08014132 <__sfputs_r>:
 8014132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014134:	4606      	mov	r6, r0
 8014136:	460f      	mov	r7, r1
 8014138:	4614      	mov	r4, r2
 801413a:	18d5      	adds	r5, r2, r3
 801413c:	42ac      	cmp	r4, r5
 801413e:	d101      	bne.n	8014144 <__sfputs_r+0x12>
 8014140:	2000      	movs	r0, #0
 8014142:	e007      	b.n	8014154 <__sfputs_r+0x22>
 8014144:	463a      	mov	r2, r7
 8014146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801414a:	4630      	mov	r0, r6
 801414c:	f7ff ffda 	bl	8014104 <__sfputc_r>
 8014150:	1c43      	adds	r3, r0, #1
 8014152:	d1f3      	bne.n	801413c <__sfputs_r+0xa>
 8014154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014158 <_vfiprintf_r>:
 8014158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	460c      	mov	r4, r1
 801415e:	b09d      	sub	sp, #116	; 0x74
 8014160:	4617      	mov	r7, r2
 8014162:	461d      	mov	r5, r3
 8014164:	4606      	mov	r6, r0
 8014166:	b118      	cbz	r0, 8014170 <_vfiprintf_r+0x18>
 8014168:	6983      	ldr	r3, [r0, #24]
 801416a:	b90b      	cbnz	r3, 8014170 <_vfiprintf_r+0x18>
 801416c:	f7ff fee6 	bl	8013f3c <__sinit>
 8014170:	4b7c      	ldr	r3, [pc, #496]	; (8014364 <_vfiprintf_r+0x20c>)
 8014172:	429c      	cmp	r4, r3
 8014174:	d158      	bne.n	8014228 <_vfiprintf_r+0xd0>
 8014176:	6874      	ldr	r4, [r6, #4]
 8014178:	89a3      	ldrh	r3, [r4, #12]
 801417a:	0718      	lsls	r0, r3, #28
 801417c:	d55e      	bpl.n	801423c <_vfiprintf_r+0xe4>
 801417e:	6923      	ldr	r3, [r4, #16]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d05b      	beq.n	801423c <_vfiprintf_r+0xe4>
 8014184:	2300      	movs	r3, #0
 8014186:	9309      	str	r3, [sp, #36]	; 0x24
 8014188:	2320      	movs	r3, #32
 801418a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801418e:	2330      	movs	r3, #48	; 0x30
 8014190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014194:	9503      	str	r5, [sp, #12]
 8014196:	f04f 0b01 	mov.w	fp, #1
 801419a:	46b8      	mov	r8, r7
 801419c:	4645      	mov	r5, r8
 801419e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80141a2:	b10b      	cbz	r3, 80141a8 <_vfiprintf_r+0x50>
 80141a4:	2b25      	cmp	r3, #37	; 0x25
 80141a6:	d154      	bne.n	8014252 <_vfiprintf_r+0xfa>
 80141a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80141ac:	d00b      	beq.n	80141c6 <_vfiprintf_r+0x6e>
 80141ae:	4653      	mov	r3, sl
 80141b0:	463a      	mov	r2, r7
 80141b2:	4621      	mov	r1, r4
 80141b4:	4630      	mov	r0, r6
 80141b6:	f7ff ffbc 	bl	8014132 <__sfputs_r>
 80141ba:	3001      	adds	r0, #1
 80141bc:	f000 80c2 	beq.w	8014344 <_vfiprintf_r+0x1ec>
 80141c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c2:	4453      	add	r3, sl
 80141c4:	9309      	str	r3, [sp, #36]	; 0x24
 80141c6:	f898 3000 	ldrb.w	r3, [r8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f000 80ba 	beq.w	8014344 <_vfiprintf_r+0x1ec>
 80141d0:	2300      	movs	r3, #0
 80141d2:	f04f 32ff 	mov.w	r2, #4294967295
 80141d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141da:	9304      	str	r3, [sp, #16]
 80141dc:	9307      	str	r3, [sp, #28]
 80141de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141e2:	931a      	str	r3, [sp, #104]	; 0x68
 80141e4:	46a8      	mov	r8, r5
 80141e6:	2205      	movs	r2, #5
 80141e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80141ec:	485e      	ldr	r0, [pc, #376]	; (8014368 <_vfiprintf_r+0x210>)
 80141ee:	f7eb ffef 	bl	80001d0 <memchr>
 80141f2:	9b04      	ldr	r3, [sp, #16]
 80141f4:	bb78      	cbnz	r0, 8014256 <_vfiprintf_r+0xfe>
 80141f6:	06d9      	lsls	r1, r3, #27
 80141f8:	bf44      	itt	mi
 80141fa:	2220      	movmi	r2, #32
 80141fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014200:	071a      	lsls	r2, r3, #28
 8014202:	bf44      	itt	mi
 8014204:	222b      	movmi	r2, #43	; 0x2b
 8014206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801420a:	782a      	ldrb	r2, [r5, #0]
 801420c:	2a2a      	cmp	r2, #42	; 0x2a
 801420e:	d02a      	beq.n	8014266 <_vfiprintf_r+0x10e>
 8014210:	9a07      	ldr	r2, [sp, #28]
 8014212:	46a8      	mov	r8, r5
 8014214:	2000      	movs	r0, #0
 8014216:	250a      	movs	r5, #10
 8014218:	4641      	mov	r1, r8
 801421a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801421e:	3b30      	subs	r3, #48	; 0x30
 8014220:	2b09      	cmp	r3, #9
 8014222:	d969      	bls.n	80142f8 <_vfiprintf_r+0x1a0>
 8014224:	b360      	cbz	r0, 8014280 <_vfiprintf_r+0x128>
 8014226:	e024      	b.n	8014272 <_vfiprintf_r+0x11a>
 8014228:	4b50      	ldr	r3, [pc, #320]	; (801436c <_vfiprintf_r+0x214>)
 801422a:	429c      	cmp	r4, r3
 801422c:	d101      	bne.n	8014232 <_vfiprintf_r+0xda>
 801422e:	68b4      	ldr	r4, [r6, #8]
 8014230:	e7a2      	b.n	8014178 <_vfiprintf_r+0x20>
 8014232:	4b4f      	ldr	r3, [pc, #316]	; (8014370 <_vfiprintf_r+0x218>)
 8014234:	429c      	cmp	r4, r3
 8014236:	bf08      	it	eq
 8014238:	68f4      	ldreq	r4, [r6, #12]
 801423a:	e79d      	b.n	8014178 <_vfiprintf_r+0x20>
 801423c:	4621      	mov	r1, r4
 801423e:	4630      	mov	r0, r6
 8014240:	f000 fae0 	bl	8014804 <__swsetup_r>
 8014244:	2800      	cmp	r0, #0
 8014246:	d09d      	beq.n	8014184 <_vfiprintf_r+0x2c>
 8014248:	f04f 30ff 	mov.w	r0, #4294967295
 801424c:	b01d      	add	sp, #116	; 0x74
 801424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014252:	46a8      	mov	r8, r5
 8014254:	e7a2      	b.n	801419c <_vfiprintf_r+0x44>
 8014256:	4a44      	ldr	r2, [pc, #272]	; (8014368 <_vfiprintf_r+0x210>)
 8014258:	1a80      	subs	r0, r0, r2
 801425a:	fa0b f000 	lsl.w	r0, fp, r0
 801425e:	4318      	orrs	r0, r3
 8014260:	9004      	str	r0, [sp, #16]
 8014262:	4645      	mov	r5, r8
 8014264:	e7be      	b.n	80141e4 <_vfiprintf_r+0x8c>
 8014266:	9a03      	ldr	r2, [sp, #12]
 8014268:	1d11      	adds	r1, r2, #4
 801426a:	6812      	ldr	r2, [r2, #0]
 801426c:	9103      	str	r1, [sp, #12]
 801426e:	2a00      	cmp	r2, #0
 8014270:	db01      	blt.n	8014276 <_vfiprintf_r+0x11e>
 8014272:	9207      	str	r2, [sp, #28]
 8014274:	e004      	b.n	8014280 <_vfiprintf_r+0x128>
 8014276:	4252      	negs	r2, r2
 8014278:	f043 0302 	orr.w	r3, r3, #2
 801427c:	9207      	str	r2, [sp, #28]
 801427e:	9304      	str	r3, [sp, #16]
 8014280:	f898 3000 	ldrb.w	r3, [r8]
 8014284:	2b2e      	cmp	r3, #46	; 0x2e
 8014286:	d10e      	bne.n	80142a6 <_vfiprintf_r+0x14e>
 8014288:	f898 3001 	ldrb.w	r3, [r8, #1]
 801428c:	2b2a      	cmp	r3, #42	; 0x2a
 801428e:	d138      	bne.n	8014302 <_vfiprintf_r+0x1aa>
 8014290:	9b03      	ldr	r3, [sp, #12]
 8014292:	1d1a      	adds	r2, r3, #4
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	9203      	str	r2, [sp, #12]
 8014298:	2b00      	cmp	r3, #0
 801429a:	bfb8      	it	lt
 801429c:	f04f 33ff 	movlt.w	r3, #4294967295
 80142a0:	f108 0802 	add.w	r8, r8, #2
 80142a4:	9305      	str	r3, [sp, #20]
 80142a6:	4d33      	ldr	r5, [pc, #204]	; (8014374 <_vfiprintf_r+0x21c>)
 80142a8:	f898 1000 	ldrb.w	r1, [r8]
 80142ac:	2203      	movs	r2, #3
 80142ae:	4628      	mov	r0, r5
 80142b0:	f7eb ff8e 	bl	80001d0 <memchr>
 80142b4:	b140      	cbz	r0, 80142c8 <_vfiprintf_r+0x170>
 80142b6:	2340      	movs	r3, #64	; 0x40
 80142b8:	1b40      	subs	r0, r0, r5
 80142ba:	fa03 f000 	lsl.w	r0, r3, r0
 80142be:	9b04      	ldr	r3, [sp, #16]
 80142c0:	4303      	orrs	r3, r0
 80142c2:	f108 0801 	add.w	r8, r8, #1
 80142c6:	9304      	str	r3, [sp, #16]
 80142c8:	f898 1000 	ldrb.w	r1, [r8]
 80142cc:	482a      	ldr	r0, [pc, #168]	; (8014378 <_vfiprintf_r+0x220>)
 80142ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80142d2:	2206      	movs	r2, #6
 80142d4:	f108 0701 	add.w	r7, r8, #1
 80142d8:	f7eb ff7a 	bl	80001d0 <memchr>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d037      	beq.n	8014350 <_vfiprintf_r+0x1f8>
 80142e0:	4b26      	ldr	r3, [pc, #152]	; (801437c <_vfiprintf_r+0x224>)
 80142e2:	bb1b      	cbnz	r3, 801432c <_vfiprintf_r+0x1d4>
 80142e4:	9b03      	ldr	r3, [sp, #12]
 80142e6:	3307      	adds	r3, #7
 80142e8:	f023 0307 	bic.w	r3, r3, #7
 80142ec:	3308      	adds	r3, #8
 80142ee:	9303      	str	r3, [sp, #12]
 80142f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f2:	444b      	add	r3, r9
 80142f4:	9309      	str	r3, [sp, #36]	; 0x24
 80142f6:	e750      	b.n	801419a <_vfiprintf_r+0x42>
 80142f8:	fb05 3202 	mla	r2, r5, r2, r3
 80142fc:	2001      	movs	r0, #1
 80142fe:	4688      	mov	r8, r1
 8014300:	e78a      	b.n	8014218 <_vfiprintf_r+0xc0>
 8014302:	2300      	movs	r3, #0
 8014304:	f108 0801 	add.w	r8, r8, #1
 8014308:	9305      	str	r3, [sp, #20]
 801430a:	4619      	mov	r1, r3
 801430c:	250a      	movs	r5, #10
 801430e:	4640      	mov	r0, r8
 8014310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014314:	3a30      	subs	r2, #48	; 0x30
 8014316:	2a09      	cmp	r2, #9
 8014318:	d903      	bls.n	8014322 <_vfiprintf_r+0x1ca>
 801431a:	2b00      	cmp	r3, #0
 801431c:	d0c3      	beq.n	80142a6 <_vfiprintf_r+0x14e>
 801431e:	9105      	str	r1, [sp, #20]
 8014320:	e7c1      	b.n	80142a6 <_vfiprintf_r+0x14e>
 8014322:	fb05 2101 	mla	r1, r5, r1, r2
 8014326:	2301      	movs	r3, #1
 8014328:	4680      	mov	r8, r0
 801432a:	e7f0      	b.n	801430e <_vfiprintf_r+0x1b6>
 801432c:	ab03      	add	r3, sp, #12
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	4622      	mov	r2, r4
 8014332:	4b13      	ldr	r3, [pc, #76]	; (8014380 <_vfiprintf_r+0x228>)
 8014334:	a904      	add	r1, sp, #16
 8014336:	4630      	mov	r0, r6
 8014338:	f3af 8000 	nop.w
 801433c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014340:	4681      	mov	r9, r0
 8014342:	d1d5      	bne.n	80142f0 <_vfiprintf_r+0x198>
 8014344:	89a3      	ldrh	r3, [r4, #12]
 8014346:	065b      	lsls	r3, r3, #25
 8014348:	f53f af7e 	bmi.w	8014248 <_vfiprintf_r+0xf0>
 801434c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801434e:	e77d      	b.n	801424c <_vfiprintf_r+0xf4>
 8014350:	ab03      	add	r3, sp, #12
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	4622      	mov	r2, r4
 8014356:	4b0a      	ldr	r3, [pc, #40]	; (8014380 <_vfiprintf_r+0x228>)
 8014358:	a904      	add	r1, sp, #16
 801435a:	4630      	mov	r0, r6
 801435c:	f000 f888 	bl	8014470 <_printf_i>
 8014360:	e7ec      	b.n	801433c <_vfiprintf_r+0x1e4>
 8014362:	bf00      	nop
 8014364:	080177e4 	.word	0x080177e4
 8014368:	08017824 	.word	0x08017824
 801436c:	08017804 	.word	0x08017804
 8014370:	080177c4 	.word	0x080177c4
 8014374:	0801782a 	.word	0x0801782a
 8014378:	0801782e 	.word	0x0801782e
 801437c:	00000000 	.word	0x00000000
 8014380:	08014133 	.word	0x08014133

08014384 <_printf_common>:
 8014384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014388:	4691      	mov	r9, r2
 801438a:	461f      	mov	r7, r3
 801438c:	688a      	ldr	r2, [r1, #8]
 801438e:	690b      	ldr	r3, [r1, #16]
 8014390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014394:	4293      	cmp	r3, r2
 8014396:	bfb8      	it	lt
 8014398:	4613      	movlt	r3, r2
 801439a:	f8c9 3000 	str.w	r3, [r9]
 801439e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143a2:	4606      	mov	r6, r0
 80143a4:	460c      	mov	r4, r1
 80143a6:	b112      	cbz	r2, 80143ae <_printf_common+0x2a>
 80143a8:	3301      	adds	r3, #1
 80143aa:	f8c9 3000 	str.w	r3, [r9]
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	0699      	lsls	r1, r3, #26
 80143b2:	bf42      	ittt	mi
 80143b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80143b8:	3302      	addmi	r3, #2
 80143ba:	f8c9 3000 	strmi.w	r3, [r9]
 80143be:	6825      	ldr	r5, [r4, #0]
 80143c0:	f015 0506 	ands.w	r5, r5, #6
 80143c4:	d107      	bne.n	80143d6 <_printf_common+0x52>
 80143c6:	f104 0a19 	add.w	sl, r4, #25
 80143ca:	68e3      	ldr	r3, [r4, #12]
 80143cc:	f8d9 2000 	ldr.w	r2, [r9]
 80143d0:	1a9b      	subs	r3, r3, r2
 80143d2:	42ab      	cmp	r3, r5
 80143d4:	dc28      	bgt.n	8014428 <_printf_common+0xa4>
 80143d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80143da:	6822      	ldr	r2, [r4, #0]
 80143dc:	3300      	adds	r3, #0
 80143de:	bf18      	it	ne
 80143e0:	2301      	movne	r3, #1
 80143e2:	0692      	lsls	r2, r2, #26
 80143e4:	d42d      	bmi.n	8014442 <_printf_common+0xbe>
 80143e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143ea:	4639      	mov	r1, r7
 80143ec:	4630      	mov	r0, r6
 80143ee:	47c0      	blx	r8
 80143f0:	3001      	adds	r0, #1
 80143f2:	d020      	beq.n	8014436 <_printf_common+0xb2>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	68e5      	ldr	r5, [r4, #12]
 80143f8:	f8d9 2000 	ldr.w	r2, [r9]
 80143fc:	f003 0306 	and.w	r3, r3, #6
 8014400:	2b04      	cmp	r3, #4
 8014402:	bf08      	it	eq
 8014404:	1aad      	subeq	r5, r5, r2
 8014406:	68a3      	ldr	r3, [r4, #8]
 8014408:	6922      	ldr	r2, [r4, #16]
 801440a:	bf0c      	ite	eq
 801440c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014410:	2500      	movne	r5, #0
 8014412:	4293      	cmp	r3, r2
 8014414:	bfc4      	itt	gt
 8014416:	1a9b      	subgt	r3, r3, r2
 8014418:	18ed      	addgt	r5, r5, r3
 801441a:	f04f 0900 	mov.w	r9, #0
 801441e:	341a      	adds	r4, #26
 8014420:	454d      	cmp	r5, r9
 8014422:	d11a      	bne.n	801445a <_printf_common+0xd6>
 8014424:	2000      	movs	r0, #0
 8014426:	e008      	b.n	801443a <_printf_common+0xb6>
 8014428:	2301      	movs	r3, #1
 801442a:	4652      	mov	r2, sl
 801442c:	4639      	mov	r1, r7
 801442e:	4630      	mov	r0, r6
 8014430:	47c0      	blx	r8
 8014432:	3001      	adds	r0, #1
 8014434:	d103      	bne.n	801443e <_printf_common+0xba>
 8014436:	f04f 30ff 	mov.w	r0, #4294967295
 801443a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443e:	3501      	adds	r5, #1
 8014440:	e7c3      	b.n	80143ca <_printf_common+0x46>
 8014442:	18e1      	adds	r1, r4, r3
 8014444:	1c5a      	adds	r2, r3, #1
 8014446:	2030      	movs	r0, #48	; 0x30
 8014448:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801444c:	4422      	add	r2, r4
 801444e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014456:	3302      	adds	r3, #2
 8014458:	e7c5      	b.n	80143e6 <_printf_common+0x62>
 801445a:	2301      	movs	r3, #1
 801445c:	4622      	mov	r2, r4
 801445e:	4639      	mov	r1, r7
 8014460:	4630      	mov	r0, r6
 8014462:	47c0      	blx	r8
 8014464:	3001      	adds	r0, #1
 8014466:	d0e6      	beq.n	8014436 <_printf_common+0xb2>
 8014468:	f109 0901 	add.w	r9, r9, #1
 801446c:	e7d8      	b.n	8014420 <_printf_common+0x9c>
	...

08014470 <_printf_i>:
 8014470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014474:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014478:	460c      	mov	r4, r1
 801447a:	7e09      	ldrb	r1, [r1, #24]
 801447c:	b085      	sub	sp, #20
 801447e:	296e      	cmp	r1, #110	; 0x6e
 8014480:	4617      	mov	r7, r2
 8014482:	4606      	mov	r6, r0
 8014484:	4698      	mov	r8, r3
 8014486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014488:	f000 80b3 	beq.w	80145f2 <_printf_i+0x182>
 801448c:	d822      	bhi.n	80144d4 <_printf_i+0x64>
 801448e:	2963      	cmp	r1, #99	; 0x63
 8014490:	d036      	beq.n	8014500 <_printf_i+0x90>
 8014492:	d80a      	bhi.n	80144aa <_printf_i+0x3a>
 8014494:	2900      	cmp	r1, #0
 8014496:	f000 80b9 	beq.w	801460c <_printf_i+0x19c>
 801449a:	2958      	cmp	r1, #88	; 0x58
 801449c:	f000 8083 	beq.w	80145a6 <_printf_i+0x136>
 80144a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80144a8:	e032      	b.n	8014510 <_printf_i+0xa0>
 80144aa:	2964      	cmp	r1, #100	; 0x64
 80144ac:	d001      	beq.n	80144b2 <_printf_i+0x42>
 80144ae:	2969      	cmp	r1, #105	; 0x69
 80144b0:	d1f6      	bne.n	80144a0 <_printf_i+0x30>
 80144b2:	6820      	ldr	r0, [r4, #0]
 80144b4:	6813      	ldr	r3, [r2, #0]
 80144b6:	0605      	lsls	r5, r0, #24
 80144b8:	f103 0104 	add.w	r1, r3, #4
 80144bc:	d52a      	bpl.n	8014514 <_printf_i+0xa4>
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	6011      	str	r1, [r2, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	da03      	bge.n	80144ce <_printf_i+0x5e>
 80144c6:	222d      	movs	r2, #45	; 0x2d
 80144c8:	425b      	negs	r3, r3
 80144ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80144ce:	486f      	ldr	r0, [pc, #444]	; (801468c <_printf_i+0x21c>)
 80144d0:	220a      	movs	r2, #10
 80144d2:	e039      	b.n	8014548 <_printf_i+0xd8>
 80144d4:	2973      	cmp	r1, #115	; 0x73
 80144d6:	f000 809d 	beq.w	8014614 <_printf_i+0x1a4>
 80144da:	d808      	bhi.n	80144ee <_printf_i+0x7e>
 80144dc:	296f      	cmp	r1, #111	; 0x6f
 80144de:	d020      	beq.n	8014522 <_printf_i+0xb2>
 80144e0:	2970      	cmp	r1, #112	; 0x70
 80144e2:	d1dd      	bne.n	80144a0 <_printf_i+0x30>
 80144e4:	6823      	ldr	r3, [r4, #0]
 80144e6:	f043 0320 	orr.w	r3, r3, #32
 80144ea:	6023      	str	r3, [r4, #0]
 80144ec:	e003      	b.n	80144f6 <_printf_i+0x86>
 80144ee:	2975      	cmp	r1, #117	; 0x75
 80144f0:	d017      	beq.n	8014522 <_printf_i+0xb2>
 80144f2:	2978      	cmp	r1, #120	; 0x78
 80144f4:	d1d4      	bne.n	80144a0 <_printf_i+0x30>
 80144f6:	2378      	movs	r3, #120	; 0x78
 80144f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80144fc:	4864      	ldr	r0, [pc, #400]	; (8014690 <_printf_i+0x220>)
 80144fe:	e055      	b.n	80145ac <_printf_i+0x13c>
 8014500:	6813      	ldr	r3, [r2, #0]
 8014502:	1d19      	adds	r1, r3, #4
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	6011      	str	r1, [r2, #0]
 8014508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801450c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014510:	2301      	movs	r3, #1
 8014512:	e08c      	b.n	801462e <_printf_i+0x1be>
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	6011      	str	r1, [r2, #0]
 8014518:	f010 0f40 	tst.w	r0, #64	; 0x40
 801451c:	bf18      	it	ne
 801451e:	b21b      	sxthne	r3, r3
 8014520:	e7cf      	b.n	80144c2 <_printf_i+0x52>
 8014522:	6813      	ldr	r3, [r2, #0]
 8014524:	6825      	ldr	r5, [r4, #0]
 8014526:	1d18      	adds	r0, r3, #4
 8014528:	6010      	str	r0, [r2, #0]
 801452a:	0628      	lsls	r0, r5, #24
 801452c:	d501      	bpl.n	8014532 <_printf_i+0xc2>
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	e002      	b.n	8014538 <_printf_i+0xc8>
 8014532:	0668      	lsls	r0, r5, #25
 8014534:	d5fb      	bpl.n	801452e <_printf_i+0xbe>
 8014536:	881b      	ldrh	r3, [r3, #0]
 8014538:	4854      	ldr	r0, [pc, #336]	; (801468c <_printf_i+0x21c>)
 801453a:	296f      	cmp	r1, #111	; 0x6f
 801453c:	bf14      	ite	ne
 801453e:	220a      	movne	r2, #10
 8014540:	2208      	moveq	r2, #8
 8014542:	2100      	movs	r1, #0
 8014544:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014548:	6865      	ldr	r5, [r4, #4]
 801454a:	60a5      	str	r5, [r4, #8]
 801454c:	2d00      	cmp	r5, #0
 801454e:	f2c0 8095 	blt.w	801467c <_printf_i+0x20c>
 8014552:	6821      	ldr	r1, [r4, #0]
 8014554:	f021 0104 	bic.w	r1, r1, #4
 8014558:	6021      	str	r1, [r4, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d13d      	bne.n	80145da <_printf_i+0x16a>
 801455e:	2d00      	cmp	r5, #0
 8014560:	f040 808e 	bne.w	8014680 <_printf_i+0x210>
 8014564:	4665      	mov	r5, ip
 8014566:	2a08      	cmp	r2, #8
 8014568:	d10b      	bne.n	8014582 <_printf_i+0x112>
 801456a:	6823      	ldr	r3, [r4, #0]
 801456c:	07db      	lsls	r3, r3, #31
 801456e:	d508      	bpl.n	8014582 <_printf_i+0x112>
 8014570:	6923      	ldr	r3, [r4, #16]
 8014572:	6862      	ldr	r2, [r4, #4]
 8014574:	429a      	cmp	r2, r3
 8014576:	bfde      	ittt	le
 8014578:	2330      	movle	r3, #48	; 0x30
 801457a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801457e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014582:	ebac 0305 	sub.w	r3, ip, r5
 8014586:	6123      	str	r3, [r4, #16]
 8014588:	f8cd 8000 	str.w	r8, [sp]
 801458c:	463b      	mov	r3, r7
 801458e:	aa03      	add	r2, sp, #12
 8014590:	4621      	mov	r1, r4
 8014592:	4630      	mov	r0, r6
 8014594:	f7ff fef6 	bl	8014384 <_printf_common>
 8014598:	3001      	adds	r0, #1
 801459a:	d14d      	bne.n	8014638 <_printf_i+0x1c8>
 801459c:	f04f 30ff 	mov.w	r0, #4294967295
 80145a0:	b005      	add	sp, #20
 80145a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145a6:	4839      	ldr	r0, [pc, #228]	; (801468c <_printf_i+0x21c>)
 80145a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80145ac:	6813      	ldr	r3, [r2, #0]
 80145ae:	6821      	ldr	r1, [r4, #0]
 80145b0:	1d1d      	adds	r5, r3, #4
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	6015      	str	r5, [r2, #0]
 80145b6:	060a      	lsls	r2, r1, #24
 80145b8:	d50b      	bpl.n	80145d2 <_printf_i+0x162>
 80145ba:	07ca      	lsls	r2, r1, #31
 80145bc:	bf44      	itt	mi
 80145be:	f041 0120 	orrmi.w	r1, r1, #32
 80145c2:	6021      	strmi	r1, [r4, #0]
 80145c4:	b91b      	cbnz	r3, 80145ce <_printf_i+0x15e>
 80145c6:	6822      	ldr	r2, [r4, #0]
 80145c8:	f022 0220 	bic.w	r2, r2, #32
 80145cc:	6022      	str	r2, [r4, #0]
 80145ce:	2210      	movs	r2, #16
 80145d0:	e7b7      	b.n	8014542 <_printf_i+0xd2>
 80145d2:	064d      	lsls	r5, r1, #25
 80145d4:	bf48      	it	mi
 80145d6:	b29b      	uxthmi	r3, r3
 80145d8:	e7ef      	b.n	80145ba <_printf_i+0x14a>
 80145da:	4665      	mov	r5, ip
 80145dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80145e0:	fb02 3311 	mls	r3, r2, r1, r3
 80145e4:	5cc3      	ldrb	r3, [r0, r3]
 80145e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80145ea:	460b      	mov	r3, r1
 80145ec:	2900      	cmp	r1, #0
 80145ee:	d1f5      	bne.n	80145dc <_printf_i+0x16c>
 80145f0:	e7b9      	b.n	8014566 <_printf_i+0xf6>
 80145f2:	6813      	ldr	r3, [r2, #0]
 80145f4:	6825      	ldr	r5, [r4, #0]
 80145f6:	6961      	ldr	r1, [r4, #20]
 80145f8:	1d18      	adds	r0, r3, #4
 80145fa:	6010      	str	r0, [r2, #0]
 80145fc:	0628      	lsls	r0, r5, #24
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	d501      	bpl.n	8014606 <_printf_i+0x196>
 8014602:	6019      	str	r1, [r3, #0]
 8014604:	e002      	b.n	801460c <_printf_i+0x19c>
 8014606:	066a      	lsls	r2, r5, #25
 8014608:	d5fb      	bpl.n	8014602 <_printf_i+0x192>
 801460a:	8019      	strh	r1, [r3, #0]
 801460c:	2300      	movs	r3, #0
 801460e:	6123      	str	r3, [r4, #16]
 8014610:	4665      	mov	r5, ip
 8014612:	e7b9      	b.n	8014588 <_printf_i+0x118>
 8014614:	6813      	ldr	r3, [r2, #0]
 8014616:	1d19      	adds	r1, r3, #4
 8014618:	6011      	str	r1, [r2, #0]
 801461a:	681d      	ldr	r5, [r3, #0]
 801461c:	6862      	ldr	r2, [r4, #4]
 801461e:	2100      	movs	r1, #0
 8014620:	4628      	mov	r0, r5
 8014622:	f7eb fdd5 	bl	80001d0 <memchr>
 8014626:	b108      	cbz	r0, 801462c <_printf_i+0x1bc>
 8014628:	1b40      	subs	r0, r0, r5
 801462a:	6060      	str	r0, [r4, #4]
 801462c:	6863      	ldr	r3, [r4, #4]
 801462e:	6123      	str	r3, [r4, #16]
 8014630:	2300      	movs	r3, #0
 8014632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014636:	e7a7      	b.n	8014588 <_printf_i+0x118>
 8014638:	6923      	ldr	r3, [r4, #16]
 801463a:	462a      	mov	r2, r5
 801463c:	4639      	mov	r1, r7
 801463e:	4630      	mov	r0, r6
 8014640:	47c0      	blx	r8
 8014642:	3001      	adds	r0, #1
 8014644:	d0aa      	beq.n	801459c <_printf_i+0x12c>
 8014646:	6823      	ldr	r3, [r4, #0]
 8014648:	079b      	lsls	r3, r3, #30
 801464a:	d413      	bmi.n	8014674 <_printf_i+0x204>
 801464c:	68e0      	ldr	r0, [r4, #12]
 801464e:	9b03      	ldr	r3, [sp, #12]
 8014650:	4298      	cmp	r0, r3
 8014652:	bfb8      	it	lt
 8014654:	4618      	movlt	r0, r3
 8014656:	e7a3      	b.n	80145a0 <_printf_i+0x130>
 8014658:	2301      	movs	r3, #1
 801465a:	464a      	mov	r2, r9
 801465c:	4639      	mov	r1, r7
 801465e:	4630      	mov	r0, r6
 8014660:	47c0      	blx	r8
 8014662:	3001      	adds	r0, #1
 8014664:	d09a      	beq.n	801459c <_printf_i+0x12c>
 8014666:	3501      	adds	r5, #1
 8014668:	68e3      	ldr	r3, [r4, #12]
 801466a:	9a03      	ldr	r2, [sp, #12]
 801466c:	1a9b      	subs	r3, r3, r2
 801466e:	42ab      	cmp	r3, r5
 8014670:	dcf2      	bgt.n	8014658 <_printf_i+0x1e8>
 8014672:	e7eb      	b.n	801464c <_printf_i+0x1dc>
 8014674:	2500      	movs	r5, #0
 8014676:	f104 0919 	add.w	r9, r4, #25
 801467a:	e7f5      	b.n	8014668 <_printf_i+0x1f8>
 801467c:	2b00      	cmp	r3, #0
 801467e:	d1ac      	bne.n	80145da <_printf_i+0x16a>
 8014680:	7803      	ldrb	r3, [r0, #0]
 8014682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801468a:	e76c      	b.n	8014566 <_printf_i+0xf6>
 801468c:	08017835 	.word	0x08017835
 8014690:	08017846 	.word	0x08017846

08014694 <_sbrk_r>:
 8014694:	b538      	push	{r3, r4, r5, lr}
 8014696:	4c06      	ldr	r4, [pc, #24]	; (80146b0 <_sbrk_r+0x1c>)
 8014698:	2300      	movs	r3, #0
 801469a:	4605      	mov	r5, r0
 801469c:	4608      	mov	r0, r1
 801469e:	6023      	str	r3, [r4, #0]
 80146a0:	f7ff fb20 	bl	8013ce4 <_sbrk>
 80146a4:	1c43      	adds	r3, r0, #1
 80146a6:	d102      	bne.n	80146ae <_sbrk_r+0x1a>
 80146a8:	6823      	ldr	r3, [r4, #0]
 80146aa:	b103      	cbz	r3, 80146ae <_sbrk_r+0x1a>
 80146ac:	602b      	str	r3, [r5, #0]
 80146ae:	bd38      	pop	{r3, r4, r5, pc}
 80146b0:	20010568 	.word	0x20010568

080146b4 <__sread>:
 80146b4:	b510      	push	{r4, lr}
 80146b6:	460c      	mov	r4, r1
 80146b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146bc:	f000 fa96 	bl	8014bec <_read_r>
 80146c0:	2800      	cmp	r0, #0
 80146c2:	bfab      	itete	ge
 80146c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146c6:	89a3      	ldrhlt	r3, [r4, #12]
 80146c8:	181b      	addge	r3, r3, r0
 80146ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146ce:	bfac      	ite	ge
 80146d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80146d2:	81a3      	strhlt	r3, [r4, #12]
 80146d4:	bd10      	pop	{r4, pc}

080146d6 <__swrite>:
 80146d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146da:	461f      	mov	r7, r3
 80146dc:	898b      	ldrh	r3, [r1, #12]
 80146de:	05db      	lsls	r3, r3, #23
 80146e0:	4605      	mov	r5, r0
 80146e2:	460c      	mov	r4, r1
 80146e4:	4616      	mov	r6, r2
 80146e6:	d505      	bpl.n	80146f4 <__swrite+0x1e>
 80146e8:	2302      	movs	r3, #2
 80146ea:	2200      	movs	r2, #0
 80146ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f0:	f000 f9b6 	bl	8014a60 <_lseek_r>
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146fe:	81a3      	strh	r3, [r4, #12]
 8014700:	4632      	mov	r2, r6
 8014702:	463b      	mov	r3, r7
 8014704:	4628      	mov	r0, r5
 8014706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801470a:	f000 b869 	b.w	80147e0 <_write_r>

0801470e <__sseek>:
 801470e:	b510      	push	{r4, lr}
 8014710:	460c      	mov	r4, r1
 8014712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014716:	f000 f9a3 	bl	8014a60 <_lseek_r>
 801471a:	1c43      	adds	r3, r0, #1
 801471c:	89a3      	ldrh	r3, [r4, #12]
 801471e:	bf15      	itete	ne
 8014720:	6560      	strne	r0, [r4, #84]	; 0x54
 8014722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801472a:	81a3      	strheq	r3, [r4, #12]
 801472c:	bf18      	it	ne
 801472e:	81a3      	strhne	r3, [r4, #12]
 8014730:	bd10      	pop	{r4, pc}

08014732 <__sclose>:
 8014732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014736:	f000 b8d3 	b.w	80148e0 <_close_r>
	...

0801473c <__swbuf_r>:
 801473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801473e:	460e      	mov	r6, r1
 8014740:	4614      	mov	r4, r2
 8014742:	4605      	mov	r5, r0
 8014744:	b118      	cbz	r0, 801474e <__swbuf_r+0x12>
 8014746:	6983      	ldr	r3, [r0, #24]
 8014748:	b90b      	cbnz	r3, 801474e <__swbuf_r+0x12>
 801474a:	f7ff fbf7 	bl	8013f3c <__sinit>
 801474e:	4b21      	ldr	r3, [pc, #132]	; (80147d4 <__swbuf_r+0x98>)
 8014750:	429c      	cmp	r4, r3
 8014752:	d12a      	bne.n	80147aa <__swbuf_r+0x6e>
 8014754:	686c      	ldr	r4, [r5, #4]
 8014756:	69a3      	ldr	r3, [r4, #24]
 8014758:	60a3      	str	r3, [r4, #8]
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	071a      	lsls	r2, r3, #28
 801475e:	d52e      	bpl.n	80147be <__swbuf_r+0x82>
 8014760:	6923      	ldr	r3, [r4, #16]
 8014762:	b363      	cbz	r3, 80147be <__swbuf_r+0x82>
 8014764:	6923      	ldr	r3, [r4, #16]
 8014766:	6820      	ldr	r0, [r4, #0]
 8014768:	1ac0      	subs	r0, r0, r3
 801476a:	6963      	ldr	r3, [r4, #20]
 801476c:	b2f6      	uxtb	r6, r6
 801476e:	4283      	cmp	r3, r0
 8014770:	4637      	mov	r7, r6
 8014772:	dc04      	bgt.n	801477e <__swbuf_r+0x42>
 8014774:	4621      	mov	r1, r4
 8014776:	4628      	mov	r0, r5
 8014778:	f000 f948 	bl	8014a0c <_fflush_r>
 801477c:	bb28      	cbnz	r0, 80147ca <__swbuf_r+0x8e>
 801477e:	68a3      	ldr	r3, [r4, #8]
 8014780:	3b01      	subs	r3, #1
 8014782:	60a3      	str	r3, [r4, #8]
 8014784:	6823      	ldr	r3, [r4, #0]
 8014786:	1c5a      	adds	r2, r3, #1
 8014788:	6022      	str	r2, [r4, #0]
 801478a:	701e      	strb	r6, [r3, #0]
 801478c:	6963      	ldr	r3, [r4, #20]
 801478e:	3001      	adds	r0, #1
 8014790:	4283      	cmp	r3, r0
 8014792:	d004      	beq.n	801479e <__swbuf_r+0x62>
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	07db      	lsls	r3, r3, #31
 8014798:	d519      	bpl.n	80147ce <__swbuf_r+0x92>
 801479a:	2e0a      	cmp	r6, #10
 801479c:	d117      	bne.n	80147ce <__swbuf_r+0x92>
 801479e:	4621      	mov	r1, r4
 80147a0:	4628      	mov	r0, r5
 80147a2:	f000 f933 	bl	8014a0c <_fflush_r>
 80147a6:	b190      	cbz	r0, 80147ce <__swbuf_r+0x92>
 80147a8:	e00f      	b.n	80147ca <__swbuf_r+0x8e>
 80147aa:	4b0b      	ldr	r3, [pc, #44]	; (80147d8 <__swbuf_r+0x9c>)
 80147ac:	429c      	cmp	r4, r3
 80147ae:	d101      	bne.n	80147b4 <__swbuf_r+0x78>
 80147b0:	68ac      	ldr	r4, [r5, #8]
 80147b2:	e7d0      	b.n	8014756 <__swbuf_r+0x1a>
 80147b4:	4b09      	ldr	r3, [pc, #36]	; (80147dc <__swbuf_r+0xa0>)
 80147b6:	429c      	cmp	r4, r3
 80147b8:	bf08      	it	eq
 80147ba:	68ec      	ldreq	r4, [r5, #12]
 80147bc:	e7cb      	b.n	8014756 <__swbuf_r+0x1a>
 80147be:	4621      	mov	r1, r4
 80147c0:	4628      	mov	r0, r5
 80147c2:	f000 f81f 	bl	8014804 <__swsetup_r>
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d0cc      	beq.n	8014764 <__swbuf_r+0x28>
 80147ca:	f04f 37ff 	mov.w	r7, #4294967295
 80147ce:	4638      	mov	r0, r7
 80147d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147d2:	bf00      	nop
 80147d4:	080177e4 	.word	0x080177e4
 80147d8:	08017804 	.word	0x08017804
 80147dc:	080177c4 	.word	0x080177c4

080147e0 <_write_r>:
 80147e0:	b538      	push	{r3, r4, r5, lr}
 80147e2:	4c07      	ldr	r4, [pc, #28]	; (8014800 <_write_r+0x20>)
 80147e4:	4605      	mov	r5, r0
 80147e6:	4608      	mov	r0, r1
 80147e8:	4611      	mov	r1, r2
 80147ea:	2200      	movs	r2, #0
 80147ec:	6022      	str	r2, [r4, #0]
 80147ee:	461a      	mov	r2, r3
 80147f0:	f7ff fa27 	bl	8013c42 <_write>
 80147f4:	1c43      	adds	r3, r0, #1
 80147f6:	d102      	bne.n	80147fe <_write_r+0x1e>
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	b103      	cbz	r3, 80147fe <_write_r+0x1e>
 80147fc:	602b      	str	r3, [r5, #0]
 80147fe:	bd38      	pop	{r3, r4, r5, pc}
 8014800:	20010568 	.word	0x20010568

08014804 <__swsetup_r>:
 8014804:	4b32      	ldr	r3, [pc, #200]	; (80148d0 <__swsetup_r+0xcc>)
 8014806:	b570      	push	{r4, r5, r6, lr}
 8014808:	681d      	ldr	r5, [r3, #0]
 801480a:	4606      	mov	r6, r0
 801480c:	460c      	mov	r4, r1
 801480e:	b125      	cbz	r5, 801481a <__swsetup_r+0x16>
 8014810:	69ab      	ldr	r3, [r5, #24]
 8014812:	b913      	cbnz	r3, 801481a <__swsetup_r+0x16>
 8014814:	4628      	mov	r0, r5
 8014816:	f7ff fb91 	bl	8013f3c <__sinit>
 801481a:	4b2e      	ldr	r3, [pc, #184]	; (80148d4 <__swsetup_r+0xd0>)
 801481c:	429c      	cmp	r4, r3
 801481e:	d10f      	bne.n	8014840 <__swsetup_r+0x3c>
 8014820:	686c      	ldr	r4, [r5, #4]
 8014822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014826:	b29a      	uxth	r2, r3
 8014828:	0715      	lsls	r5, r2, #28
 801482a:	d42c      	bmi.n	8014886 <__swsetup_r+0x82>
 801482c:	06d0      	lsls	r0, r2, #27
 801482e:	d411      	bmi.n	8014854 <__swsetup_r+0x50>
 8014830:	2209      	movs	r2, #9
 8014832:	6032      	str	r2, [r6, #0]
 8014834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014838:	81a3      	strh	r3, [r4, #12]
 801483a:	f04f 30ff 	mov.w	r0, #4294967295
 801483e:	e03e      	b.n	80148be <__swsetup_r+0xba>
 8014840:	4b25      	ldr	r3, [pc, #148]	; (80148d8 <__swsetup_r+0xd4>)
 8014842:	429c      	cmp	r4, r3
 8014844:	d101      	bne.n	801484a <__swsetup_r+0x46>
 8014846:	68ac      	ldr	r4, [r5, #8]
 8014848:	e7eb      	b.n	8014822 <__swsetup_r+0x1e>
 801484a:	4b24      	ldr	r3, [pc, #144]	; (80148dc <__swsetup_r+0xd8>)
 801484c:	429c      	cmp	r4, r3
 801484e:	bf08      	it	eq
 8014850:	68ec      	ldreq	r4, [r5, #12]
 8014852:	e7e6      	b.n	8014822 <__swsetup_r+0x1e>
 8014854:	0751      	lsls	r1, r2, #29
 8014856:	d512      	bpl.n	801487e <__swsetup_r+0x7a>
 8014858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801485a:	b141      	cbz	r1, 801486e <__swsetup_r+0x6a>
 801485c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014860:	4299      	cmp	r1, r3
 8014862:	d002      	beq.n	801486a <__swsetup_r+0x66>
 8014864:	4630      	mov	r0, r6
 8014866:	f000 f973 	bl	8014b50 <_free_r>
 801486a:	2300      	movs	r3, #0
 801486c:	6363      	str	r3, [r4, #52]	; 0x34
 801486e:	89a3      	ldrh	r3, [r4, #12]
 8014870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014874:	81a3      	strh	r3, [r4, #12]
 8014876:	2300      	movs	r3, #0
 8014878:	6063      	str	r3, [r4, #4]
 801487a:	6923      	ldr	r3, [r4, #16]
 801487c:	6023      	str	r3, [r4, #0]
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	f043 0308 	orr.w	r3, r3, #8
 8014884:	81a3      	strh	r3, [r4, #12]
 8014886:	6923      	ldr	r3, [r4, #16]
 8014888:	b94b      	cbnz	r3, 801489e <__swsetup_r+0x9a>
 801488a:	89a3      	ldrh	r3, [r4, #12]
 801488c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014894:	d003      	beq.n	801489e <__swsetup_r+0x9a>
 8014896:	4621      	mov	r1, r4
 8014898:	4630      	mov	r0, r6
 801489a:	f000 f917 	bl	8014acc <__smakebuf_r>
 801489e:	89a2      	ldrh	r2, [r4, #12]
 80148a0:	f012 0301 	ands.w	r3, r2, #1
 80148a4:	d00c      	beq.n	80148c0 <__swsetup_r+0xbc>
 80148a6:	2300      	movs	r3, #0
 80148a8:	60a3      	str	r3, [r4, #8]
 80148aa:	6963      	ldr	r3, [r4, #20]
 80148ac:	425b      	negs	r3, r3
 80148ae:	61a3      	str	r3, [r4, #24]
 80148b0:	6923      	ldr	r3, [r4, #16]
 80148b2:	b953      	cbnz	r3, 80148ca <__swsetup_r+0xc6>
 80148b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80148bc:	d1ba      	bne.n	8014834 <__swsetup_r+0x30>
 80148be:	bd70      	pop	{r4, r5, r6, pc}
 80148c0:	0792      	lsls	r2, r2, #30
 80148c2:	bf58      	it	pl
 80148c4:	6963      	ldrpl	r3, [r4, #20]
 80148c6:	60a3      	str	r3, [r4, #8]
 80148c8:	e7f2      	b.n	80148b0 <__swsetup_r+0xac>
 80148ca:	2000      	movs	r0, #0
 80148cc:	e7f7      	b.n	80148be <__swsetup_r+0xba>
 80148ce:	bf00      	nop
 80148d0:	20000018 	.word	0x20000018
 80148d4:	080177e4 	.word	0x080177e4
 80148d8:	08017804 	.word	0x08017804
 80148dc:	080177c4 	.word	0x080177c4

080148e0 <_close_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4c06      	ldr	r4, [pc, #24]	; (80148fc <_close_r+0x1c>)
 80148e4:	2300      	movs	r3, #0
 80148e6:	4605      	mov	r5, r0
 80148e8:	4608      	mov	r0, r1
 80148ea:	6023      	str	r3, [r4, #0]
 80148ec:	f7ff f9c5 	bl	8013c7a <_close>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	d102      	bne.n	80148fa <_close_r+0x1a>
 80148f4:	6823      	ldr	r3, [r4, #0]
 80148f6:	b103      	cbz	r3, 80148fa <_close_r+0x1a>
 80148f8:	602b      	str	r3, [r5, #0]
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	20010568 	.word	0x20010568

08014900 <__sflush_r>:
 8014900:	898a      	ldrh	r2, [r1, #12]
 8014902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014906:	4605      	mov	r5, r0
 8014908:	0710      	lsls	r0, r2, #28
 801490a:	460c      	mov	r4, r1
 801490c:	d458      	bmi.n	80149c0 <__sflush_r+0xc0>
 801490e:	684b      	ldr	r3, [r1, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	dc05      	bgt.n	8014920 <__sflush_r+0x20>
 8014914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014916:	2b00      	cmp	r3, #0
 8014918:	dc02      	bgt.n	8014920 <__sflush_r+0x20>
 801491a:	2000      	movs	r0, #0
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014922:	2e00      	cmp	r6, #0
 8014924:	d0f9      	beq.n	801491a <__sflush_r+0x1a>
 8014926:	2300      	movs	r3, #0
 8014928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801492c:	682f      	ldr	r7, [r5, #0]
 801492e:	6a21      	ldr	r1, [r4, #32]
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	d032      	beq.n	801499a <__sflush_r+0x9a>
 8014934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	075a      	lsls	r2, r3, #29
 801493a:	d505      	bpl.n	8014948 <__sflush_r+0x48>
 801493c:	6863      	ldr	r3, [r4, #4]
 801493e:	1ac0      	subs	r0, r0, r3
 8014940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014942:	b10b      	cbz	r3, 8014948 <__sflush_r+0x48>
 8014944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014946:	1ac0      	subs	r0, r0, r3
 8014948:	2300      	movs	r3, #0
 801494a:	4602      	mov	r2, r0
 801494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801494e:	6a21      	ldr	r1, [r4, #32]
 8014950:	4628      	mov	r0, r5
 8014952:	47b0      	blx	r6
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	89a3      	ldrh	r3, [r4, #12]
 8014958:	d106      	bne.n	8014968 <__sflush_r+0x68>
 801495a:	6829      	ldr	r1, [r5, #0]
 801495c:	291d      	cmp	r1, #29
 801495e:	d848      	bhi.n	80149f2 <__sflush_r+0xf2>
 8014960:	4a29      	ldr	r2, [pc, #164]	; (8014a08 <__sflush_r+0x108>)
 8014962:	40ca      	lsrs	r2, r1
 8014964:	07d6      	lsls	r6, r2, #31
 8014966:	d544      	bpl.n	80149f2 <__sflush_r+0xf2>
 8014968:	2200      	movs	r2, #0
 801496a:	6062      	str	r2, [r4, #4]
 801496c:	04d9      	lsls	r1, r3, #19
 801496e:	6922      	ldr	r2, [r4, #16]
 8014970:	6022      	str	r2, [r4, #0]
 8014972:	d504      	bpl.n	801497e <__sflush_r+0x7e>
 8014974:	1c42      	adds	r2, r0, #1
 8014976:	d101      	bne.n	801497c <__sflush_r+0x7c>
 8014978:	682b      	ldr	r3, [r5, #0]
 801497a:	b903      	cbnz	r3, 801497e <__sflush_r+0x7e>
 801497c:	6560      	str	r0, [r4, #84]	; 0x54
 801497e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014980:	602f      	str	r7, [r5, #0]
 8014982:	2900      	cmp	r1, #0
 8014984:	d0c9      	beq.n	801491a <__sflush_r+0x1a>
 8014986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801498a:	4299      	cmp	r1, r3
 801498c:	d002      	beq.n	8014994 <__sflush_r+0x94>
 801498e:	4628      	mov	r0, r5
 8014990:	f000 f8de 	bl	8014b50 <_free_r>
 8014994:	2000      	movs	r0, #0
 8014996:	6360      	str	r0, [r4, #52]	; 0x34
 8014998:	e7c0      	b.n	801491c <__sflush_r+0x1c>
 801499a:	2301      	movs	r3, #1
 801499c:	4628      	mov	r0, r5
 801499e:	47b0      	blx	r6
 80149a0:	1c41      	adds	r1, r0, #1
 80149a2:	d1c8      	bne.n	8014936 <__sflush_r+0x36>
 80149a4:	682b      	ldr	r3, [r5, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0c5      	beq.n	8014936 <__sflush_r+0x36>
 80149aa:	2b1d      	cmp	r3, #29
 80149ac:	d001      	beq.n	80149b2 <__sflush_r+0xb2>
 80149ae:	2b16      	cmp	r3, #22
 80149b0:	d101      	bne.n	80149b6 <__sflush_r+0xb6>
 80149b2:	602f      	str	r7, [r5, #0]
 80149b4:	e7b1      	b.n	801491a <__sflush_r+0x1a>
 80149b6:	89a3      	ldrh	r3, [r4, #12]
 80149b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149bc:	81a3      	strh	r3, [r4, #12]
 80149be:	e7ad      	b.n	801491c <__sflush_r+0x1c>
 80149c0:	690f      	ldr	r7, [r1, #16]
 80149c2:	2f00      	cmp	r7, #0
 80149c4:	d0a9      	beq.n	801491a <__sflush_r+0x1a>
 80149c6:	0793      	lsls	r3, r2, #30
 80149c8:	680e      	ldr	r6, [r1, #0]
 80149ca:	bf08      	it	eq
 80149cc:	694b      	ldreq	r3, [r1, #20]
 80149ce:	600f      	str	r7, [r1, #0]
 80149d0:	bf18      	it	ne
 80149d2:	2300      	movne	r3, #0
 80149d4:	eba6 0807 	sub.w	r8, r6, r7
 80149d8:	608b      	str	r3, [r1, #8]
 80149da:	f1b8 0f00 	cmp.w	r8, #0
 80149de:	dd9c      	ble.n	801491a <__sflush_r+0x1a>
 80149e0:	4643      	mov	r3, r8
 80149e2:	463a      	mov	r2, r7
 80149e4:	6a21      	ldr	r1, [r4, #32]
 80149e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149e8:	4628      	mov	r0, r5
 80149ea:	47b0      	blx	r6
 80149ec:	2800      	cmp	r0, #0
 80149ee:	dc06      	bgt.n	80149fe <__sflush_r+0xfe>
 80149f0:	89a3      	ldrh	r3, [r4, #12]
 80149f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f6:	81a3      	strh	r3, [r4, #12]
 80149f8:	f04f 30ff 	mov.w	r0, #4294967295
 80149fc:	e78e      	b.n	801491c <__sflush_r+0x1c>
 80149fe:	4407      	add	r7, r0
 8014a00:	eba8 0800 	sub.w	r8, r8, r0
 8014a04:	e7e9      	b.n	80149da <__sflush_r+0xda>
 8014a06:	bf00      	nop
 8014a08:	20400001 	.word	0x20400001

08014a0c <_fflush_r>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	690b      	ldr	r3, [r1, #16]
 8014a10:	4605      	mov	r5, r0
 8014a12:	460c      	mov	r4, r1
 8014a14:	b1db      	cbz	r3, 8014a4e <_fflush_r+0x42>
 8014a16:	b118      	cbz	r0, 8014a20 <_fflush_r+0x14>
 8014a18:	6983      	ldr	r3, [r0, #24]
 8014a1a:	b90b      	cbnz	r3, 8014a20 <_fflush_r+0x14>
 8014a1c:	f7ff fa8e 	bl	8013f3c <__sinit>
 8014a20:	4b0c      	ldr	r3, [pc, #48]	; (8014a54 <_fflush_r+0x48>)
 8014a22:	429c      	cmp	r4, r3
 8014a24:	d109      	bne.n	8014a3a <_fflush_r+0x2e>
 8014a26:	686c      	ldr	r4, [r5, #4]
 8014a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a2c:	b17b      	cbz	r3, 8014a4e <_fflush_r+0x42>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	4628      	mov	r0, r5
 8014a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a36:	f7ff bf63 	b.w	8014900 <__sflush_r>
 8014a3a:	4b07      	ldr	r3, [pc, #28]	; (8014a58 <_fflush_r+0x4c>)
 8014a3c:	429c      	cmp	r4, r3
 8014a3e:	d101      	bne.n	8014a44 <_fflush_r+0x38>
 8014a40:	68ac      	ldr	r4, [r5, #8]
 8014a42:	e7f1      	b.n	8014a28 <_fflush_r+0x1c>
 8014a44:	4b05      	ldr	r3, [pc, #20]	; (8014a5c <_fflush_r+0x50>)
 8014a46:	429c      	cmp	r4, r3
 8014a48:	bf08      	it	eq
 8014a4a:	68ec      	ldreq	r4, [r5, #12]
 8014a4c:	e7ec      	b.n	8014a28 <_fflush_r+0x1c>
 8014a4e:	2000      	movs	r0, #0
 8014a50:	bd38      	pop	{r3, r4, r5, pc}
 8014a52:	bf00      	nop
 8014a54:	080177e4 	.word	0x080177e4
 8014a58:	08017804 	.word	0x08017804
 8014a5c:	080177c4 	.word	0x080177c4

08014a60 <_lseek_r>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4c07      	ldr	r4, [pc, #28]	; (8014a80 <_lseek_r+0x20>)
 8014a64:	4605      	mov	r5, r0
 8014a66:	4608      	mov	r0, r1
 8014a68:	4611      	mov	r1, r2
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	6022      	str	r2, [r4, #0]
 8014a6e:	461a      	mov	r2, r3
 8014a70:	f7ff f92a 	bl	8013cc8 <_lseek>
 8014a74:	1c43      	adds	r3, r0, #1
 8014a76:	d102      	bne.n	8014a7e <_lseek_r+0x1e>
 8014a78:	6823      	ldr	r3, [r4, #0]
 8014a7a:	b103      	cbz	r3, 8014a7e <_lseek_r+0x1e>
 8014a7c:	602b      	str	r3, [r5, #0]
 8014a7e:	bd38      	pop	{r3, r4, r5, pc}
 8014a80:	20010568 	.word	0x20010568

08014a84 <__swhatbuf_r>:
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	460e      	mov	r6, r1
 8014a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a8c:	2900      	cmp	r1, #0
 8014a8e:	b096      	sub	sp, #88	; 0x58
 8014a90:	4614      	mov	r4, r2
 8014a92:	461d      	mov	r5, r3
 8014a94:	da07      	bge.n	8014aa6 <__swhatbuf_r+0x22>
 8014a96:	2300      	movs	r3, #0
 8014a98:	602b      	str	r3, [r5, #0]
 8014a9a:	89b3      	ldrh	r3, [r6, #12]
 8014a9c:	061a      	lsls	r2, r3, #24
 8014a9e:	d410      	bmi.n	8014ac2 <__swhatbuf_r+0x3e>
 8014aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014aa4:	e00e      	b.n	8014ac4 <__swhatbuf_r+0x40>
 8014aa6:	466a      	mov	r2, sp
 8014aa8:	f000 f8b2 	bl	8014c10 <_fstat_r>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	dbf2      	blt.n	8014a96 <__swhatbuf_r+0x12>
 8014ab0:	9a01      	ldr	r2, [sp, #4]
 8014ab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ab6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014aba:	425a      	negs	r2, r3
 8014abc:	415a      	adcs	r2, r3
 8014abe:	602a      	str	r2, [r5, #0]
 8014ac0:	e7ee      	b.n	8014aa0 <__swhatbuf_r+0x1c>
 8014ac2:	2340      	movs	r3, #64	; 0x40
 8014ac4:	2000      	movs	r0, #0
 8014ac6:	6023      	str	r3, [r4, #0]
 8014ac8:	b016      	add	sp, #88	; 0x58
 8014aca:	bd70      	pop	{r4, r5, r6, pc}

08014acc <__smakebuf_r>:
 8014acc:	898b      	ldrh	r3, [r1, #12]
 8014ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ad0:	079d      	lsls	r5, r3, #30
 8014ad2:	4606      	mov	r6, r0
 8014ad4:	460c      	mov	r4, r1
 8014ad6:	d507      	bpl.n	8014ae8 <__smakebuf_r+0x1c>
 8014ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014adc:	6023      	str	r3, [r4, #0]
 8014ade:	6123      	str	r3, [r4, #16]
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	6163      	str	r3, [r4, #20]
 8014ae4:	b002      	add	sp, #8
 8014ae6:	bd70      	pop	{r4, r5, r6, pc}
 8014ae8:	ab01      	add	r3, sp, #4
 8014aea:	466a      	mov	r2, sp
 8014aec:	f7ff ffca 	bl	8014a84 <__swhatbuf_r>
 8014af0:	9900      	ldr	r1, [sp, #0]
 8014af2:	4605      	mov	r5, r0
 8014af4:	4630      	mov	r0, r6
 8014af6:	f7ff faab 	bl	8014050 <_malloc_r>
 8014afa:	b948      	cbnz	r0, 8014b10 <__smakebuf_r+0x44>
 8014afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b00:	059a      	lsls	r2, r3, #22
 8014b02:	d4ef      	bmi.n	8014ae4 <__smakebuf_r+0x18>
 8014b04:	f023 0303 	bic.w	r3, r3, #3
 8014b08:	f043 0302 	orr.w	r3, r3, #2
 8014b0c:	81a3      	strh	r3, [r4, #12]
 8014b0e:	e7e3      	b.n	8014ad8 <__smakebuf_r+0xc>
 8014b10:	4b0d      	ldr	r3, [pc, #52]	; (8014b48 <__smakebuf_r+0x7c>)
 8014b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	6020      	str	r0, [r4, #0]
 8014b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b1c:	81a3      	strh	r3, [r4, #12]
 8014b1e:	9b00      	ldr	r3, [sp, #0]
 8014b20:	6163      	str	r3, [r4, #20]
 8014b22:	9b01      	ldr	r3, [sp, #4]
 8014b24:	6120      	str	r0, [r4, #16]
 8014b26:	b15b      	cbz	r3, 8014b40 <__smakebuf_r+0x74>
 8014b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	f000 f881 	bl	8014c34 <_isatty_r>
 8014b32:	b128      	cbz	r0, 8014b40 <__smakebuf_r+0x74>
 8014b34:	89a3      	ldrh	r3, [r4, #12]
 8014b36:	f023 0303 	bic.w	r3, r3, #3
 8014b3a:	f043 0301 	orr.w	r3, r3, #1
 8014b3e:	81a3      	strh	r3, [r4, #12]
 8014b40:	89a3      	ldrh	r3, [r4, #12]
 8014b42:	431d      	orrs	r5, r3
 8014b44:	81a5      	strh	r5, [r4, #12]
 8014b46:	e7cd      	b.n	8014ae4 <__smakebuf_r+0x18>
 8014b48:	08013f05 	.word	0x08013f05

08014b4c <__malloc_lock>:
 8014b4c:	4770      	bx	lr

08014b4e <__malloc_unlock>:
 8014b4e:	4770      	bx	lr

08014b50 <_free_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4605      	mov	r5, r0
 8014b54:	2900      	cmp	r1, #0
 8014b56:	d045      	beq.n	8014be4 <_free_r+0x94>
 8014b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b5c:	1f0c      	subs	r4, r1, #4
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	bfb8      	it	lt
 8014b62:	18e4      	addlt	r4, r4, r3
 8014b64:	f7ff fff2 	bl	8014b4c <__malloc_lock>
 8014b68:	4a1f      	ldr	r2, [pc, #124]	; (8014be8 <_free_r+0x98>)
 8014b6a:	6813      	ldr	r3, [r2, #0]
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	b933      	cbnz	r3, 8014b7e <_free_r+0x2e>
 8014b70:	6063      	str	r3, [r4, #4]
 8014b72:	6014      	str	r4, [r2, #0]
 8014b74:	4628      	mov	r0, r5
 8014b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b7a:	f7ff bfe8 	b.w	8014b4e <__malloc_unlock>
 8014b7e:	42a3      	cmp	r3, r4
 8014b80:	d90c      	bls.n	8014b9c <_free_r+0x4c>
 8014b82:	6821      	ldr	r1, [r4, #0]
 8014b84:	1862      	adds	r2, r4, r1
 8014b86:	4293      	cmp	r3, r2
 8014b88:	bf04      	itt	eq
 8014b8a:	681a      	ldreq	r2, [r3, #0]
 8014b8c:	685b      	ldreq	r3, [r3, #4]
 8014b8e:	6063      	str	r3, [r4, #4]
 8014b90:	bf04      	itt	eq
 8014b92:	1852      	addeq	r2, r2, r1
 8014b94:	6022      	streq	r2, [r4, #0]
 8014b96:	6004      	str	r4, [r0, #0]
 8014b98:	e7ec      	b.n	8014b74 <_free_r+0x24>
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	685a      	ldr	r2, [r3, #4]
 8014b9e:	b10a      	cbz	r2, 8014ba4 <_free_r+0x54>
 8014ba0:	42a2      	cmp	r2, r4
 8014ba2:	d9fa      	bls.n	8014b9a <_free_r+0x4a>
 8014ba4:	6819      	ldr	r1, [r3, #0]
 8014ba6:	1858      	adds	r0, r3, r1
 8014ba8:	42a0      	cmp	r0, r4
 8014baa:	d10b      	bne.n	8014bc4 <_free_r+0x74>
 8014bac:	6820      	ldr	r0, [r4, #0]
 8014bae:	4401      	add	r1, r0
 8014bb0:	1858      	adds	r0, r3, r1
 8014bb2:	4282      	cmp	r2, r0
 8014bb4:	6019      	str	r1, [r3, #0]
 8014bb6:	d1dd      	bne.n	8014b74 <_free_r+0x24>
 8014bb8:	6810      	ldr	r0, [r2, #0]
 8014bba:	6852      	ldr	r2, [r2, #4]
 8014bbc:	605a      	str	r2, [r3, #4]
 8014bbe:	4401      	add	r1, r0
 8014bc0:	6019      	str	r1, [r3, #0]
 8014bc2:	e7d7      	b.n	8014b74 <_free_r+0x24>
 8014bc4:	d902      	bls.n	8014bcc <_free_r+0x7c>
 8014bc6:	230c      	movs	r3, #12
 8014bc8:	602b      	str	r3, [r5, #0]
 8014bca:	e7d3      	b.n	8014b74 <_free_r+0x24>
 8014bcc:	6820      	ldr	r0, [r4, #0]
 8014bce:	1821      	adds	r1, r4, r0
 8014bd0:	428a      	cmp	r2, r1
 8014bd2:	bf04      	itt	eq
 8014bd4:	6811      	ldreq	r1, [r2, #0]
 8014bd6:	6852      	ldreq	r2, [r2, #4]
 8014bd8:	6062      	str	r2, [r4, #4]
 8014bda:	bf04      	itt	eq
 8014bdc:	1809      	addeq	r1, r1, r0
 8014bde:	6021      	streq	r1, [r4, #0]
 8014be0:	605c      	str	r4, [r3, #4]
 8014be2:	e7c7      	b.n	8014b74 <_free_r+0x24>
 8014be4:	bd38      	pop	{r3, r4, r5, pc}
 8014be6:	bf00      	nop
 8014be8:	2000cde8 	.word	0x2000cde8

08014bec <_read_r>:
 8014bec:	b538      	push	{r3, r4, r5, lr}
 8014bee:	4c07      	ldr	r4, [pc, #28]	; (8014c0c <_read_r+0x20>)
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	4608      	mov	r0, r1
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	6022      	str	r2, [r4, #0]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	f7ff f804 	bl	8013c08 <_read>
 8014c00:	1c43      	adds	r3, r0, #1
 8014c02:	d102      	bne.n	8014c0a <_read_r+0x1e>
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	b103      	cbz	r3, 8014c0a <_read_r+0x1e>
 8014c08:	602b      	str	r3, [r5, #0]
 8014c0a:	bd38      	pop	{r3, r4, r5, pc}
 8014c0c:	20010568 	.word	0x20010568

08014c10 <_fstat_r>:
 8014c10:	b538      	push	{r3, r4, r5, lr}
 8014c12:	4c07      	ldr	r4, [pc, #28]	; (8014c30 <_fstat_r+0x20>)
 8014c14:	2300      	movs	r3, #0
 8014c16:	4605      	mov	r5, r0
 8014c18:	4608      	mov	r0, r1
 8014c1a:	4611      	mov	r1, r2
 8014c1c:	6023      	str	r3, [r4, #0]
 8014c1e:	f7ff f838 	bl	8013c92 <_fstat>
 8014c22:	1c43      	adds	r3, r0, #1
 8014c24:	d102      	bne.n	8014c2c <_fstat_r+0x1c>
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	b103      	cbz	r3, 8014c2c <_fstat_r+0x1c>
 8014c2a:	602b      	str	r3, [r5, #0]
 8014c2c:	bd38      	pop	{r3, r4, r5, pc}
 8014c2e:	bf00      	nop
 8014c30:	20010568 	.word	0x20010568

08014c34 <_isatty_r>:
 8014c34:	b538      	push	{r3, r4, r5, lr}
 8014c36:	4c06      	ldr	r4, [pc, #24]	; (8014c50 <_isatty_r+0x1c>)
 8014c38:	2300      	movs	r3, #0
 8014c3a:	4605      	mov	r5, r0
 8014c3c:	4608      	mov	r0, r1
 8014c3e:	6023      	str	r3, [r4, #0]
 8014c40:	f7ff f837 	bl	8013cb2 <_isatty>
 8014c44:	1c43      	adds	r3, r0, #1
 8014c46:	d102      	bne.n	8014c4e <_isatty_r+0x1a>
 8014c48:	6823      	ldr	r3, [r4, #0]
 8014c4a:	b103      	cbz	r3, 8014c4e <_isatty_r+0x1a>
 8014c4c:	602b      	str	r3, [r5, #0]
 8014c4e:	bd38      	pop	{r3, r4, r5, pc}
 8014c50:	20010568 	.word	0x20010568

08014c54 <_init>:
 8014c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c56:	bf00      	nop
 8014c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c5a:	bc08      	pop	{r3}
 8014c5c:	469e      	mov	lr, r3
 8014c5e:	4770      	bx	lr

08014c60 <_fini>:
 8014c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c62:	bf00      	nop
 8014c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c66:	bc08      	pop	{r3}
 8014c68:	469e      	mov	lr, r3
 8014c6a:	4770      	bx	lr
